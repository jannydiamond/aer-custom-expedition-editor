{"version":3,"sources":["Redux/Store/DraftExpedition/Name/index.ts","Redux/Store/DraftExpedition/BigPocketVariantConfig/index.ts","Redux/Store/DraftExpedition/SequenceConfig/DraftRewardConfig/index.ts","Redux/Store/DraftExpedition/SequenceConfig/DraftRewardSupplyCard/index.ts","Redux/Store/DraftExpedition/SequenceConfig/DraftBranch/index.ts","Redux/Store/DraftExpedition/SequenceConfig/Branches/index.ts","Redux/Store/DraftExpedition/SequenceConfig/index.ts","Redux/Store/DraftExpedition/index.ts","Redux/Store/index.ts","serviceWorker.ts","GlobalStyle.ts","themes/main/index.ts","components/atoms/H1.tsx","components/organisms/Accordion/__styled__/Wrapper.tsx","components/organisms/Accordion/__styled__/Header.tsx","components/atoms/Button.tsx","components/organisms/Accordion/__styled__/Summary.tsx","components/organisms/Accordion/__styled__/Content.tsx","components/organisms/Accordion/__styled__/SummaryIcon.tsx","components/organisms/Accordion/index.tsx","components/atoms/ScreenReaderOnlyText.tsx","components/molecules/Fieldset/__styled__/Wrapper.tsx","components/molecules/Fieldset/__styled__/Legend.tsx","components/molecules/Fieldset/index.tsx","components/atoms/Label.tsx","components/atoms/Input.tsx","components/molecules/FormGroupInputText/__styled__/Wrapper.tsx","components/molecules/FormGroupInputText/index.tsx","components/molecules/FormGroupCheckbox/__styled__/Wrapper.tsx","components/molecules/FormGroupCheckbox/index.tsx","components/templates/BasicInformation/index.tsx","components/organisms/Modal/Wrapper.tsx","components/organisms/Modal/Backdrop.tsx","components/organisms/Modal/Content.tsx","components/organisms/Modal/Header.tsx","components/organisms/Modal/Body.tsx","components/atoms/H2.tsx","components/organisms/Modal/Title.tsx","components/organisms/Modal/CloseButton.tsx","components/organisms/Modal/Footer.tsx","components/organisms/Modal/index.tsx","components/atoms/ModalBodyWrapper.tsx","components/atoms/ModalFooterWrapper.tsx","hooks/useModal.tsx","components/organisms/Prompt/index.tsx","components/atoms/Select.tsx","components/molecules/FormGroupSelect/__styled__/Wrapper.tsx","components/molecules/FormGroupSelect/index.tsx","components/templates/Branches/AddBranchModal/BaseBranch/index.tsx","components/atoms/Textarea.tsx","components/molecules/FormGroupTextarea/__styled__/Wrapper.tsx","components/molecules/FormGroupTextarea/index.tsx","components/templates/Branches/AddBranchModal/NarrativeBranch/index.tsx","components/templates/Branches/AddBranchModal/RewardBranch/Treasures/index.tsx","components/templates/Branches/AddBranchModal/RewardBranch/Mages/index.tsx","components/molecules/FormGroupInputNumber/__styled__/Wrapper.tsx","components/molecules/FormGroupInputNumber/index.tsx","components/molecules/SupplyCardBlueprint/index.tsx","components/templates/Branches/AddBranchModal/RewardBranch/Supply/index.tsx","components/templates/Branches/AddBranchModal/RewardBranch/index.tsx","components/templates/Branches/AddBranchModal/BattleBranch/RewardConfig/Treasures/index.tsx","components/templates/Branches/AddBranchModal/BattleBranch/RewardConfig/Mages/index.tsx","components/templates/Branches/AddBranchModal/BattleBranch/RewardConfig/Supply/index.tsx","components/templates/Branches/AddBranchModal/BattleBranch/RewardConfig/index.tsx","components/templates/Branches/AddBranchModal/BattleBranch/index.tsx","components/templates/Branches/AddBranchModal/Body.tsx","components/templates/Branches/AddBranchModal/Footer.tsx","components/templates/Branches/AddBranchModal/index.tsx","components/templates/Branches/index.tsx","helpers/copyToClipboard.ts","helpers/saveToFile.ts","components/molecules/Preview/__styled__/Wrapper.tsx","components/molecules/Preview/__styled__/Pre.tsx","components/molecules/Preview/index.tsx","components/molecules/Configurator/__styled__/Wrapper.tsx","components/molecules/Configurator/__styled__/Form.tsx","components/molecules/Configurator/index.tsx","components/App/__styled__/Wrapper.tsx","components/App/MainApp.tsx","components/App/index.tsx","index.tsx","Redux/configureStore.ts"],"names":["ActionTypes","actions","noOp","createAction","setExpeditionName","name","SET_EXPEDITION_NAME","selectors","getExpeditionName","state","DraftExpedition","Name","setBigPocketVariantConfig","value","SET_BIG_POCKET_VARIANT_CONFIG","getBigPocketVariantConfig","BigPocketVariantConfig","initialState","draftAddRewardConfig","type","DRAFT_ADD_REWARD_CONFIG","draftEditRewardConfig","config","DRAFT_EDIT_REWARD_CONFIG","draftDeleteRewardConfig","DRAFT_DELETE_REWARD_CONFIG","clearDraftRewardConfig","CLEAR_DRAFT_REWARD_CONFIG","getDraftRewardConfigState","SequenceConfig","DraftRewardConfig","getDraftRewardConfigIds","createSelector","configs","Object","keys","getDraftRewardConfigArray","values","draftAddRewardSupplyCard","DRAFT_ADD_REWARD_SUPPLY_CARD","draftAddBattleRewardSupplyCard","configId","DRAFT_ADD_BATTLE_REWARD_SUPPLY_CARD","draftEditRewardSupplyCard","blueprint","DRAFT_EDIT_REWARD_SUPPLY_CARD","draftDeleteRewardSupplyCard","DRAFT_DELETE_REWARD_SUPPLY_CARD","clearDraftRewardSupplyCard","CLEAR_DRAFT_REWARD_SUPPLY_CARD","getDraftRewardSupplyCardState","DraftRewardSupplyCard","getDraftRewardSupplyCardIds","blueprints","getDraftRewardSupplyCardArray","_id","id","draftAddBranch","DRAFT_ADD_BRANCH","draftEditBranch","branch","DRAFT_EDIT_BRANCH","updateDraftBranch","UPDATE_DRAFT_BRANCH","clearDraftBranch","CLEAR_DRAFT_BRANCH","getDraftBranchState","DraftBranch","addBranch","ADD_BRANCH","getBranchesState","Branches","getBranchIds","branches","getBranches","Reducer","combineReducers","action","shortid","generate","payload","rewardType","newConfigs","filter","newState","reduce","operation","newBlueprints","text","decisions","treasure","mage","supply","ids","tier1","tier2","tier3","randomAmount","bigPocket","tier","nemesisId","newUBNCards","specialRules","onLoss","lossRewards","winRewards","RootReducer","reduceReducers","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","mainTheme","colors","H1","styled","Wrapper","Header","Button","Summary","Content","SummaryIcon","React","memo","title","open","children","useState","isOpen","setIsOpen","aria-expanded","aria-controls","onClick","className","role","aria-labelledby","hidden","ScreenReaderOnlyText","Legend","legend","legendVisible","Label","Input","label","labelHidden","onChange","defaultValue","required","htmlFor","defaultChecked","mapDispatchToProps","connect","expeditionName","bigPocketVariantConfig","event","target","currentTarget","checked","Backdrop","Body","props","hasFooter","H2","Title","themeColor","rest","CloseButton","Footer","titleColor","titleLabel","closeModal","footer","domEl","document","getElementById","ReactDOM","createPortal","Fragment","variant","ModalBodyWrapper","ModalFooterWrapper","useModal","yesHandler","noHandler","isVisible","setIsVisible","hide","show","RenderModal","closeCallback","Select","ReactSelect","options","isMulti","classNamePrefix","draftBranch","branchTypeOptions","branchTypeDefaultValue","find","option","FormGroupSelect","selectOption","Textarea","split","map","decision","treasureOptions","DATA","normalizedData","ENG","treasures","level","selectOptions","selectedTreasureIds","parseInt","mageOptions","mages","selectedMageIds","SupplyCardBlueprint","handleChange","handleDelete","cardTypeOptions","cardTypeDefaultValue","cardOperationOptions","cardOperationDefaultValue","threshold","costValues","addSupplyCard","editSupplyCard","deleteSupplyCard","supplyOptions","cards","handleEditSupplyCard","handleDeleteSupplyCard","selectedSupplyIds","key","renderSupplyBlueprints","handleRewardTypeChange","updateDraftRewardConfig","assign","undefined","addRewardConfig","editRewardConfig","deleteRewardConfig","rewardConfigs","useEffect","hasTreasure","nemesisOptions","nemeses","nemesis","upgradedBasicNemesisCardsOptions","upgradedBasicNemesisCards","upgradedBasicNemesisCard","treasureLevelOptions","treasureLevelDefaultValue","toString","winConfigs","lossConfigs","handleBattleTierChange","handleNewUBNCardsTypeChange","handleAddRewardConfig","handleEditRewardConfig","handleDeleteRewardConfig","renderRewardConfigs","selectedUBNCardIds","addRandom","length","renderBranch","clearDraftRewardSupplyCards","draftRewardConfigs","draftRewardSupplyCards","modal","newBranch","card","reward","addBranchModal","style","display","narrativeBranch","rewardBranch","battleBranch","copyToClipboard","json","navigator","clipboard","writeText","saveToFile","blob","Blob","saveAs","Pre","fileName","data","sequenceConfig","randomTreasuresTier1","Array","fill","random","randomTreasuresTier2","randomTreasuresTier3","randomMageAmount","hasOwnProperty","winRewardTreasure","winRewardMage","winRewardSupply","winRewardTreasureIds","winRewardRandomTreasuresTier1","winRewardRandomTreasuresTier2","winRewardRandomTreasuresTier3","winRewardMageIds","winRewardRandomMageAmount","winRewardSupplyIds","winRewardSupplyBlueprints","winRewardSupplyBigPocket","lossReward","lossRewardTreasure","lossRewardMage","lossRewardSupply","lossRewardTreasureIds","lossRewardRandomTreasuresTier1","lossRewardRandomTreasuresTier2","lossRewardRandomTreasuresTier3","lossRewardMageIds","lossRewardRandomMageAmount","lossRewardSupplyIds","lossRewardSupplyBlueprints","lossRewardSupplyBigPocket","JSON","stringify","Form","MainApp","App","theme","store","enhancers","applyMiddleware","install","composeEnhancers","compose","enhancedCreateStore","createStore","configureStore","render","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0f479009.chunk.js","sourcesContent":["import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer } from 'redux-loop'\n\n///////////\n// STATE //\n///////////\n\nexport type State = string\nexport const initialState: State = \"\"\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  SET_EXPEDITION_NAME = 'DraftExpedition/Name/SET_EXPEDITION_NAME',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  setExpeditionName: (name: string) =>\n    createAction(ActionTypes.SET_EXPEDITION_NAME, name),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.SET_EXPEDITION_NAME: {\n      return action.payload\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport type NameStateSlice = {\n  DraftExpedition: {\n    Name: State\n  }\n}\n\nconst getExpeditionName = (state: NameStateSlice) => state.DraftExpedition.Name\n\nexport const selectors = {\n  getExpeditionName,\n}\n","import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer } from 'redux-loop'\n\n///////////\n// STATE //\n///////////\n\nexport type State = boolean\nexport const initialState: State = false\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  SET_BIG_POCKET_VARIANT_CONFIG = 'DraftExpedition/BigPocketVariantConfig/SET_BIG_POCKET_VARIANT_CONFIG',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  setBigPocketVariantConfig: (value: boolean) =>\n    createAction(ActionTypes.SET_BIG_POCKET_VARIANT_CONFIG, value),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.SET_BIG_POCKET_VARIANT_CONFIG: {\n      return action.payload\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport type BigPocketVariantConfigStateSlice = {\n  DraftExpedition: {\n    BigPocketVariantConfig: State\n  }\n}\n\nconst getBigPocketVariantConfig = (state: BigPocketVariantConfigStateSlice) => state.DraftExpedition.BigPocketVariantConfig\n\nexport const selectors = {\n  getBigPocketVariantConfig,\n}\n","import { LoopReducer } from 'redux-loop'\nimport { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { createSelector } from 'reselect'\nimport shortid from 'shortid'\n\nimport * as types from 'types'\n\n///////////\n// STATE //\n///////////\n\nexport type State = {\n  [id: string]: types.BattleRewardConfig\n}\n\nexport const initialState: State = {}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  DRAFT_ADD_REWARD_CONFIG = 'DraftExpedition/SequenceConfig/DraftRewardConfig/DRAFT_ADD_REWARD_CONFIG',\n  DRAFT_EDIT_REWARD_CONFIG = 'DraftExpedition/SequenceConfig/DraftRewardConfig/DRAFT_EDIT_REWARD_CONFIG',\n  DRAFT_DELETE_REWARD_CONFIG = 'DraftExpedition/SequenceConfig/DraftRewardConfig/DRAFT_DELETE_REWARD_CONFIG',\n  CLEAR_DRAFT_REWARD_CONFIG = 'DraftExpedition/SequenceConfig/DraftRewardConfig/CLEAR_DRAFT_REWARD_CONFIG',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  draftAddRewardConfig: (type: types.BattleRewardConfigType) =>\n    createAction(ActionTypes.DRAFT_ADD_REWARD_CONFIG, type),\n  draftEditRewardConfig: (config: types.BattleRewardConfig) =>\n    createAction(ActionTypes.DRAFT_EDIT_REWARD_CONFIG, config),\n  draftDeleteRewardConfig: (config: types.BattleRewardConfig) =>\n    createAction(ActionTypes.DRAFT_DELETE_REWARD_CONFIG, config),\n  clearDraftRewardConfig: () =>\n    createAction(ActionTypes.CLEAR_DRAFT_REWARD_CONFIG),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.DRAFT_ADD_REWARD_CONFIG: {\n      const id = shortid.generate()\n\n      return {\n        [id]: {\n          _id: id,\n          type: action.payload,\n          rewardType: 'regular',\n        },\n        ...state,\n      }\n    }\n\n    case ActionTypes.DRAFT_EDIT_REWARD_CONFIG: {\n      const { _id } = action.payload\n\n      return {\n        ...state,\n        [_id]: action.payload,\n      }\n    }\n\n    case ActionTypes.DRAFT_DELETE_REWARD_CONFIG: {\n      const { _id } = action.payload\n      const configs = Object.values(state)\n\n      const newConfigs = configs.filter(\n        (config: types.BattleRewardConfig) => config._id !== _id\n      )\n\n      const newState = newConfigs.reduce(\n        (configs: State, config: types.BattleRewardConfig) => {\n          return {\n            ...configs,\n            [config._id]: config,\n          }\n        },\n        {}\n      )\n\n      return newState\n    }\n\n    case ActionTypes.CLEAR_DRAFT_REWARD_CONFIG: {\n      return initialState\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport type DraftRewardConfigStateSlice = {\n  DraftExpedition: {\n    SequenceConfig: {\n      DraftRewardConfig: State\n    }\n  }\n}\n\nconst getDraftRewardConfigState = (state: DraftRewardConfigStateSlice) =>\n  state.DraftExpedition.SequenceConfig.DraftRewardConfig\n\nconst getDraftRewardConfigIds = createSelector(\n  [getDraftRewardConfigState],\n  (configs) => Object.keys(configs)\n)\n\nconst getDraftRewardConfigArray = createSelector(\n  [getDraftRewardConfigState],\n  (configs) => Object.values(configs)\n)\n\nexport const selectors = {\n  getDraftRewardConfigState,\n  getDraftRewardConfigIds,\n  getDraftRewardConfigArray,\n}\n","import { LoopReducer } from 'redux-loop'\nimport { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { createSelector } from 'reselect'\nimport shortid from 'shortid'\n\nimport * as types from 'types'\n\n///////////\n// STATE //\n///////////\n\nexport type State = {\n  [id: string]: types.Blueprint\n}\n\nexport const initialState: State = {}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  DRAFT_ADD_REWARD_SUPPLY_CARD = 'DraftExpedition/SequenceConfig/DraftRewardSupplyCard/DRAFT_ADD_REWARD_SUPPLY_CARD',\n  DRAFT_ADD_BATTLE_REWARD_SUPPLY_CARD = 'DraftExpedition/SequenceConfig/DraftRewardSupplyCard/DRAFT_ADD_BATTLE_REWARD_SUPPLY_CARD',\n  DRAFT_EDIT_REWARD_SUPPLY_CARD = 'DraftExpedition/SequenceConfig/DraftRewardSupplyCard/DRAFT_EDIT_REWARD_SUPPLY_CARD',\n  DRAFT_DELETE_REWARD_SUPPLY_CARD = 'DraftExpedition/SequenceConfig/DraftRewardSupplyCard/DRAFT_DELETE_REWARD_SUPPLY_CARD',\n  CLEAR_DRAFT_REWARD_SUPPLY_CARD = 'DraftExpedition/SequenceConfig/DraftRewardSupplyCard/CLEAR_DRAFT_REWARD_SUPPLY_CARD',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  draftAddRewardSupplyCard: () =>\n    createAction(ActionTypes.DRAFT_ADD_REWARD_SUPPLY_CARD),\n  draftAddBattleRewardSupplyCard: (configId: string) =>\n    createAction(ActionTypes.DRAFT_ADD_BATTLE_REWARD_SUPPLY_CARD, configId),\n  draftEditRewardSupplyCard: (blueprint: types.Blueprint) =>\n    createAction(ActionTypes.DRAFT_EDIT_REWARD_SUPPLY_CARD, blueprint),\n  draftDeleteRewardSupplyCard: (blueprint: types.Blueprint) =>\n    createAction(ActionTypes.DRAFT_DELETE_REWARD_SUPPLY_CARD, blueprint),\n  clearDraftRewardSupplyCard: () =>\n    createAction(ActionTypes.CLEAR_DRAFT_REWARD_SUPPLY_CARD),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.DRAFT_ADD_REWARD_SUPPLY_CARD: {\n      const id = shortid.generate()\n\n      return {\n        [id]: {\n          _id: id,\n          type: 'Gem',\n          operation: 'ANY',\n        },\n        ...state,\n      }\n    }\n\n    case ActionTypes.DRAFT_ADD_BATTLE_REWARD_SUPPLY_CARD: {\n      const id = shortid.generate()\n\n      return {\n        [id]: {\n          _id: id,\n          configId: action.payload,\n          type: 'Gem',\n          operation: 'ANY',\n        },\n        ...state,\n      }\n    }\n\n    case ActionTypes.DRAFT_EDIT_REWARD_SUPPLY_CARD: {\n      const { _id } = action.payload\n\n      return {\n        ...state,\n        [_id]: action.payload,\n      }\n    }\n\n    case ActionTypes.DRAFT_DELETE_REWARD_SUPPLY_CARD: {\n      const { _id } = action.payload\n      const blueprints = Object.values(state)\n\n      const newBlueprints = blueprints.filter(\n        (blueprint: types.Blueprint) => blueprint._id !== _id\n      )\n\n      const newState = newBlueprints.reduce(\n        (blueprints: State, blueprint: types.Blueprint) => {\n          return {\n            ...blueprints,\n            [blueprint._id]: blueprint,\n          }\n        },\n        {}\n      )\n\n      return newState\n    }\n\n    case ActionTypes.CLEAR_DRAFT_REWARD_SUPPLY_CARD: {\n      return initialState\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport type DraftRewardSupplyCardStateSlice = {\n  DraftExpedition: {\n    SequenceConfig: {\n      DraftRewardSupplyCard: State\n    }\n  }\n}\n\nconst getDraftRewardSupplyCardState = (\n  state: DraftRewardSupplyCardStateSlice\n) => state.DraftExpedition.SequenceConfig.DraftRewardSupplyCard\n\nconst getDraftRewardSupplyCardIds = createSelector(\n  [getDraftRewardSupplyCardState],\n  (blueprints) => Object.keys(blueprints)\n)\n\nconst getDraftRewardSupplyCardArray = createSelector(\n  [getDraftRewardSupplyCardState],\n  (blueprints) => Object.values(blueprints)\n)\n\nexport const selectors = {\n  getDraftRewardSupplyCardState,\n  getDraftRewardSupplyCardIds,\n  getDraftRewardSupplyCardArray,\n}\n","import { LoopReducer } from 'redux-loop'\nimport { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\n\nimport * as types from 'types'\nimport shortid from 'shortid'\n\n///////////\n// STATE //\n///////////\n\nexport type State = types.BranchBase | types.NarrativeBranch\nexport const initialState: State = {\n  _id: '',\n  id: '',\n  type: 'narrative',\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  DRAFT_ADD_BRANCH = 'DraftExpedition/SequenceConfig/DraftBranch/DRAFT_ADD_BRANCH',\n  DRAFT_EDIT_BRANCH = 'DraftExpedition/SequenceConfig/DraftBranch/DRAFT_EDIT_BRANCH',\n  CLEAR_DRAFT_BRANCH = 'DraftExpedition/SequenceConfig/DraftBranch/CLEAR_DRAFT_BRANCH',\n  UPDATE_DRAFT_BRANCH = 'DraftExpedition/SequenceConfig/DraftBranch/UPDATE_DRAFT_BRANCH',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  draftAddBranch: () =>\n    createAction(ActionTypes.DRAFT_ADD_BRANCH),\n  draftEditBranch: (branch: types.BranchBase | types.Branch) =>\n    createAction(ActionTypes.DRAFT_EDIT_BRANCH, branch),\n  updateDraftBranch: (branch: types.BranchBase | types.Branch) =>\n    createAction(ActionTypes.UPDATE_DRAFT_BRANCH, branch),\n  clearDraftBranch: () =>\n    createAction(ActionTypes.CLEAR_DRAFT_BRANCH),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.DRAFT_ADD_BRANCH: {\n      return {\n        ...state,\n        _id: shortid.generate()\n      }\n    }\n\n    case ActionTypes.DRAFT_EDIT_BRANCH: {\n      return action.payload\n    }\n\n    case ActionTypes.UPDATE_DRAFT_BRANCH: {\n      return action.payload\n    }\n\n    case ActionTypes.CLEAR_DRAFT_BRANCH: {\n      return initialState\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport type DraftBranchStateSlice = {\n  DraftExpedition: {\n    SequenceConfig: {\n      DraftBranch: State\n    }\n  }\n}\n\nconst getDraftBranchState = (state: DraftBranchStateSlice) => state.DraftExpedition.SequenceConfig.DraftBranch\n\nexport const selectors = {\n  getDraftBranchState\n}","import { createSelector } from 'reselect'\nimport { LoopReducer } from 'redux-loop'\nimport { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\n\nimport * as types from 'types'\n\n///////////\n// STATE //\n///////////\n\nexport type State = types.Branches | {}\nexport const initialState: State = {}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  ADD_BRANCH = 'DraftExpedition/SequenceConfig/Branches/ADD_BRANCH',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  addBranch: (\n    branch: types.NarrativeBranch | types.RewardBranch | types.BattleBranch\n  ) => createAction(ActionTypes.ADD_BRANCH, branch),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.ADD_BRANCH: {\n      const { _id, id, type } = action.payload\n\n      switch (type) {\n        case 'narrative': {\n          const { text, decisions } = action.payload as types.NarrativeBranch\n\n          return {\n            ...state,\n            [_id]: {\n              _id,\n              id: id ? id : _id,\n              type,\n              text: text ? text : '',\n              decisions: decisions ? [...decisions] : false,\n            },\n          }\n        }\n\n        case 'reward': {\n          const {\n            rewardType,\n            treasure,\n            mage,\n            supply,\n          } = action.payload as types.RewardBranch\n\n          return {\n            ...state,\n            [_id]: {\n              _id,\n              id: id ? id : _id,\n              type,\n              rewardType: rewardType ? rewardType : 'regular',\n              treasure: {\n                ids: treasure?.ids ?? [],\n                tier1: treasure?.tier1 ?? 0,\n                tier2: treasure?.tier2 ?? 0,\n                tier3: treasure?.tier3 ?? 0,\n              },\n              mage: {\n                ids: mage?.ids ?? [],\n                randomAmount: mage?.randomAmount ?? 0,\n              },\n              supply: {\n                ids: supply?.ids ? supply.ids : [],\n                blueprints: supply?.blueprints ?? [],\n                bigPocket: supply?.bigPocket,\n              },\n            },\n          }\n        }\n\n        case 'battle': {\n          const {\n            tier,\n            nemesisId,\n            newUBNCards,\n            treasure,\n            specialRules,\n            onLoss,\n            lossRewards,\n            winRewards,\n          } = action.payload as types.BattleBranch\n\n          return {\n            ...state,\n            [_id]: {\n              _id,\n              id: id ? id : _id,\n              tier,\n              type,\n              nemesisId: nemesisId ?? '',\n              newUBNCards,\n              treasure,\n              specialRules,\n              onLoss: onLoss && 'skip',\n              lossRewards: lossRewards,\n              winRewards: winRewards,\n            },\n          }\n        }\n\n        default: {\n          return {\n            ...state,\n            [_id]: {\n              _id,\n              id,\n              type,\n            },\n          }\n        }\n      }\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport type BranchesStateSlice = {\n  DraftExpedition: {\n    SequenceConfig: {\n      Branches: State\n    }\n  }\n}\n\nconst getBranchesState = (state: BranchesStateSlice) =>\n  state.DraftExpedition.SequenceConfig.Branches\n\nconst getBranchIds = createSelector([getBranchesState], (branches) =>\n  Object.keys(branches)\n)\n\nconst getBranches = createSelector([getBranchesState], (branches) =>\n  Object.values(branches)\n)\n\nexport const selectors = {\n  getBranchesState,\n  getBranchIds,\n  getBranches,\n}\n","import { combineReducers } from 'redux-loop'\n\nimport * as DraftRewardConfig from './DraftRewardConfig'\nimport * as DraftRewardSupplyCard from './DraftRewardSupplyCard'\nimport * as DraftBranch from './DraftBranch'\nimport * as Branches from './Branches'\n\n///////////\n// STATE //\n///////////\n\nexport type State = {\n  DraftRewardConfig: DraftRewardConfig.State\n  DraftRewardSupplyCard: DraftRewardSupplyCard.State\n  DraftBranch: DraftBranch.State\n  Branches: Branches.State\n}\n\nexport const initialState = {\n  DraftRewardConfig: DraftRewardConfig.initialState,\n  DraftRewardSupplyCard: DraftRewardSupplyCard.initialState,\n  DraftBranch: DraftBranch.initialState,\n  Branches: Branches.initialState,\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport const actions = {\n  DraftRewardConfig: DraftRewardConfig.actions,\n  DraftRewardSupplyCard: DraftRewardSupplyCard.actions,\n  DraftBranch: DraftBranch.actions,\n  Branches: Branches.actions,\n}\n\nexport type Action =\n  | DraftRewardConfig.Action\n  | DraftRewardSupplyCard.Action\n  | DraftBranch.Action\n  | Branches.Action\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer = combineReducers({\n  DraftRewardConfig: DraftRewardConfig.Reducer,\n  DraftRewardSupplyCard: DraftRewardSupplyCard.Reducer,\n  DraftBranch: DraftBranch.Reducer,\n  Branches: Branches.Reducer,\n})\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport const selectors = {\n  DraftRewardConfig: DraftRewardConfig.selectors,\n  DraftRewardSupplyCard: DraftRewardSupplyCard.selectors,\n  DraftBranch: DraftBranch.selectors,\n  Branches: Branches.selectors,\n}\n","import { combineReducers } from 'redux-loop'\n\nimport * as Name from './Name'\nimport * as BigPocketVariantConfig from './BigPocketVariantConfig'\nimport * as SequenceConfig from './SequenceConfig'\n\n///////////\n// STATE //\n///////////\n\nexport type State = {\n  Name: Name.State\n  BigPocketVariantConfig: BigPocketVariantConfig.State\n  SequenceConfig: SequenceConfig.State\n}\n\nexport const initialState = {\n  Name: Name.initialState,\n  BigPocketVariantConfig: BigPocketVariantConfig.initialState,\n  SequenceConfig: SequenceConfig.initialState,\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport const actions = {\n  Name: Name.actions,\n  BigPocketVariantConfig: BigPocketVariantConfig.actions,\n  SequenceConfig: SequenceConfig.actions,\n}\n\nexport type Action =\n  | Name.Action\n  | BigPocketVariantConfig.Action\n  | SequenceConfig.Action\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer = combineReducers({\n  Name: Name.Reducer,\n  BigPocketVariantConfig: BigPocketVariantConfig.Reducer,\n  SequenceConfig: SequenceConfig.Reducer,\n})\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport const selectors = {\n  Name: Name.selectors,\n  BigPocketVariantConfig: BigPocketVariantConfig.selectors,\n  SequenceConfig: SequenceConfig.selectors,\n}\n","import { combineReducers, reduceReducers } from 'redux-loop'\n\nimport * as DraftExpedition from 'Redux/Store/DraftExpedition'\n\nexport type RootState = {\n  DraftExpedition: DraftExpedition.State\n}\n\nexport const initialState = {\n  DraftExpedition: DraftExpedition.initialState\n}\n\nexport const actions = {\n  DraftExpedition: DraftExpedition.actions,\n}\n\nexport type RootAction =\n  | DraftExpedition.Action\n\nexport const RootReducer = reduceReducers(\n  combineReducers<RootState>({\n    DraftExpedition: DraftExpedition.Reducer,\n  })\n)\n\nexport const selectors = {\n  DraftExpedition: DraftExpedition.selectors\n}\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createGlobalStyle } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle`\n  *,\n  ::after, \n  ::before {\n    box-sizing: border-box;\n  }\n\n  body {\n    font-family: 'Roboto', Arial, sans-serif;\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-font-smoothing: antialiased;\n    text-rendering: optimizeLegibility;\n    margin: 0;\n    padding: 0;\n  }\n`\nexport default GlobalStyle\n","const mainTheme = {\n  colors: {}\n}\n\nexport default mainTheme\n","\n\nimport styled from 'styled-components/macro'\n\nconst H1 = styled('h1')`\n  color: #2196f3;\n  margin-top: 0;\n`\n\nexport default H1\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  margin-bottom: 16px;\n`\n\nexport default Wrapper\n","import styled from 'styled-components/macro'\n\nconst Header = styled('h3')`\n  border-bottom: 1px solid #dadada;\n  margin: 0;\n`\n\nexport default Header\n","import styled from 'styled-components/macro'\n\nconst Button = styled('button')`\n  height: 32px;\n  padding: 0 8px;\n  cursor: pointer;\n  font-family: 'Roboto';\n`\n\nexport default Button\n","import styled from 'styled-components/macro'\n\nimport Button from 'components/atoms/Button'\n\nconst Summary = styled(Button)`\n  height: auto;\n  font-size: 1.5rem;\n  font-weight: 100;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0;\n  position: relative;\n  outline: 0;\n  border: none;\n  background: transparent;\n`\n\nexport default Summary\n","import styled from 'styled-components/macro'\n\nconst Content = styled('div')`\n  padding-top: 16px;\n`\n\nexport default Content\n","import styled from 'styled-components/macro'\n\nconst SummaryIcon = styled('span')`\n  position: absolute;\n  right: 8px;\n`\n\nexport default SummaryIcon\n","import React, { useState } from 'react'\n\nimport Wrapper from './__styled__/Wrapper'\nimport Header from './__styled__/Header'\nimport Summary from './__styled__/Summary'\nimport Content from './__styled__/Content'\nimport SummaryIcon from './__styled__/SummaryIcon'\n\ntype Props = {\n  id: string\n  title: string\n  open?: boolean\n  children: React.ReactNode\n}\n\nconst Accordion = ({\n  id,\n  title,\n  open,\n  children\n}: Props) => {\n  const [isOpen, setIsOpen] = useState<boolean>(open ? open : false)\n\n  const handleClick = () => {\n    setIsOpen(!isOpen)\n  }\n\n  return (\n    <Wrapper>\n      <Header>\n        <Summary\n          id={`${id}Summary`}\n          type=\"button\"\n          aria-expanded={isOpen ? 'true' : 'false'}\n          aria-controls={`${id}Content`}\n          onClick={handleClick}\n        >\n          {title}\n          <SummaryIcon className=\"material-icons\">\n            {isOpen ? 'expand_less' : 'expand_more'}\n          </SummaryIcon>\n        </Summary>\n      </Header>\n      <Content\n        id={`${id}Content`}\n        role=\"region\"\n        aria-labelledby={`${id}Summary`}\n        hidden={isOpen ? false : true}\n      >\n        { children }\n      </Content>\n    </Wrapper>\n  )\n}\n\nexport default React.memo(Accordion)\n","import styled from 'styled-components/macro'\n\nconst ScreenReaderOnlyText = styled('span')`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: 0;\n`\n\nexport default ScreenReaderOnlyText\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('fieldset')`\n  padding: 0;\n  border: none;\n`\n\nexport default Wrapper\n","import styled from 'styled-components/macro'\n\nconst Legend = styled('legend')`\n  padding: 0;\n`\n\nexport default Legend\n","import React from 'react'\n\nimport ScreenReaderOnlyText from 'components/atoms/ScreenReaderOnlyText'\nimport Wrapper from './__styled__/Wrapper'\nimport Legend from './__styled__/Legend'\n\ntype Props = {\n  legend: string\n  legendVisible?: boolean\n  children: React.ReactNode\n}\n\nconst Fieldset = ({\n  legend,\n  legendVisible,\n  children,\n}: Props) => {\n  return (\n    <Wrapper>\n      <Legend>\n        {\n          legendVisible \n            ? (legend) \n            : (<ScreenReaderOnlyText>{legend}</ScreenReaderOnlyText>)\n        }\n      </Legend>\n      {children}\n    </Wrapper>\n  )\n}\n\nexport default React.memo(Fieldset)\n","import styled from 'styled-components/macro'\n\nconst Label = styled('label')`\n  display: block;\n  font-family: 'Roboto';\n  font-size: 12px;\n  margin-bottom: 4px;\n`\n\nexport default Label\n","import styled from 'styled-components/macro'\n\nconst Input = styled('input')`\n  height: 32px;\n  width: 100%;\n  padding: 0 8px;\n  font-family: 'Roboto';\n  border: 1px solid #dadada;\n`\n\nexport default Input\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  margin-bottom: 16px;\n`\n\nexport default Wrapper\n","import React from 'react'\n\nimport ScreenReaderOnlyText from 'components/atoms/ScreenReaderOnlyText'\nimport Label from 'components/atoms/Label'\nimport Input from 'components/atoms/Input'\nimport Wrapper from './__styled__/Wrapper'\n\ntype Props = {\n  id: string\n  label: string\n  labelHidden?: boolean\n  name?: string\n  onChange: (event: any) => void\n  defaultValue?: any\n  required?: boolean\n}\n\nconst FormGroupInputText = ({\n  id,\n  label,\n  labelHidden,\n  name,\n  onChange,\n  defaultValue,\n  required,\n}: Props) => {\n  return (\n    <Wrapper>\n      <Label htmlFor={id}>\n        {labelHidden ? (\n          <ScreenReaderOnlyText>{label}</ScreenReaderOnlyText>\n        ) : (\n          label\n        )}\n      </Label>\n      <Input\n        id={id}\n        name={name ? name : id}\n        type=\"text\"\n        onChange={onChange}\n        defaultValue={defaultValue}\n        required={required}\n      />\n    </Wrapper>\n  )\n}\n\nexport default React.memo(FormGroupInputText)\n","import styled from 'styled-components/macro'\n\nimport Label from 'components/atoms/Label'\n\nconst Wrapper = styled('div')`\n  margin-bottom: 16px;\n\n  ${Label} {\n    font-size: 16px;\n    margin-bottom: 0;\n  }\n\n  input {\n    margin: 0 8px 0 0;\n  }\n`\n\nexport default Wrapper\n","import React from 'react'\n\nimport ScreenReaderOnlyText from 'components/atoms/ScreenReaderOnlyText'\nimport Label from 'components/atoms/Label'\nimport Wrapper from './__styled__/Wrapper'\n\ntype Props = {\n  id: string\n  label: string\n  labelHidden?: boolean\n  name?: string\n  onChange: (event: any) => void\n  defaultChecked: boolean\n}\n\nconst FormGroupCheckbox = ({\n  id,\n  label,\n  labelHidden,\n  name,\n  onChange,\n  defaultChecked,\n}: Props) => {\n  return (\n    <Wrapper>\n      <Label htmlFor={id}>\n        <input\n          id={id}\n          type=\"checkbox\"\n          name={name ? name : id}\n          onChange={onChange}\n          defaultChecked={defaultChecked}\n        />\n        {labelHidden ? (\n          <ScreenReaderOnlyText>{label}</ScreenReaderOnlyText>\n        ) : (\n          label\n        )}\n      </Label>\n    </Wrapper>\n  )\n}\n\nexport default React.memo(FormGroupCheckbox)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { RootState, selectors, actions } from 'Redux/Store'\n\nimport Accordion from 'components/organisms/Accordion'\nimport Fieldset from 'components/molecules/Fieldset'\nimport FormGroupInputText from 'components/molecules/FormGroupInputText'\nimport FormGroupCheckbox from 'components/molecules/FormGroupCheckbox'\n\nconst mapStateToProps = (state: RootState) => ({\n  expeditionName: selectors.DraftExpedition.Name.getExpeditionName(state),\n  bigPocketVariantConfig: selectors.DraftExpedition.BigPocketVariantConfig.getBigPocketVariantConfig(\n    state\n  ),\n})\n\nconst mapDispatchToProps = {\n  setExpeditionName: actions.DraftExpedition.Name.setExpeditionName,\n  setBigPocketVariantConfig:\n    actions.DraftExpedition.BigPocketVariantConfig.setBigPocketVariantConfig,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps & {}\n\nconst BasicInformation = ({\n  expeditionName,\n  bigPocketVariantConfig,\n  setExpeditionName,\n  setBigPocketVariantConfig,\n}: Props) => {\n\n  const handleNameChange = (event: any) => {\n    setExpeditionName(event.target.value)\n  }\n\n  const handleBigPocketChange = (event: any) => {\n    setBigPocketVariantConfig(event.currentTarget.checked)\n  }\n\n  return (\n    <Accordion id=\"basicInformation\" title=\"Basic Information\" open>\n      <Fieldset legend=\"Basic Information\">\n        <FormGroupInputText\n          id=\"expeditionName\"\n          label=\"Expedition Name\"\n          onChange={handleNameChange}\n          defaultValue={expeditionName}\n        />\n        <FormGroupCheckbox\n          id=\"bigPocketVariantConfig\"\n          label=\"Big Pocket Mode\"\n          onChange={handleBigPocketChange}\n          defaultChecked={bigPocketVariantConfig}\n        />\n      </Fieldset>\n    </Accordion>\n  )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BasicInformation)\n","import styled from 'styled-components'\n\nconst Wrapper = styled('div')`\n  height: 100%;\n  width: 100%;\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 10000;\n  padding: 24px;\n`\n\nexport default Wrapper\n","import styled from 'styled-components'\n\nconst Backdrop = styled('div')`\n  position: fixed;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  background: rgb(0, 0, 0, 0.3);\n`\n\nexport default Backdrop\n","import styled from 'styled-components'\n\nconst Content = styled('div')`\n  margin: auto;\n  height: 100%;\n  width: 100%;\n  background: #fff;\n  box-shadow: 0 0 10px 2px rgba(0, 0, 0, 0.2);\n  border-radius: 8px;\n  position: relative;\n`\n\nexport default Content\n","import styled from 'styled-components'\n\nconst Header = styled('div')`\n  margin: auto;\n  height: 64px;\n  width: 100%;\n  padding: 0 24px;\n  position: relative;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n`\n\nexport default Header\n","import styled from 'styled-components'\n\ntype Props = {\n  hasFooter?: boolean\n}\n\nconst Body = styled('div')<Props>`\n  height: ${props => props.hasFooter ? 'calc(100% - (64px * 2))' : 'calc(100% - 64px)'};\n`\n\nexport default Body\n","import styled from 'styled-components/macro'\n\nconst H2 = styled('h2')`\n  color: #2196f3;\n`\n\nexport default H2\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport H2 from 'components/atoms/H2'\n\ntype Props = {\n  themeColor: string\n}\n\n// NOTE: we need to take away additional props, so that they are not passed\n// to DOM elements by MUI Components (we really should get rid of MUI...)\nconst Title = styled(({ themeColor, ...rest }) => <H2 {...rest} />)<Props>`\n  color: ${props => props.themeColor};\n  margin: 0;\n`\n\nexport default Title\n","import styled from 'styled-components'\n\nconst CloseButton = styled('button')`\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 48px;\n  height: 48px;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  transition: color .2s ease;\n\n  &:hover {\n    color: #2196f3;\n  }\n`\n\nexport default CloseButton\n","import styled from 'styled-components'\n\nconst Footer = styled('div')`\n  margin: auto;\n  height: 64px;\n  width: 100%;\n  padding: 0 24px;\n  position: relative;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\n  margin-top: -1px;\n`\n\nexport default Footer\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport Wrapper from './Wrapper'\nimport Backdrop from './Backdrop'\nimport Content from './Content'\nimport Header from './Header'\nimport Body from './Body'\nimport Title from './Title'\nimport CloseButton from './CloseButton'\nimport Footer from './Footer'\n\ntype Props = {\n  titleLabel: string\n  titleColor?: string\n  children: React.ReactChild\n  closeModal: () => void\n  footer?: React.ReactNode\n}\n\nconst Modal = ({ titleColor, titleLabel, children, closeModal, footer }: Props) => {\n  const domEl = document.getElementById('modal-root')\n\n  if (!domEl) return null\n\n  return ReactDOM.createPortal(\n    <React.Fragment>\n      <Wrapper>\n        <Backdrop onClick={closeModal} />\n        <Content>\n          <Header>\n            <Title variant=\"h2\" themeColor={titleColor}>\n              {titleLabel}\n            </Title>\n            <CloseButton onClick={closeModal}>\n              <span className=\"material-icons\">close</span>\n            </CloseButton>\n          </Header>\n          <Body hasFooter={footer ? true : false}>{children}</Body>\n          {footer && (\n            <Footer>{footer}</Footer>\n          )}\n        </Content>\n      </Wrapper>\n    </React.Fragment>,\n    domEl\n  )\n}\n\nexport default React.memo(Modal)\n","import styled from 'styled-components/macro'\n\ntype Props = {\n  hasFooter?: boolean\n}\n\nconst ModalBodyWrapper = styled('div')<Props>`\n  margin: auto;\n  height: ${props => (props.hasFooter ? 'calc(100% - 64px)' : '100%')};\n  width: 100%;\n  padding: 24px;\n  position: relative;\n  overflow-y: auto;\n\n  > *:first-child {\n    margin-top: 0;\n  }\n`\n\nexport default ModalBodyWrapper\n","import styled from 'styled-components/macro'\n\nconst ModalFooterWrapper = styled('div')`\n  margin: auto;\n  height: 64px;\n  width: 100%;\n  padding: 0 24px;\n  position: relative;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\n  margin-top: -1px;\n\n  button {\n    width: 100%;\n  }\n\n  button + button {\n    margin-left: 16px;\n  }\n`\n\nexport default ModalFooterWrapper\n","import React, { useState } from 'react'\n\nimport Modal from 'components/organisms/Modal'\nimport Prompt from 'components/organisms/Prompt'\n\ntype ModalProps = {\n  titleColor?: string\n  titleLabel: string\n  children: React.ReactChild\n  closeCallback?: () => void\n  footer?: React.ReactNode\n}\n\nexport type RenderModalType = (props: ModalProps) => JSX.Element\n\n// Renders a modal to the modal root and handles the visibility state\n// of this modal.\n//\n// NOTE: Each modal you want to render should use a separate hook!!!\n// Otherwise your modals will share their visibility state which might lead\n// to overlapping and unclosable elements.\nexport const useModal = () => {\n  const [isVisible, setIsVisible] = useState(false)\n  const show = () => setIsVisible(true)\n  const hide = () => setIsVisible(false)\n  const RenderModal: RenderModalType = ({\n    titleColor,\n    titleLabel,\n    children,\n    closeCallback,\n    footer,\n  }) => {\n    const handleClose = () => {\n      hide()\n      if (closeCallback) {\n        closeCallback()\n      }\n    }\n\n    return (\n      <React.Fragment>\n        {isVisible && (\n          <Modal\n            titleColor={titleColor}\n            titleLabel={titleLabel}\n            closeModal={handleClose}\n            footer={footer}\n          >\n            {children}\n          </Modal>\n        )}\n      </React.Fragment>\n    )\n  }\n\n  return {\n    show,\n    hide,\n    RenderModal,\n  }\n}\n\ntype PromptProps = {\n  closeCallback?: () => void\n  children?: React.ReactChild\n  noHandler: () => void\n  titleColor: string\n  titleLabel: string\n  yesHandler: () => void\n}\n\nexport type RenderPromptType = (props: PromptProps) => JSX.Element\n\nexport const usePrompt = () => {\n  const { show, hide, RenderModal } = useModal()\n\n  const RenderPrompt: RenderPromptType = ({\n    children,\n    noHandler,\n    titleColor,\n    titleLabel,\n    yesHandler,\n  }) => (\n    <RenderModal\n      titleColor={titleColor}\n      titleLabel={titleLabel}\n      closeCallback={noHandler}\n    >\n      <Prompt yesHandler={yesHandler} noHandler={noHandler}>\n        {children}\n      </Prompt>\n    </RenderModal>\n  )\n\n  return {\n    show,\n    hide,\n    RenderPrompt,\n  }\n}\n","import React from 'react'\n\nimport ModalBodyWrapper from 'components/atoms/ModalBodyWrapper'\nimport ModalFooterWrapper from 'components/atoms/ModalFooterWrapper'\nimport Button from 'components/atoms/Button'\n\nconst Prompt = ({\n  yesHandler,\n  noHandler,\n  children,\n}: {\n  yesHandler: () => void\n  noHandler: () => void\n  children?: React.ReactChild\n}) => {\n  return (\n    <React.Fragment>\n      <ModalBodyWrapper hasFooter={true}>{children}</ModalBodyWrapper>\n      <ModalFooterWrapper>\n        <Button\n          onClick={noHandler}\n        >\n          No\n        </Button>\n        <Button\n          onClick={yesHandler}\n        >\n          Yes\n        </Button>\n      </ModalFooterWrapper>\n    </React.Fragment>\n  )\n}\n\nexport default React.memo(Prompt)\n","import styled from 'styled-components/macro'\nimport ReactSelect from 'react-select'\n\nconst Select = styled(ReactSelect)`\n\n`\n\nexport default Select\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  margin-bottom: 16px;\n`\n\nexport default Wrapper\n","import React from 'react'\n\nimport * as types from 'types'\n\nimport ScreenReaderOnlyText from 'components/atoms/ScreenReaderOnlyText'\nimport Label from 'components/atoms/Label'\nimport Select from 'components/atoms/Select'\nimport Wrapper from './__styled__/Wrapper'\n\ntype Props = {\n  id: string\n  options: types.SelectOptions\n  label: string\n  labelHidden?: boolean\n  name?: string\n  onChange: (event: any) => void\n  defaultValue?: any\n  required?: boolean\n  isMulti?: boolean\n}\n\nconst FormGroupInputText = ({\n  id,\n  options,\n  label,\n  labelHidden,\n  name,\n  onChange,\n  defaultValue,\n  required,\n  isMulti,\n}: Props) => {\n  return (\n    <Wrapper>\n      <Label htmlFor={id}>\n        {labelHidden ? (\n          <ScreenReaderOnlyText>{label}</ScreenReaderOnlyText>\n        ) : (\n          label\n        )}\n      </Label>\n      <Select\n        options={options}\n        classNamePrefix=\"ReactSelect\"\n        id={id}\n        name={name ? name : id}\n        onChange={onChange}\n        defaultValue={defaultValue}\n        required={required}\n        isMulti={isMulti}\n      />\n    </Wrapper>\n  )\n}\n\nexport default React.memo(FormGroupInputText)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport * as types from 'types'\n\nimport { actions } from 'Redux/Store'\nimport { initialState } from 'Redux/Store/DraftExpedition/SequenceConfig/DraftBranch'\n\nimport FormGroupInputText from 'components/molecules/FormGroupInputText'\nimport FormGroupSelect from 'components/molecules/FormGroupSelect'\n\nconst mapDispatchToProps = {\n  updateDraftBranch:\n    actions.DraftExpedition.SequenceConfig.DraftBranch.updateDraftBranch,\n}\n\ntype Props = typeof mapDispatchToProps & {\n  draftBranch: types.BranchBase\n}\n\nconst BaseBranch = ({ \n  draftBranch, \n  updateDraftBranch,\n}: Props) => {\n\n  const branchTypeOptions: types.BranchTypeOptions = [\n    { value: 'narrative', label: 'narrative' },\n    { value: 'battle', label: 'battle' },\n    { value: 'reward', label: 'reward' },\n  ]\n\n  const branchTypeDefaultValue = branchTypeOptions.find(\n    (option) => option.value === draftBranch.type\n  )\n\n  const handleBranchIdChange = (event: any) => {\n    updateDraftBranch({\n      ...draftBranch,\n      id: event.target.value,\n    })\n  }\n\n  const handleBranchTypeChange = (selectOption: types.BranchTypeOption) => {\n    const { _id, id } = draftBranch\n\n    updateDraftBranch({\n      ...initialState,\n      _id,\n      id,\n      type: selectOption.value,\n    })\n  }\n\n  return (\n    <>\n      <FormGroupInputText\n        id=\"branchId\"\n        label=\"Branch id\"\n        onChange={handleBranchIdChange}\n        defaultValue={draftBranch.id}\n        required={true}\n      />\n      <FormGroupSelect\n        options={branchTypeOptions}\n        id=\"branchType\"\n        label=\"Branch type\"\n        onChange={handleBranchTypeChange}\n        defaultValue={branchTypeDefaultValue}\n      />\n    </>\n  )\n}\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(React.memo(BaseBranch))\n","import styled from 'styled-components/macro'\n\nconst Textarea = styled('textarea')`\n  min-height: 64px;\n  width: 100%;\n  padding: 8px;\n  font-family: 'Roboto';\n  border: 1px solid #dadada;\n  resize: vertical;\n`\n\nexport default Textarea\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  margin-bottom: 16px;\n`\n\nexport default Wrapper\n","import React from 'react'\n\nimport ScreenReaderOnlyText from 'components/atoms/ScreenReaderOnlyText'\nimport Label from 'components/atoms/Label'\nimport Textarea from 'components/atoms/Textarea'\nimport Wrapper from './__styled__/Wrapper'\n\ntype Props = {\n  id: string\n  label: string\n  labelHidden?: boolean\n  name?: string\n  onChange: (event: any) => void\n  defaultValue: any\n  required?: boolean\n}\n\nconst FormGroupTextarea = ({\n  id,\n  label,\n  labelHidden,\n  name,\n  onChange,\n  defaultValue,\n  required\n}: Props) => {\n  \n  return (\n    <Wrapper>\n      <Label htmlFor={id}>\n        {\n          labelHidden ? (\n            <ScreenReaderOnlyText>{label}</ScreenReaderOnlyText>\n          ) : (\n            label\n          )\n        }\n      </Label>\n      <Textarea\n        id={id}\n        name={name ? name : id}\n        onChange={onChange}\n        defaultValue={defaultValue}\n        required={required}\n      />\n    </Wrapper>\n  )\n}\n\nexport default React.memo(FormGroupTextarea)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport shortid from 'shortid'\n\nimport * as types from 'types'\n\nimport { actions } from 'Redux/Store'\n\nimport FormGroupInputText from 'components/molecules/FormGroupInputText'\nimport FormGroupTextarea from 'components/molecules/FormGroupTextarea'\n\nconst mapDispatchToProps = {\n  updateDraftBranch:\n    actions.DraftExpedition.SequenceConfig.DraftBranch.updateDraftBranch,\n}\n\ntype Props = typeof mapDispatchToProps & {\n  draftBranch: types.NarrativeBranch\n}\n\nconst NarrativeBranch = ({ \n  draftBranch, \n  updateDraftBranch \n}: Props) => {\n  \n  const handleBranchTextChange = (event: any) => {\n    updateDraftBranch({\n      ...draftBranch,\n      text: event.target.value,\n    })\n  }\n\n  const handleBranchDecisionsChange = (event: any) => {\n    const decisions =\n      (event.target.value && event.target.value.split('; ')) ?? []\n    updateDraftBranch({\n      ...draftBranch,\n      decisions: decisions.map((decision: string) => {\n        return {\n          _id: shortid.generate(),\n          text: decision,\n        }\n      }),\n    })\n  }\n\n  return (\n    <>\n      <FormGroupTextarea\n        id=\"description\"\n        label=\"Text\"\n        onChange={handleBranchTextChange}\n        defaultValue={draftBranch.text}\n      />\n      <p>\n        Add multiple decisions by separating them with ';' followed by a SPACE\n      </p>\n      <FormGroupInputText\n        id=\"decisions\"\n        label=\"Decisions\"\n        onChange={handleBranchDecisionsChange}\n        defaultValue={\n          draftBranch.decisions\n            ? draftBranch.decisions.map((decision) => decision.text)\n            : ''\n        }\n      />\n    </>\n  )\n}\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(React.memo(NarrativeBranch))","import React from 'react'\n\nimport DATA from 'aer-data'\nimport * as aerTypes from 'aer-types'\n\nimport * as types from 'types'\n\nimport Accordion from 'components/organisms/Accordion'\nimport FormGroupSelect from 'components/molecules/FormGroupSelect'\nimport FormGroupInputText from 'components/molecules/FormGroupInputText'\n\ntype Props = {\n  draftBranch: types.RewardBranch\n  updateDraftBranch: (branch: types.Branch) => void\n}\n\nconst Treasures = ({ draftBranch, updateDraftBranch }: Props) => {\n  const dataTreasures: aerTypes.Treasure[] = Object.values(\n    DATA.normalizedData.ENG.treasures\n  )\n\n  const treasureOptions = dataTreasures.map((treasure: aerTypes.Treasure) => {\n    return {\n      value: treasure.id,\n      label: `${treasure.name} (Level: ${treasure.level})`,\n    }\n  })\n\n  const handleTreasureChange = (selectOptions: types.SelectOptions) => {\n    const selectedTreasureIds: string[] = selectOptions\n      ? selectOptions.map((option: types.SelectOption) => option.value)\n      : []\n\n    updateDraftBranch({\n      ...draftBranch,\n      treasure: {\n        ...draftBranch.treasure,\n        ids: [...selectedTreasureIds],\n      },\n    })\n  }\n\n  const handleTreasureAmountTier1Change = (event: React.ChangeEvent) => {\n    updateDraftBranch({\n      ...draftBranch,\n      treasure: {\n        ...draftBranch.treasure,\n        tier1: parseInt((event.target as HTMLInputElement).value),\n      },\n    })\n  }\n\n  const handleTreasureAmountTier2Change = (event: React.ChangeEvent) => {\n    updateDraftBranch({\n      ...draftBranch,\n      treasure: {\n        ...draftBranch.treasure,\n        tier2: parseInt((event.target as HTMLInputElement).value),\n      },\n    })\n  }\n\n  const handleTreasureAmountTier3Change = (event: React.ChangeEvent) => {\n    updateDraftBranch({\n      ...draftBranch,\n      treasure: {\n        ...draftBranch.treasure,\n        tier3: parseInt((event.target as HTMLInputElement).value),\n      },\n    })\n  }\n\n  return (\n    <Accordion id=\"treasures\" title=\"Treasures\" open>\n      <FormGroupSelect\n        options={treasureOptions}\n        id=\"selectTreasures\"\n        label=\"Select Treasures\"\n        onChange={handleTreasureChange}\n        isMulti\n      />\n      <h3>Random Treasures</h3>\n      <p>Enter the amount of random treasures per tier.</p>\n      <FormGroupInputText\n        id=\"treasuresTier1\"\n        label=\"Tier 1\"\n        onChange={handleTreasureAmountTier1Change}\n        defaultValue={0}\n      />\n      <FormGroupInputText\n        id=\"treasuresTier2\"\n        label=\"Tier 2\"\n        onChange={handleTreasureAmountTier2Change}\n        defaultValue={0}\n      />\n      <FormGroupInputText\n        id=\"treasuresTier3\"\n        label=\"Tier 3\"\n        onChange={handleTreasureAmountTier3Change}\n        defaultValue={0}\n      />\n    </Accordion>\n  )\n}\n\nexport default React.memo(Treasures)\n","import React from 'react'\n\nimport DATA from 'aer-data'\nimport * as aerTypes from 'aer-types'\n\nimport * as types from 'types'\n\nimport Accordion from 'components/organisms/Accordion'\nimport FormGroupSelect from 'components/molecules/FormGroupSelect'\nimport FormGroupInputText from 'components/molecules/FormGroupInputText'\n\ntype Props = {\n  draftBranch: types.RewardBranch\n  updateDraftBranch: (branch: types.Branch) => void\n}\n\nconst Mages = ({ draftBranch, updateDraftBranch }: Props) => {\n  const dataMages: aerTypes.Mage[] = Object.values(\n    DATA.normalizedData.ENG.mages\n  )\n\n  const mageOptions = dataMages.map((mage: aerTypes.Mage) => {\n    return {\n      value: mage.id,\n      label: mage.name,\n    }\n  })\n\n  const handleMageChange = (selectOptions: types.SelectOptions) => {\n    const selectedMageIds: string[] = selectOptions\n      ? selectOptions.map((option: types.SelectOption) => option.value)\n      : []\n\n    updateDraftBranch({\n      ...draftBranch,\n      mage: {\n        ...draftBranch.mage,\n        ids: [...selectedMageIds],\n      },\n    })\n  }\n\n  const handleMageRandomAmountChange = (event: React.ChangeEvent) => {\n    updateDraftBranch({\n      ...draftBranch,\n      mage: {\n        ...draftBranch.mage,\n        randomAmount: parseInt((event.target as HTMLInputElement).value),\n      },\n    })\n  }\n\n  return (\n    <Accordion id=\"mages\" title=\"Mages\" open>\n      <FormGroupSelect\n        options={mageOptions}\n        id=\"selectMages\"\n        label=\"Select Mages\"\n        onChange={handleMageChange}\n        isMulti\n      />\n      <h3>Random Mages</h3>\n      <p>Enter the amount of random mages.</p>\n      <FormGroupInputText\n        id=\"randomMagesAmount\"\n        label=\"Amount of random mages\"\n        onChange={handleMageRandomAmountChange}\n        defaultValue={0}\n      />\n    </Accordion>\n  )\n}\n\nexport default React.memo(Mages)\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  margin-bottom: 16px;\n`\n\nexport default Wrapper\n","import React from 'react'\n\nimport ScreenReaderOnlyText from 'components/atoms/ScreenReaderOnlyText'\nimport Label from 'components/atoms/Label'\nimport Input from 'components/atoms/Input'\nimport Wrapper from './__styled__/Wrapper'\n\ntype Props = {\n  id: string\n  label: string\n  labelHidden?: boolean\n  name?: string\n  onChange: (event: any) => void\n  defaultValue?: any\n  required?: boolean\n}\n\nconst FormGroupInputNumber = ({\n  id,\n  label,\n  labelHidden,\n  name,\n  onChange,\n  defaultValue,\n  required,\n}: Props) => {\n  return (\n    <Wrapper>\n      <Label htmlFor={id}>\n        {labelHidden ? (\n          <ScreenReaderOnlyText>{label}</ScreenReaderOnlyText>\n        ) : (\n          label\n        )}\n      </Label>\n      <Input\n        id={id}\n        name={name ? name : id}\n        type=\"number\"\n        onChange={onChange}\n        defaultValue={defaultValue}\n        required={required}\n      />\n    </Wrapper>\n  )\n}\n\nexport default React.memo(FormGroupInputNumber)\n","import React from 'react'\n\nimport * as types from 'types'\n\nimport FormGroupSelect from 'components/molecules/FormGroupSelect'\nimport FormGroupInputNumber from 'components/molecules/FormGroupInputNumber'\nimport Button from 'components/atoms/Button'\n\ntype Props = {\n  blueprint: types.Blueprint\n  handleChange: (blueprint: types.Blueprint) => void\n  handleDelete: (blueprint: types.Blueprint) => void\n}\n\nconst SupplyCardBlueprint = ({\n  blueprint,\n  handleChange,\n  handleDelete,\n}: Props) => {\n  const cardTypeOptions: types.CardTypeOptions = [\n    { value: 'Gem', label: 'Gem' },\n    { value: 'Relic', label: 'Relic' },\n    { value: 'Spell', label: 'Spell' },\n  ]\n\n  const cardTypeDefaultValue = cardTypeOptions.find(\n    (option) => option.value === blueprint.type\n  )\n\n  const cardOperationOptions: types.CardOperationOptions = [\n    { value: '<', label: '>' },\n    { value: '>', label: '<' },\n    { value: '=', label: '=' },\n    { value: '<=', label: '<=' },\n    { value: '>=', label: '>=' },\n    { value: 'ANY', label: 'ANY' },\n    { value: 'OR', label: 'OR' },\n  ]\n\n  const cardOperationDefaultValue = cardOperationOptions.find(\n    (option) => option.value === blueprint.operation\n  )\n\n  const cardCostsOptions: types.CardCostsOptions = [\n    { value: '0', label: 'Cost: 0' },\n    { value: '1', label: 'Cost: 1' },\n    { value: '2', label: 'Cost: 2' },\n    { value: '3', label: 'Cost: 3' },\n    { value: '4', label: 'Cost: 4' },\n    { value: '5', label: 'Cost: 5' },\n    { value: '6', label: 'Cost: 6' },\n    { value: '7', label: 'Cost: 7' },\n    { value: '8', label: 'Cost: 8' },\n    { value: '9', label: 'Cost: 9' },\n  ]\n\n  const handleCardTypeChange = (selectOption: types.CardTypeOption) => {\n    handleChange({\n      ...blueprint,\n      type: selectOption.value,\n    })\n  }\n\n  const handleCardOperationChange = (\n    selectOption: types.CardOperationOption\n  ) => {\n    handleChange({\n      ...blueprint,\n      operation: selectOption.value,\n    })\n  }\n\n  const handleCardThresholdChange = (event: React.ChangeEvent) => {\n    handleChange({\n      ...blueprint,\n      threshold: parseInt((event.target as HTMLInputElement).value),\n    })\n  }\n\n  const handleCardCostsChange = (selectOptions: types.CardCostsOptions) => {\n    const costValues: number[] = selectOptions.map(\n      (option: types.CardCostsOption) => parseInt(option.value)\n    )\n\n    handleChange({\n      ...blueprint,\n      values: [...costValues],\n    })\n  }\n\n  const handleDeleteBlueprint = () => {\n    handleDelete(blueprint)\n  }\n\n  return (\n    <div>\n      <FormGroupSelect\n        options={cardTypeOptions}\n        id={`selectCardType${blueprint._id}`}\n        label=\"Type\"\n        onChange={handleCardTypeChange}\n        defaultValue={cardTypeDefaultValue}\n      />\n      <FormGroupSelect\n        options={cardOperationOptions}\n        id={`selectCardOperation${blueprint._id}`}\n        label=\"Operation\"\n        onChange={handleCardOperationChange}\n        defaultValue={cardOperationDefaultValue}\n      />\n      {blueprint.operation !== 'OR' && blueprint.operation !== 'ANY' && (\n        <FormGroupInputNumber\n          id={`threshold${blueprint._id}`}\n          label=\"Threshold\"\n          onChange={handleCardThresholdChange}\n        />\n      )}\n      {blueprint.operation === 'OR' && (\n        <FormGroupSelect\n          options={cardCostsOptions}\n          id={`selectCosts${blueprint._id}`}\n          label=\"Card costs (values)\"\n          onChange={handleCardCostsChange}\n          isMulti\n        />\n      )}\n      <Button onClick={handleDeleteBlueprint}>Delete</Button>\n    </div>\n  )\n}\n\nexport default SupplyCardBlueprint\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport DATA from 'aer-data'\nimport * as aerTypes from 'aer-types'\n\nimport { RootState, selectors, actions } from 'Redux/Store'\n\nimport * as types from 'types'\n\nimport Accordion from 'components/organisms/Accordion'\nimport FormGroupSelect from 'components/molecules/FormGroupSelect'\nimport Button from 'components/atoms/Button'\nimport SupplyCardBlueprint from 'components/molecules/SupplyCardBlueprint'\nimport FormGroupCheckbox from 'components/molecules/FormGroupCheckbox'\n\nconst mapStateToProps = (state: RootState) => ({\n  blueprints: selectors.DraftExpedition.SequenceConfig.DraftRewardSupplyCard.getDraftRewardSupplyCardArray(\n    state\n  ),\n})\n\nconst mapDispatchToProps = {\n  addSupplyCard:\n    actions.DraftExpedition.SequenceConfig.DraftRewardSupplyCard\n      .draftAddRewardSupplyCard,\n  editSupplyCard:\n    actions.DraftExpedition.SequenceConfig.DraftRewardSupplyCard\n      .draftEditRewardSupplyCard,\n  deleteSupplyCard:\n    actions.DraftExpedition.SequenceConfig.DraftRewardSupplyCard\n      .draftDeleteRewardSupplyCard,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> &\n  typeof mapDispatchToProps & {\n    draftBranch: types.RewardBranch\n    updateDraftBranch: (branch: types.Branch) => void\n  }\n\nconst Supply = ({\n  draftBranch,\n  updateDraftBranch,\n  blueprints,\n  addSupplyCard,\n  editSupplyCard,\n  deleteSupplyCard,\n}: Props) => {\n  const dataSupply: aerTypes.ICard[] = Object.values(\n    DATA.normalizedData.ENG.cards\n  )\n\n  const supplyOptions = dataSupply.map((supply: aerTypes.ICard) => {\n    return {\n      value: supply.id,\n      label: `${supply.name} (${supply.type})`,\n    }\n  })\n\n  const handleSupplyChange = (selectOptions: types.SelectOptions) => {\n    const selectedSupplyIds: string[] = selectOptions\n      ? selectOptions.map((option: types.SelectOption) => option.value)\n      : []\n\n    updateDraftBranch({\n      ...draftBranch,\n      supply: {\n        ...draftBranch.supply,\n        ids: [...selectedSupplyIds],\n      },\n    })\n  }\n\n  const handleBigPocketChange = (event: React.ChangeEvent) => {\n    updateDraftBranch({\n      ...draftBranch,\n      supply: {\n        ...draftBranch.supply,\n        bigPocket: (event.currentTarget as HTMLInputElement).checked,\n      },\n    })\n  }\n\n  const handleAddSupplyCard = () => {\n    addSupplyCard()\n  }\n\n  const handleEditSupplyCard = (blueprint: types.Blueprint) => {\n    editSupplyCard(blueprint)\n  }\n\n  const handleDeleteSupplyCard = (blueprint: types.Blueprint) => {\n    deleteSupplyCard(blueprint)\n  }\n\n  const renderSupplyBlueprints = (blueprints: types.Blueprint[]) => {\n    return blueprints.map((blueprint: types.Blueprint) => {\n      return (\n        <SupplyCardBlueprint\n          key={blueprint._id}\n          blueprint={blueprint}\n          handleChange={handleEditSupplyCard}\n          handleDelete={handleDeleteSupplyCard}\n        />\n      )\n    })\n  }\n\n  return (\n    <Accordion id=\"supply\" title=\"Supply\" open>\n      <FormGroupCheckbox\n        id=\"rewardSupplyBigPocket\"\n        label=\"Big Pocket Mode\"\n        onChange={handleBigPocketChange}\n        defaultChecked={draftBranch?.supply?.bigPocket ?? false}\n      />\n      <FormGroupSelect\n        options={supplyOptions}\n        id=\"selectSupplyCards\"\n        label=\"Select Supply Cards\"\n        onChange={handleSupplyChange}\n        isMulti\n      />\n      <h3>Random supply cards</h3>\n      <Button onClick={handleAddSupplyCard}>Add random supply card</Button>\n      {blueprints ? (\n        renderSupplyBlueprints(blueprints)\n      ) : (\n        <p>No supply cards added</p>\n      )}\n    </Accordion>\n  )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(Supply))\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport * as types from 'types'\n\nimport { actions } from 'Redux/Store'\n\nimport Fieldset from 'components/molecules/Fieldset'\nimport Treasures from './Treasures'\nimport Mages from './Mages'\nimport Supply from './Supply'\n\nconst mapDispatchToProps = {\n  updateDraftBranch:\n    actions.DraftExpedition.SequenceConfig.DraftBranch.updateDraftBranch,\n}\n\ntype Props = typeof mapDispatchToProps & {\n  draftBranch: types.RewardBranch\n}\n\nconst RewardBranch = ({ \n  draftBranch,\n  updateDraftBranch \n}: Props) => {\n\n  const handleRewardTypeChange = (event: React.ChangeEvent) => {\n    updateDraftBranch({\n      ...draftBranch,\n      rewardType: (event.target as HTMLInputElement).value as types.RewardType,\n    })\n  }\n\n  return (\n    <>\n      <Fieldset legend=\"Reward type\" legendVisible>\n        <div className=\"radio-wrapper\">\n          <input\n            type=\"radio\"\n            name=\"rewardType\"\n            id=\"regular\"\n            defaultChecked\n            value=\"regular\"\n            onChange={handleRewardTypeChange}\n          />\n          <label htmlFor=\"regular\">regular</label>\n        </div>\n        <div className=\"radio-wrapper\">\n          <input\n            type=\"radio\"\n            name=\"rewardType\"\n            id=\"custom\"\n            value=\"custom\"\n            onChange={handleRewardTypeChange}\n          />\n          <label htmlFor=\"custom\">custom</label>\n        </div>\n      </Fieldset>\n      {draftBranch.rewardType === 'custom' && (\n        <>\n          <Treasures draftBranch={draftBranch} updateDraftBranch={updateDraftBranch} />\n          <Mages draftBranch={draftBranch} updateDraftBranch={updateDraftBranch} />\n          <Supply draftBranch={draftBranch} updateDraftBranch={updateDraftBranch} />\n        </>\n      )}\n    </>\n  )\n}\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(React.memo(RewardBranch))","import React from 'react'\n\nimport DATA from 'aer-data'\nimport * as aerTypes from 'aer-types'\n\nimport * as types from 'types'\n\nimport Accordion from 'components/organisms/Accordion'\nimport FormGroupSelect from 'components/molecules/FormGroupSelect'\nimport FormGroupInputText from 'components/molecules/FormGroupInputText'\n\ntype Props = {\n  config: types.BattleRewardConfig\n  updateDraftRewardConfig: (config: types.BattleRewardConfig) => void\n}\n\nconst Treasures = ({ config, updateDraftRewardConfig }: Props) => {\n  const dataTreasures: aerTypes.Treasure[] = Object.values(\n    DATA.normalizedData.ENG.treasures\n  )\n\n  const treasureOptions = dataTreasures.map((treasure: aerTypes.Treasure) => {\n    return {\n      value: treasure.id,\n      label: `${treasure.name} (Level: ${treasure.level})`,\n    }\n  })\n\n  const handleTreasureChange = (selectOptions: types.SelectOptions) => {\n    const selectedTreasureIds: string[] = selectOptions\n      ? selectOptions.map((option: types.SelectOption) => option.value)\n      : []\n\n    updateDraftRewardConfig({\n      ...config,\n      ...Object.assign({\n        treasure: {\n          ...config.treasure,\n          ids: [...selectedTreasureIds],\n        },\n      }),\n    })\n  }\n\n  const handleTreasureAmountTier1Change = (event: React.ChangeEvent) => {\n    updateDraftRewardConfig({\n      ...config,\n      ...Object.assign({\n        treasure: {\n          ...config.treasure,\n          tier1: parseInt((event.target as HTMLInputElement).value),\n        },\n      }),\n    })\n  }\n\n  const handleTreasureAmountTier2Change = (event: React.ChangeEvent) => {\n    updateDraftRewardConfig({\n      ...config,\n      ...Object.assign({\n        treasure: {\n          ...config.treasure,\n          tier2: parseInt((event.target as HTMLInputElement).value),\n        },\n      }),\n    })\n  }\n\n  const handleTreasureAmountTier3Change = (event: React.ChangeEvent) => {\n    updateDraftRewardConfig({\n      ...config,\n      ...Object.assign({\n        treasure: {\n          ...config.treasure,\n          tier3: parseInt((event.target as HTMLInputElement).value),\n        },\n      }),\n    })\n  }\n\n  return (\n    <Accordion id=\"treasures\" title=\"Treasures\" open>\n      <FormGroupSelect\n        options={treasureOptions}\n        id=\"selectTreasures\"\n        label=\"Select Treasures\"\n        onChange={handleTreasureChange}\n        isMulti\n      />\n      <h3>Random Treasures</h3>\n      <p>Enter the amount of random treasures per tier.</p>\n      <FormGroupInputText\n        id=\"treasuresTier1\"\n        label=\"Tier 1\"\n        onChange={handleTreasureAmountTier1Change}\n        defaultValue={0}\n      />\n      <FormGroupInputText\n        id=\"treasuresTier2\"\n        label=\"Tier 2\"\n        onChange={handleTreasureAmountTier2Change}\n        defaultValue={0}\n      />\n      <FormGroupInputText\n        id=\"treasuresTier3\"\n        label=\"Tier 3\"\n        onChange={handleTreasureAmountTier3Change}\n        defaultValue={0}\n      />\n    </Accordion>\n  )\n}\n\nexport default React.memo(Treasures)\n","import React from 'react'\n\nimport DATA from 'aer-data'\nimport * as aerTypes from 'aer-types'\n\nimport * as types from 'types'\n\nimport Accordion from 'components/organisms/Accordion'\nimport FormGroupSelect from 'components/molecules/FormGroupSelect'\nimport FormGroupInputText from 'components/molecules/FormGroupInputText'\n\ntype Props = {\n  config: types.BattleRewardConfig\n  updateDraftRewardConfig: (config: types.BattleRewardConfig) => void\n}\n\nconst Mages = ({ config, updateDraftRewardConfig }: Props) => {\n  const dataMages: aerTypes.Mage[] = Object.values(\n    DATA.normalizedData.ENG.mages\n  )\n\n  const mageOptions = dataMages.map((mage: aerTypes.Mage) => {\n    return {\n      value: mage.id,\n      label: mage.name,\n    }\n  })\n\n  const handleMageChange = (selectOptions: types.SelectOptions) => {\n    const selectedMageIds: string[] = selectOptions\n      ? selectOptions.map((option: types.SelectOption) => option.value)\n      : []\n\n    updateDraftRewardConfig({\n      ...config,\n      ...Object.assign({\n        mage: {\n          ...config.mage,\n          ids: [...selectedMageIds],\n        },\n      }),\n    })\n  }\n\n  const handleMageRandomAmountChange = (event: React.ChangeEvent) => {\n    updateDraftRewardConfig({\n      ...config,\n      ...Object.assign({\n        mage: {\n          ...config.mage,\n          randomAmount: parseInt((event.target as HTMLInputElement).value),\n        },\n      }),\n    })\n  }\n\n  return (\n    <Accordion id=\"mages\" title=\"Mages\" open>\n      <FormGroupSelect\n        options={mageOptions}\n        id=\"selectMages\"\n        label=\"Select Mages\"\n        onChange={handleMageChange}\n        isMulti\n      />\n      <h3>Random Mages</h3>\n      <p>Enter the amount of random mages.</p>\n      <FormGroupInputText\n        id=\"randomMagesAmount\"\n        label=\"Amount of random mages\"\n        onChange={handleMageRandomAmountChange}\n        defaultValue={0}\n      />\n    </Accordion>\n  )\n}\n\nexport default React.memo(Mages)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport DATA from 'aer-data'\nimport * as aerTypes from 'aer-types'\n\nimport { RootState, selectors, actions } from 'Redux/Store'\n\nimport * as types from 'types'\n\nimport Accordion from 'components/organisms/Accordion'\nimport FormGroupSelect from 'components/molecules/FormGroupSelect'\nimport Button from 'components/atoms/Button'\nimport SupplyCardBlueprint from 'components/molecules/SupplyCardBlueprint'\nimport FormGroupCheckbox from 'components/molecules/FormGroupCheckbox'\n\nconst mapStateToProps = (state: RootState) => ({\n  blueprints: selectors.DraftExpedition.SequenceConfig.DraftRewardSupplyCard.getDraftRewardSupplyCardArray(\n    state\n  ),\n})\n\nconst mapDispatchToProps = {\n  addSupplyCard:\n    actions.DraftExpedition.SequenceConfig.DraftRewardSupplyCard\n      .draftAddBattleRewardSupplyCard,\n  editSupplyCard:\n    actions.DraftExpedition.SequenceConfig.DraftRewardSupplyCard\n      .draftEditRewardSupplyCard,\n  deleteSupplyCard:\n    actions.DraftExpedition.SequenceConfig.DraftRewardSupplyCard\n      .draftDeleteRewardSupplyCard,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> &\n  typeof mapDispatchToProps & {\n    config: types.BattleRewardConfig\n    updateDraftRewardConfig: (config: types.BattleRewardConfig) => void\n  }\n\nconst Supply = ({\n  config,\n  updateDraftRewardConfig,\n  blueprints,\n  addSupplyCard,\n  editSupplyCard,\n  deleteSupplyCard,\n}: Props) => {\n  const dataSupply: aerTypes.ICard[] = Object.values(\n    DATA.normalizedData.ENG.cards\n  )\n\n  const supplyOptions = dataSupply.map((supply: aerTypes.ICard) => {\n    return {\n      value: supply.id,\n      label: `${supply.name} (${supply.type})`,\n    }\n  })\n\n  const handleSupplyChange = (selectOptions: types.SelectOptions) => {\n    const selectedSupplyIds: string[] = selectOptions\n      ? selectOptions.map((option: types.SelectOption) => option.value)\n      : []\n\n    updateDraftRewardConfig({\n      ...config,\n      ...Object.assign({\n        supply: {\n          ...config.supply,\n          ids: [...selectedSupplyIds],\n        },\n      }),\n    })\n  }\n\n  const handleBigPocketChange = (event: React.ChangeEvent) => {\n    updateDraftRewardConfig({\n      ...config,\n      ...Object.assign({\n        supply: {\n          ...config.supply,\n          bigPocket: (event.currentTarget as HTMLInputElement).checked,\n        },\n      }),\n    })\n  }\n\n  const handleAddSupplyCard = () => {\n    addSupplyCard(config._id)\n  }\n\n  const handleEditSupplyCard = (blueprint: types.Blueprint) => {\n    editSupplyCard(blueprint)\n  }\n\n  const handleDeleteSupplyCard = (blueprint: types.Blueprint) => {\n    deleteSupplyCard(blueprint)\n  }\n\n  const renderSupplyBlueprints = (\n    blueprints: types.Blueprint[],\n    configId: string\n  ) => {\n    return blueprints\n      .filter((blueprint: types.Blueprint) => blueprint.configId === configId)\n      .map((blueprint: types.Blueprint) => {\n        return (\n          <SupplyCardBlueprint\n            key={blueprint._id}\n            blueprint={blueprint}\n            handleChange={handleEditSupplyCard}\n            handleDelete={handleDeleteSupplyCard}\n          />\n        )\n      })\n  }\n\n  return (\n    <Accordion id=\"supply\" title=\"Supply\" open>\n      <FormGroupCheckbox\n        id=\"rewardSupplyBigPocket\"\n        label=\"Big Pocket Mode\"\n        onChange={handleBigPocketChange}\n        defaultChecked={config?.supply?.bigPocket ?? false}\n      />\n      <FormGroupSelect\n        options={supplyOptions}\n        id=\"selectSupplyCards\"\n        label=\"Select Supply Cards\"\n        onChange={handleSupplyChange}\n        isMulti\n      />\n      <h3>Random supply cards</h3>\n      <Button onClick={handleAddSupplyCard}>Add random supply card</Button>\n      {blueprints ? (\n        renderSupplyBlueprints(blueprints, config._id)\n      ) : (\n        <p>No supply cards added</p>\n      )}\n    </Accordion>\n  )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(Supply))\n","import React from 'react'\n\nimport * as types from 'types'\n\nimport Fieldset from 'components/molecules/Fieldset'\nimport Button from 'components/atoms/Button'\nimport Treasures from './Treasures'\nimport Mages from './Mages'\nimport Supply from './Supply'\n\ntype Props = {\n  config: types.BattleRewardConfig\n  handleChange: (config: types.BattleRewardConfig) => void\n  handleDelete: (config: types.BattleRewardConfig) => void\n}\n\nconst RewardConfig = ({ config, handleChange, handleDelete }: Props) => {\n  const handleDeleteRewardConfig = () => {\n    handleDelete(config)\n  }\n\n  const handleRewardTypeChange = (event: React.ChangeEvent) => {\n    const rewardType = (event.target as HTMLInputElement)\n      .value as types.RewardType\n\n    handleChange({\n      ...config,\n      rewardType: rewardType,\n      treasure: rewardType === 'custom' ? config.treasure : undefined,\n      mage: rewardType === 'custom' ? config.mage : undefined,\n      supply: rewardType === 'custom' ? config.supply : undefined,\n    })\n  }\n\n  return (\n    <>\n      <Fieldset legend=\"Reward type\" legendVisible>\n        <div className=\"radio-wrapper\">\n          <input\n            type=\"radio\"\n            name={`rewardType-${config._id}`}\n            id={`regular-${config._id}`}\n            defaultChecked\n            value=\"regular\"\n            onChange={handleRewardTypeChange}\n          />\n          <label htmlFor={`regular-${config._id}`}>regular</label>\n        </div>\n        <div className=\"radio-wrapper\">\n          <input\n            type=\"radio\"\n            name={`rewardType-${config._id}`}\n            id={`custom-${config._id}`}\n            value=\"custom\"\n            onChange={handleRewardTypeChange}\n          />\n          <label htmlFor={`custom-${config._id}`}>custom</label>\n        </div>\n      </Fieldset>\n      {config.rewardType === 'custom' && (\n        <>\n          <Treasures config={config} updateDraftRewardConfig={handleChange} />\n          <Mages config={config} updateDraftRewardConfig={handleChange} />\n          <Supply config={config} updateDraftRewardConfig={handleChange} />\n        </>\n      )}\n\n      <Button onClick={handleDeleteRewardConfig}>Delete Config</Button>\n    </>\n  )\n}\n\nexport default React.memo(RewardConfig)\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\n\nimport DATA from 'aer-data'\nimport * as aerTypes from 'aer-types'\n\nimport * as types from 'types'\n\nimport { RootState, selectors, actions } from 'Redux/Store'\nimport Fieldset from 'components/molecules/Fieldset'\nimport FormGroupTextarea from 'components/molecules/FormGroupTextarea'\nimport FormGroupSelect from 'components/molecules/FormGroupSelect'\nimport FormGroupCheckbox from 'components/molecules/FormGroupCheckbox'\nimport Button from 'components/atoms/Button'\nimport RewardConfig from './RewardConfig'\n\nconst mapStateToProps = (state: RootState) => ({\n  rewardConfigs: selectors.DraftExpedition.SequenceConfig.DraftRewardConfig.getDraftRewardConfigArray(\n    state\n  ),\n})\n\nconst mapDispatchToProps = {\n  addRewardConfig:\n    actions.DraftExpedition.SequenceConfig.DraftRewardConfig\n      .draftAddRewardConfig,\n  editRewardConfig:\n    actions.DraftExpedition.SequenceConfig.DraftRewardConfig\n      .draftEditRewardConfig,\n  deleteRewardConfig:\n    actions.DraftExpedition.SequenceConfig.DraftRewardConfig\n      .draftDeleteRewardConfig,\n  updateDraftBranch:\n    actions.DraftExpedition.SequenceConfig.DraftBranch.updateDraftBranch,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> &\n  typeof mapDispatchToProps & {\n    draftBranch: types.BattleBranch\n  }\n\ntype TreasureLevelOption = {\n  value: string\n  label: string\n}\n\ntype TreasureLevelOptions = TreasureLevelOption[]\n\nconst BattleBranch = ({\n  draftBranch,\n  rewardConfigs,\n  updateDraftBranch,\n  addRewardConfig,\n  editRewardConfig,\n  deleteRewardConfig,\n}: Props) => {\n  useEffect(() => {\n    updateDraftBranch({\n      ...draftBranch,\n      tier: 1,\n      newUBNCards: {\n        type: 'regular',\n      },\n      treasure: {\n        level: 1,\n        hasTreasure: false,\n      },\n    })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const dataNemeses: aerTypes.Nemesis[] = Object.values(\n    DATA.normalizedData.ENG.nemeses\n  )\n\n  const nemesisOptions = dataNemeses.map((nemesis: aerTypes.Nemesis) => {\n    return {\n      value: nemesis.id,\n      label: nemesis.name,\n    }\n  })\n\n  const dataUpgradedBasicNemesisCardsCards: aerTypes.UpgradedBasicNemesisCard[] = Object.values(\n    DATA.normalizedData.ENG.upgradedBasicNemesisCards\n  )\n\n  const upgradedBasicNemesisCardsOptions = dataUpgradedBasicNemesisCardsCards.map(\n    (upgradedBasicNemesisCard: aerTypes.UpgradedBasicNemesisCard) => {\n      return {\n        value: upgradedBasicNemesisCard.id,\n        label: upgradedBasicNemesisCard.name,\n      }\n    }\n  )\n\n  const treasureLevelOptions: TreasureLevelOptions = [\n    { value: '1', label: 'Level 1' },\n    { value: '2', label: 'Level 2' },\n    { value: '3', label: 'Level 3' },\n  ]\n\n  const treasureLevelDefaultValue =\n    treasureLevelOptions.find(\n      (option) => option.value === draftBranch?.treasure?.level.toString()\n    ) ?? treasureLevelOptions.find((option) => option.value === '1')\n\n  const winConfigs = rewardConfigs.filter(\n    (config: types.BattleRewardConfig) => config.type === 'win'\n  )\n\n  const lossConfigs = rewardConfigs.filter(\n    (config: types.BattleRewardConfig) => config.type === 'loss'\n  )\n\n  const handleBattleTierChange = (event: React.ChangeEvent) => {\n    updateDraftBranch({\n      ...draftBranch,\n      tier: parseInt(\n        (event.target as HTMLInputElement).value\n      ) as aerTypes.NemesisTier,\n    })\n  }\n\n  const handleNemesisIdChange = (selectOption: types.SelectOption) => {\n    updateDraftBranch({\n      ...draftBranch,\n      nemesisId: selectOption.value,\n    })\n  }\n\n  const handleOnLossChange = (event: React.ChangeEvent) => {\n    updateDraftBranch({\n      ...draftBranch,\n      onLoss: (event.currentTarget as HTMLInputElement).checked\n        ? 'skip'\n        : false,\n    })\n  }\n\n  const handleNewUBNCardsTypeChange = (event: React.ChangeEvent) => {\n    updateDraftBranch({\n      ...draftBranch,\n      newUBNCards: {\n        ...draftBranch.newUBNCards,\n        type: (event.target as HTMLInputElement)\n          .value as types.NewUBNCardsTypes,\n      },\n    })\n  }\n\n  const handleAddRandomChange = (event: React.ChangeEvent) => {\n    updateDraftBranch({\n      ...draftBranch,\n      newUBNCards: {\n        ...draftBranch.newUBNCards,\n        addRandom:\n          draftBranch.newUBNCards.type === 'custom'\n            ? null\n            : (event.currentTarget as HTMLInputElement).checked,\n      } as types.NewUBNCardsRegularTyp,\n    })\n  }\n\n  const handleUBNCardIdChange = (selectOptions: types.SelectOptions) => {\n    const selectedUBNCardIds: string[] = selectOptions\n      ? selectOptions.map((option: types.SelectOption) => option.value)\n      : []\n\n    updateDraftBranch({\n      ...draftBranch,\n      newUBNCards: {\n        ...draftBranch.newUBNCards,\n        ids:\n          draftBranch.newUBNCards.type === 'regular'\n            ? null\n            : [...selectedUBNCardIds],\n      } as types.NewUBNCardsCustomTyp,\n    })\n  }\n\n  const handleHasTreasureChange = (event: React.ChangeEvent) => {\n    updateDraftBranch({\n      ...draftBranch,\n      treasure: {\n        ...draftBranch.treasure,\n        hasTreasure: (event.currentTarget as HTMLInputElement).checked,\n        level: (event.currentTarget as HTMLInputElement).checked\n          ? draftBranch.treasure.level\n          : 1,\n      },\n    })\n  }\n\n  const handleTreasureLevelChange = (selectOption: TreasureLevelOption) => {\n    updateDraftBranch({\n      ...draftBranch,\n      treasure: {\n        ...draftBranch.treasure,\n        level: parseInt(selectOption.value) as aerTypes.TreasureLevel,\n      },\n    })\n  }\n\n  const handleSpecialRulesChange = (event: any) => {\n    updateDraftBranch({\n      ...draftBranch,\n      specialRules: event.target.value,\n    })\n  }\n\n  const handleAddRewardConfig = (type: types.BattleRewardConfigType) => {\n    addRewardConfig(type)\n  }\n\n  const handleEditRewardConfig = (config: types.BattleRewardConfig) => {\n    editRewardConfig(config)\n  }\n\n  const handleDeleteRewardConfig = (config: types.BattleRewardConfig) => {\n    deleteRewardConfig(config)\n  }\n\n  const renderRewardConfigs = (configs: types.BattleRewardConfig[]) => {\n    return configs.map((config: types.BattleRewardConfig) => {\n      return (\n        <RewardConfig\n          key={config._id}\n          config={config}\n          handleChange={handleEditRewardConfig}\n          handleDelete={handleDeleteRewardConfig}\n        />\n      )\n    })\n  }\n\n  return (\n    <>\n      <Fieldset legend=\"Battle Tier\" legendVisible>\n        <div className=\"radio-wrapper\">\n          <input\n            type=\"radio\"\n            name=\"battleTier\"\n            id=\"battleTier1\"\n            defaultChecked\n            value=\"1\"\n            onChange={handleBattleTierChange}\n          />\n          <label htmlFor=\"battleTier1\">1</label>\n        </div>\n        <div className=\"radio-wrapper\">\n          <input\n            type=\"radio\"\n            name=\"battleTier\"\n            id=\"battleTier2\"\n            value=\"2\"\n            onChange={handleBattleTierChange}\n          />\n          <label htmlFor=\"battleTier2\">2</label>\n        </div>\n        <div className=\"radio-wrapper\">\n          <input\n            type=\"radio\"\n            name=\"battleTier\"\n            id=\"battleTier3\"\n            value=\"3\"\n            onChange={handleBattleTierChange}\n          />\n          <label htmlFor=\"battleTier3\">3</label>\n        </div>\n        <div className=\"radio-wrapper\">\n          <input\n            type=\"radio\"\n            name=\"battleTier\"\n            id=\"battleTier4\"\n            value=\"4\"\n            onChange={handleBattleTierChange}\n          />\n          <label htmlFor=\"battleTier4\">4</label>\n        </div>\n      </Fieldset>\n      <FormGroupSelect\n        options={nemesisOptions}\n        id=\"selectNemesis\"\n        label=\"Select Nemesis\"\n        onChange={handleNemesisIdChange}\n      />\n      <FormGroupCheckbox\n        id=\"onLoss\"\n        label=\"Skip on loss\"\n        onChange={handleOnLossChange}\n        defaultChecked={draftBranch?.onLoss === 'skip' ?? false}\n      />\n      <FormGroupTextarea\n        id=\"specialRules\"\n        label=\"Special rules\"\n        onChange={handleSpecialRulesChange}\n        defaultValue={draftBranch.specialRules}\n      />\n      <h2>New UBN Cards</h2>\n      <Fieldset legend=\"New UBN Cards\" legendVisible>\n        <div className=\"radio-wrapper\">\n          <input\n            type=\"radio\"\n            name=\"newUBNCardsType\"\n            id=\"newUBNCardsRegular\"\n            defaultChecked\n            value=\"regular\"\n            onChange={handleNewUBNCardsTypeChange}\n          />\n          <label htmlFor=\"newUBNCardsRegular\">regular</label>\n        </div>\n        <div className=\"radio-wrapper\">\n          <input\n            type=\"radio\"\n            name=\"newUBNCardsType\"\n            id=\"newUBNCardsCustom\"\n            value=\"custom\"\n            onChange={handleNewUBNCardsTypeChange}\n          />\n          <label htmlFor=\"newUBNCardsCustom\">custom</label>\n        </div>\n      </Fieldset>\n      {draftBranch?.newUBNCards?.type === 'custom' ? (\n        <FormGroupSelect\n          options={upgradedBasicNemesisCardsOptions}\n          id=\"selectUpgradedBasicNemesisCards\"\n          label=\"Select Upgraded Basic Nemesis Cards\"\n          onChange={handleUBNCardIdChange}\n          isMulti\n        />\n      ) : (\n        <FormGroupCheckbox\n          id=\"addRandom\"\n          label=\"Add random\"\n          onChange={handleAddRandomChange}\n          defaultChecked={draftBranch?.newUBNCards?.addRandom ?? true}\n        />\n      )}\n      <h2>Treasure</h2>\n      <FormGroupCheckbox\n        id=\"hasTreasure\"\n        label=\"Has treasure\"\n        onChange={handleHasTreasureChange}\n        defaultChecked={draftBranch?.treasure?.hasTreasure ?? false}\n      />\n\n      {draftBranch?.treasure?.hasTreasure && (\n        <FormGroupSelect\n          options={treasureLevelOptions}\n          id=\"selectTreasureLevel\"\n          label=\"TreasureLevel\"\n          onChange={handleTreasureLevelChange}\n          defaultValue={treasureLevelDefaultValue}\n        />\n      )}\n\n      <h2>Win rewards</h2>\n      {winConfigs.length !== 0 ? (\n        renderRewardConfigs(winConfigs)\n      ) : (\n        <Button onClick={() => handleAddRewardConfig('win')}>\n          Add reward config\n        </Button>\n      )}\n\n      <h2>Loss rewards</h2>\n      <Button onClick={() => handleAddRewardConfig('loss')}>\n        Add reward config\n      </Button>\n\n      {lossConfigs ? (\n        renderRewardConfigs(lossConfigs)\n      ) : (\n        <p>No loss configs added</p>\n      )}\n    </>\n  )\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(React.memo(BattleBranch))\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport * as types from 'types'\n\nimport { RootState, selectors } from 'Redux/Store'\n\nimport Fieldset from 'components/molecules/Fieldset'\nimport ModalBodyWrapper from 'components/atoms/ModalBodyWrapper'\nimport BaseBranch from './BaseBranch'\nimport NarrativeBranch from './NarrativeBranch'\nimport RewardBranch from './RewardBranch'\nimport BattleBranch from './BattleBranch'\n\nconst mapStateToProps = (state: RootState) => ({\n  draftBranch: selectors.DraftExpedition.SequenceConfig.DraftBranch.getDraftBranchState(\n    state\n  ),\n})\n\ntype Props = ReturnType<typeof mapStateToProps> & {}\n\nconst Body = ({ draftBranch }: Props) => {\n  const renderBranch = (branch: types.Branch) => {\n    switch (branch.type) {\n      case 'narrative': {\n        return (\n          <NarrativeBranch draftBranch={draftBranch as types.NarrativeBranch} />\n        )\n      }\n\n      case 'reward': {\n        return <RewardBranch draftBranch={draftBranch as types.RewardBranch} />\n      }\n\n      case 'battle': {\n        return <BattleBranch draftBranch={draftBranch as types.BattleBranch} />\n      }\n\n      default: {\n        return <></>\n      }\n    }\n  }\n\n  return (\n    <ModalBodyWrapper>\n      <Fieldset legend=\"Branches\">\n        <BaseBranch draftBranch={draftBranch as types.BranchBase} />\n\n        {renderBranch(draftBranch as types.Branch)}\n      </Fieldset>\n    </ModalBodyWrapper>\n  )\n}\n\nexport default connect(mapStateToProps)(React.memo(Body))\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { RootState, selectors, actions } from 'Redux/Store'\n\nimport * as types from 'types'\n\nimport Button from 'components/atoms/Button'\n\nconst mapStateToProps = (state: RootState) => ({\n  draftBranch: selectors.DraftExpedition.SequenceConfig.DraftBranch.getDraftBranchState(\n    state\n  ),\n  draftRewardConfigs: selectors.DraftExpedition.SequenceConfig.DraftRewardConfig.getDraftRewardConfigArray(\n    state\n  ),\n  draftRewardSupplyCards: selectors.DraftExpedition.SequenceConfig.DraftRewardSupplyCard.getDraftRewardSupplyCardArray(\n    state\n  ),\n})\n\nconst mapDispatchToProps = {\n  addBranch: actions.DraftExpedition.SequenceConfig.Branches.addBranch,\n  clearDraftBranch:\n    actions.DraftExpedition.SequenceConfig.DraftBranch.clearDraftBranch,\n  clearDraftRewardConfig:\n    actions.DraftExpedition.SequenceConfig.DraftRewardConfig\n      .clearDraftRewardConfig,\n  clearDraftRewardSupplyCards:\n    actions.DraftExpedition.SequenceConfig.DraftRewardSupplyCard\n      .clearDraftRewardSupplyCard,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> &\n  typeof mapDispatchToProps & {\n    modal: any\n  }\n\nconst Footer = ({\n  modal,\n  draftBranch,\n  draftRewardConfigs,\n  draftRewardSupplyCards,\n  addBranch,\n  clearDraftBranch,\n  clearDraftRewardConfig,\n  clearDraftRewardSupplyCards,\n}: Props) => {\n  const handleAddBranch = () => {\n    const winRewards = draftRewardConfigs.find(\n      (config: types.BattleRewardConfig) => config.type === 'win'\n    )\n\n    const lossRewards = draftRewardConfigs.filter(\n      (config: types.BattleRewardConfig) => config.type === 'loss'\n    )\n\n    const newBranch = {\n      ...draftBranch,\n      supply: {\n        ...(draftBranch as types.RewardBranch).supply,\n        blueprints: [\n          ...draftRewardSupplyCards.filter(\n            (card: types.Blueprint) => card.configId === undefined\n          ),\n        ],\n      },\n      winRewards: {\n        ...winRewards,\n        supply: {\n          ...winRewards?.supply,\n          blueprints: [\n            ...draftRewardSupplyCards.filter((card: types.Blueprint) => {\n              return card.configId === winRewards?._id\n            }),\n          ],\n        },\n      },\n      lossRewards: [\n        ...lossRewards.map((reward: types.BattleRewardConfig) => {\n          return {\n            ...reward,\n            supply: {\n              ...reward?.supply,\n              blueprints: [\n                ...draftRewardSupplyCards.filter((card: types.Blueprint) => {\n                  return card.configId === reward?._id\n                }),\n              ],\n            },\n          }\n        }),\n      ],\n    }\n\n    addBranch({\n      ...(newBranch as types.Branch),\n    })\n    clearDraftBranch()\n    clearDraftRewardConfig()\n    clearDraftRewardSupplyCards()\n    modal.hide()\n  }\n\n  const handleCancel = () => {\n    clearDraftBranch()\n    clearDraftRewardConfig()\n    clearDraftRewardSupplyCards()\n    modal.hide()\n  }\n\n  return (\n    <>\n      <Button onClick={handleCancel}>Cancel</Button>\n      <Button onClick={handleAddBranch}>Add branch</Button>\n    </>\n  )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(Footer))\n","import React from 'react'\n\nimport * as types from 'types'\n\nimport Body from './Body'\nimport Footer from './Footer'\n\ntype Props = {\n  modal: types.Modal\n}\n\nconst AddBranchModal = ({\n  modal,\n}: Props) => {\n\n  return (\n    <modal.RenderModal\n      titleLabel=\"Add branch\"\n      footer={<Footer modal={modal} />}>\n      <Body />\n    </modal.RenderModal>\n  )\n}\n\nexport default React.memo(AddBranchModal)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport * as types from 'types'\n\nimport { RootState, selectors, actions } from 'Redux/Store'\n\nimport { useModal } from 'hooks/useModal'\n\nimport Accordion from 'components/organisms/Accordion'\nimport Button from 'components/atoms/Button'\nimport AddBranchModal from './AddBranchModal'\n\nconst mapStateToProps = (state: RootState) => ({\n  branches: selectors.DraftExpedition.SequenceConfig.Branches.getBranches(\n    state\n  ),\n})\n\nconst mapDispatchToProps = {\n  draftAddBranch:\n    actions.DraftExpedition.SequenceConfig.DraftBranch.draftAddBranch,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps & {}\n\nconst Branches = ({ branches, draftAddBranch }: Props) => {\n  const addBranchModal = useModal()\n\n  const handleAddBranch = () => {\n    addBranchModal.show()\n    draftAddBranch()\n  }\n\n  return (\n    <Accordion id=\"branches\" title=\"Branches\" open>\n      <Button\n        type=\"button\"\n        style={{ display: 'block' }}\n        onClick={handleAddBranch}\n      >\n        Add branch\n      </Button>\n      <AddBranchModal modal={addBranchModal} />\n\n      {branches.length > 0 ? (\n        <ul>\n          {branches.map((branch: types.Branch) => {\n            switch (branch.type) {\n              case 'narrative': {\n                const narrativeBranch = branch as types.NarrativeBranch\n\n                return (\n                  <li key={branch.id}>\n                    <p>Id: {branch.id}</p>\n                    <p>Type: {branch.type}</p>\n                    {narrativeBranch.text && (\n                      <p>Text: {narrativeBranch.text}</p>\n                    )}\n                    {narrativeBranch.decisions ? (\n                      <>\n                        <p>Desicions:</p>\n                        <ul>\n                          {narrativeBranch.decisions.map(\n                            (decision: types.Decision) => (\n                              <li key={decision._id}>{decision.text}</li>\n                            )\n                          )}\n                        </ul>\n                      </>\n                    ) : (\n                      <p>No Desicions</p>\n                    )}\n                  </li>\n                )\n              }\n\n              case 'reward': {\n                const rewardBranch = branch as types.RewardBranch\n\n                return (\n                  <li key={branch.id}>\n                    <p>Id: {branch.id}</p>\n                    <p>Type: {branch.type}</p>\n                    {rewardBranch.rewardType && (\n                      <p>Reward type: {rewardBranch.rewardType}</p>\n                    )}\n                  </li>\n                )\n              }\n\n              case 'battle': {\n                const battleBranch = branch as types.BattleBranch\n\n                return (\n                  <li key={branch.id}>\n                    <p>Id: {branch.id}</p>\n                    <p>Type: {branch.type}</p>\n                    <p>Tier: {battleBranch.tier}</p>\n                    {battleBranch.nemesisId && (\n                      <p>Nemesis: {battleBranch.nemesisId}</p>\n                    )}\n                  </li>\n                )\n              }\n\n              default: {\n                return (\n                  <li key={branch.id}>\n                    <p>Id: {branch.id}</p>\n                    <p>Type: {branch.type}</p>\n                  </li>\n                )\n              }\n            }\n          })}\n        </ul>\n      ) : (\n        <p>No branches added</p>\n      )}\n    </Accordion>\n  )\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(React.memo(Branches))\n","const copyToClipboard = (json: string) => {\n  window.navigator.clipboard.writeText(json)\n}\n\nexport default copyToClipboard\n","import { saveAs } from 'file-saver'\n\nconst saveToFile = (json: string, name: string) => {\n  const blob = new Blob([json], { type: 'text/json;charset=utf-8' })\n\n  return saveAs(blob, `${name}.json`)\n}\n\nexport default saveToFile\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  width: 50%;\n  padding: 0 0 0 32px;\n\n  @media all and (max-width: 920px) {\n    width: 100%;\n    padding: 32px 0 0 0;\n  }\n`\n\nexport default Wrapper\n","import styled from 'styled-components/macro'\n\nconst Pre = styled('pre')`\n  padding: 24px;\n  border: 1px solid #dadada;\n  background: #fafafa;\n`\n\nexport default Pre\n\n\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport * as types from 'types'\n\nimport { RootState, selectors } from 'Redux/Store'\n\nimport { saveToFile, copyToClipboard } from 'helpers'\n\nimport Button from 'components/atoms/Button'\nimport Wrapper from './__styled__/Wrapper'\nimport Pre from './__styled__/Pre'\n\nconst mapStateToProps = (state: RootState) => ({\n  name: selectors.DraftExpedition.Name.getExpeditionName(state),\n  bigPocketVariantConfig: selectors.DraftExpedition.BigPocketVariantConfig.getBigPocketVariantConfig(\n    state\n  ),\n  branches: selectors.DraftExpedition.SequenceConfig.Branches.getBranches(\n    state\n  ),\n})\n\ntype Props = ReturnType<typeof mapStateToProps> & {\n  fileName?: string\n}\n\nconst Preview = ({\n  fileName = 'expedition',\n  name,\n  bigPocketVariantConfig,\n  branches,\n}: Props) => {\n  const dataBranches = branches.reduce((branches, branch: types.Branch) => {\n    switch (branch.type) {\n      case 'narrative': {\n        const narrativeBranch = branch as types.NarrativeBranch\n\n        const newBranch = {\n          type: branch.type,\n          config: {\n            text: narrativeBranch.text,\n            decisions: narrativeBranch.decisions\n              ? narrativeBranch.decisions.map((decision) => decision.text)\n              : false,\n          },\n        }\n\n        return {\n          ...branches,\n          [branch.id]: newBranch,\n        }\n      }\n\n      case 'reward': {\n        const rewardBranch = branch as types.RewardBranch\n\n        const newBranch = {\n          type: branch.type,\n          config: {\n            type: rewardBranch.rewardType,\n          },\n        }\n\n        const randomTreasuresTier1 =\n          rewardBranch.treasure.tier1 !== 0\n            ? Array(rewardBranch.treasure.tier1).fill({\n                random: true,\n                level: 1,\n              })\n            : []\n\n        const randomTreasuresTier2 =\n          rewardBranch.treasure.tier2 !== 0\n            ? Array(rewardBranch.treasure.tier2).fill({\n                random: true,\n                level: 2,\n              })\n            : []\n\n        const randomTreasuresTier3 =\n          rewardBranch.treasure.tier3 !== 0\n            ? Array(rewardBranch.treasure.tier3).fill({\n                random: true,\n                level: 3,\n              })\n            : []\n\n        if (\n          rewardBranch.treasure.ids.length > 0 ||\n          randomTreasuresTier1.length > 0 ||\n          randomTreasuresTier2.length > 0 ||\n          randomTreasuresTier3.length > 0\n        ) {\n          Object.assign(newBranch.config, {\n            treasure: {\n              ids: [\n                ...rewardBranch.treasure.ids,\n                ...randomTreasuresTier1,\n                ...randomTreasuresTier2,\n                ...randomTreasuresTier3,\n              ],\n            },\n          })\n        }\n\n        const randomMageAmount =\n          rewardBranch.mage.randomAmount !== 0\n            ? Array(rewardBranch.mage.randomAmount).fill({\n                random: true,\n              })\n            : []\n\n        if (rewardBranch.mage.ids.length > 0 || randomMageAmount.length > 0) {\n          Object.assign(newBranch.config, {\n            mage: {\n              ids: [...rewardBranch.mage.ids, ...randomMageAmount],\n            },\n          })\n        }\n\n        if (\n          rewardBranch.supply.ids.length > 0 ||\n          rewardBranch.supply.blueprints.length > 0\n        ) {\n          const blueprints = rewardBranch.supply.blueprints.map(\n            (blueprint: types.Blueprint) => {\n              return {\n                type: blueprint.type,\n                operation: blueprint.operation,\n                threshold: blueprint.threshold,\n                values: blueprint.values,\n              }\n            }\n          )\n\n          Object.assign(newBranch.config, {\n            supply: {\n              ids: [...rewardBranch.supply.ids, ...blueprints],\n              bigPocket: rewardBranch.supply.bigPocket,\n            },\n          })\n        }\n\n        return {\n          ...branches,\n          [branch.id]: newBranch,\n        }\n      }\n\n      case 'battle': {\n        const battleBranch = branch as types.BattleBranch\n\n        const newBranch = {\n          type: branch.type,\n          config: {\n            tier: battleBranch.tier,\n            newUBNCards: battleBranch.newUBNCards,\n            treasure: {\n              level: battleBranch.treasure.level,\n              hasTreasure: battleBranch.treasure.hasTreasure,\n            },\n          },\n        }\n\n        battleBranch.nemesisId &&\n          Object.assign(newBranch.config, {\n            nemesisId: battleBranch.nemesisId,\n          })\n\n        battleBranch.specialRules &&\n          Object.assign(newBranch.config, {\n            specialRules: battleBranch.specialRules,\n          })\n\n        battleBranch.onLoss &&\n          Object.assign(newBranch.config, {\n            onLoss: battleBranch.onLoss,\n          })\n\n        if (battleBranch?.winRewards?.hasOwnProperty('rewardType')) {\n          const winRewardTreasure = {}\n          const winRewardMage = {}\n          const winRewardSupply = {}\n\n          const winRewardTreasureIds =\n            battleBranch.winRewards?.treasure?.ids ?? []\n\n          const winRewardRandomTreasuresTier1 =\n            battleBranch.winRewards?.treasure?.tier1 &&\n            battleBranch.winRewards?.treasure?.tier1 !== 0\n              ? Array(battleBranch.winRewards.treasure.tier1).fill({\n                  random: true,\n                  level: 1,\n                })\n              : []\n\n          const winRewardRandomTreasuresTier2 =\n            battleBranch.winRewards?.treasure?.tier2 &&\n            battleBranch.winRewards?.treasure?.tier2 !== 0\n              ? Array(battleBranch.winRewards.treasure.tier2).fill({\n                  random: true,\n                  level: 2,\n                })\n              : []\n\n          const winRewardRandomTreasuresTier3 =\n            battleBranch.winRewards?.treasure?.tier3 &&\n            battleBranch.winRewards?.treasure?.tier3 !== 0\n              ? Array(battleBranch.winRewards.treasure.tier3).fill({\n                  random: true,\n                  level: 3,\n                })\n              : []\n\n          if (\n            winRewardTreasureIds.length > 0 ||\n            winRewardRandomTreasuresTier1.length > 0 ||\n            winRewardRandomTreasuresTier2.length > 0 ||\n            winRewardRandomTreasuresTier3.length > 0\n          ) {\n            Object.assign(winRewardTreasure, {\n              ids: [\n                ...winRewardTreasureIds,\n                ...winRewardRandomTreasuresTier1,\n                ...winRewardRandomTreasuresTier2,\n                ...winRewardRandomTreasuresTier3,\n              ],\n            })\n          }\n\n          const winRewardMageIds = battleBranch.winRewards?.mage?.ids ?? []\n\n          const winRewardRandomMageAmount =\n            battleBranch.winRewards?.mage?.randomAmount &&\n            battleBranch.winRewards?.mage?.randomAmount !== 0\n              ? Array(battleBranch.winRewards.mage.randomAmount).fill({\n                  random: true,\n                })\n              : []\n\n          if (\n            winRewardMageIds.length > 0 ||\n            winRewardRandomMageAmount.length > 0\n          ) {\n            Object.assign(winRewardMage, {\n              ids: [...winRewardMageIds, ...winRewardRandomMageAmount],\n            })\n          }\n\n          const winRewardSupplyIds = battleBranch.winRewards?.supply?.ids ?? []\n          const winRewardSupplyBlueprints =\n            battleBranch.winRewards?.supply?.blueprints ?? []\n          const winRewardSupplyBigPocket =\n            battleBranch.winRewards?.supply?.bigPocket ?? false\n\n          if (\n            winRewardSupplyIds.length > 0 ||\n            winRewardSupplyBlueprints.length > 0\n          ) {\n            const blueprints = winRewardSupplyBlueprints.map(\n              (blueprint: types.Blueprint) => {\n                return {\n                  type: blueprint.type,\n                  operation: blueprint.operation,\n                  threshold: blueprint.threshold,\n                  values: blueprint.values,\n                }\n              }\n            )\n\n            Object.assign(winRewardSupply, {\n              ids: [...winRewardSupplyIds, ...blueprints],\n              bigPocket: winRewardSupplyBigPocket,\n            })\n          }\n\n          Object.assign(newBranch.config, {\n            winRewards:\n              Object.keys(battleBranch.winRewards).length > 0\n                ? {\n                    type: battleBranch.winRewards.rewardType,\n                    treasure:\n                      Object.keys(winRewardTreasure).length > 0\n                        ? winRewardTreasure\n                        : undefined,\n                    mage:\n                      Object.keys(winRewardMage).length > 0\n                        ? winRewardMage\n                        : undefined,\n                    supply:\n                      Object.keys(winRewardSupply).length > 0\n                        ? winRewardSupply\n                        : undefined,\n                  }\n                : undefined,\n          })\n        }\n\n        battleBranch.lossRewards &&\n          Object.assign(newBranch.config, {\n            lossRewards:\n              battleBranch.lossRewards.length > 0\n                ? battleBranch.lossRewards.map(\n                    (lossReward: types.RewardConfig) => {\n                      const lossRewardTreasure = {}\n                      const lossRewardMage = {}\n                      const lossRewardSupply = {}\n\n                      const lossRewardTreasureIds =\n                        lossReward?.treasure?.ids ?? []\n\n                      const lossRewardRandomTreasuresTier1 =\n                        lossReward?.treasure?.tier1 &&\n                        lossReward?.treasure?.tier1 !== 0\n                          ? Array(lossReward.treasure.tier1).fill({\n                              random: true,\n                              level: 1,\n                            })\n                          : []\n\n                      const lossRewardRandomTreasuresTier2 =\n                        lossReward?.treasure?.tier2 &&\n                        lossReward?.treasure?.tier2 !== 0\n                          ? Array(lossReward.treasure.tier2).fill({\n                              random: true,\n                              level: 2,\n                            })\n                          : []\n\n                      const lossRewardRandomTreasuresTier3 =\n                        lossReward?.treasure?.tier3 &&\n                        lossReward?.treasure?.tier3 !== 0\n                          ? Array(lossReward.treasure.tier3).fill({\n                              random: true,\n                              level: 3,\n                            })\n                          : []\n\n                      if (\n                        lossRewardTreasureIds.length > 0 ||\n                        lossRewardRandomTreasuresTier1.length > 0 ||\n                        lossRewardRandomTreasuresTier2.length > 0 ||\n                        lossRewardRandomTreasuresTier3.length > 0\n                      ) {\n                        Object.assign(lossRewardTreasure, {\n                          ids: [\n                            ...lossRewardTreasureIds,\n                            ...lossRewardRandomTreasuresTier1,\n                            ...lossRewardRandomTreasuresTier2,\n                            ...lossRewardRandomTreasuresTier3,\n                          ],\n                        })\n                      }\n\n                      const lossRewardMageIds = lossReward?.mage?.ids ?? []\n\n                      const lossRewardRandomMageAmount =\n                        lossReward?.mage?.randomAmount &&\n                        lossReward?.mage?.randomAmount !== 0\n                          ? Array(lossReward.mage.randomAmount).fill({\n                              random: true,\n                            })\n                          : []\n\n                      if (\n                        lossRewardMageIds.length > 0 ||\n                        lossRewardRandomMageAmount.length > 0\n                      ) {\n                        Object.assign(lossRewardMage, {\n                          ids: [\n                            ...lossRewardMageIds,\n                            ...lossRewardRandomMageAmount,\n                          ],\n                        })\n                      }\n\n                      const lossRewardSupplyIds = lossReward?.supply?.ids ?? []\n                      const lossRewardSupplyBlueprints =\n                        lossReward?.supply?.blueprints ?? []\n                      const lossRewardSupplyBigPocket =\n                        lossReward?.supply?.bigPocket ?? false\n\n                      if (\n                        lossRewardSupplyIds.length > 0 ||\n                        lossRewardSupplyBlueprints.length > 0\n                      ) {\n                        const blueprints = lossRewardSupplyBlueprints.map(\n                          (blueprint: types.Blueprint) => {\n                            return {\n                              type: blueprint.type,\n                              operation: blueprint.operation,\n                              threshold: blueprint.threshold,\n                              values: blueprint.values,\n                            }\n                          }\n                        )\n\n                        Object.assign(lossRewardSupply, {\n                          ids: [...lossRewardSupplyIds, ...blueprints],\n                          bigPocket: lossRewardSupplyBigPocket,\n                        })\n                      }\n\n                      return {\n                        type: lossReward.rewardType,\n                        treasure:\n                          Object.keys(lossRewardTreasure).length > 0\n                            ? lossRewardTreasure\n                            : undefined,\n                        mage:\n                          Object.keys(lossRewardMage).length > 0\n                            ? lossRewardMage\n                            : undefined,\n                        supply:\n                          Object.keys(lossRewardSupply).length > 0\n                            ? lossRewardSupply\n                            : undefined,\n                      }\n                    }\n                  )\n                : undefined,\n          })\n\n        return {\n          ...branches,\n          [branch.id]: newBranch,\n        }\n      }\n\n      default: {\n        return {\n          ...branches,\n          [branch.id]: {\n            type: branch.type,\n          },\n        }\n      }\n    }\n  }, {})\n\n  const data = {\n    name: name,\n    bigPocketVariantConfig: bigPocketVariantConfig,\n    sequenceConfig: {\n      branches: dataBranches,\n    },\n  }\n\n  const handleCopyToClipboard = () => {\n    copyToClipboard(JSON.stringify(data, null, '  '))\n  }\n\n  const handleSave = () => {\n    saveToFile(JSON.stringify(data, null, '  '), fileName)\n  }\n\n  return (\n    <Wrapper>\n      <Pre>{JSON.stringify(data, null, '  ')}</Pre>\n\n      <Button type=\"button\" onClick={handleCopyToClipboard}>\n        Copy to clipboard\n      </Button>\n      <Button type=\"button\" onClick={handleSave}>\n        Save to file\n      </Button>\n    </Wrapper>\n  )\n}\n\nexport default connect(mapStateToProps)(React.memo(Preview))\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  display: flex;\n\n  @media all and (max-width: 920px) {\n    flex-direction: column;\n  }\n`\n\nexport default Wrapper\n","import styled from 'styled-components/macro'\n\nconst Form = styled('form')`\n  width: 50%;\n\n  @media all and (max-width: 920px) {\n    width: 100%;\n  }\n`\n\nexport default Form\n","import React from 'react'\n\nimport BasicInformation from 'components/templates/BasicInformation'\nimport Branches from 'components/templates/Branches'\nimport Preview from 'components/molecules/Preview'\n\nimport Wrapper from './__styled__/Wrapper'\nimport Form from './__styled__/Form'\n\nconst Configurator = () => {\n\n  return (\n    <Wrapper>\n      <Form>\n        <BasicInformation />\n        <Branches />\n      </Form>\n\n      <Preview />\n    </Wrapper>\n  )\n}\n\nexport default React.memo(Configurator)\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  padding: 32px;\n`\n\nexport default Wrapper\n","import React from 'react'\n\nimport H1 from 'components/atoms/H1'\nimport Configurator from 'components/molecules/Configurator'\nimport Wrapper from './__styled__/Wrapper'\n\nconst MainApp = () => {\n  return (\n    <Wrapper>\n      <H1>AER: Custom Expedition Editor</H1>\n      <Configurator />\n      <div id=\"modal-root\" />\n    </Wrapper>\n  )\n}\n\nexport default MainApp\n","import React from 'react'\n\nimport { ThemeProvider } from 'styled-components/macro'\n\nimport GlobalStyle from 'GlobalStyle'\nimport mainTheme from 'themes/main'\n\nimport MainApp from './MainApp'\n\nconst App = () => (\n  <ThemeProvider theme={mainTheme}>\n    <GlobalStyle />\n    <MainApp />\n  </ThemeProvider>\n)\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport configureStore from './Redux/configureStore'\nimport { initialState } from './Redux/Store'\n\nimport * as serviceWorker from './serviceWorker'\n\nimport App from './components/App'\n\nconst store = configureStore(initialState)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport { install, StoreCreator } from 'redux-loop'\n\nimport { RootReducer, RootState } from './Store'\n\nconst configureStore = (initialState: RootState) => {\n  // Add middleware to this array if necessary\n  const middleWares: any[] = []\n\n  const enhancers = [applyMiddleware(...middleWares), install<RootState>()]\n\n  const composeEnhancers =\n    process.env.NODE_ENV !== 'production' &&\n    typeof window === 'object' &&\n    // @ts-ignore\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      // @ts-ignore\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      : compose\n\n  const enhancedCreateStore = createStore as StoreCreator\n  const store = enhancedCreateStore(\n    RootReducer,\n    initialState,\n    composeEnhancers(...enhancers)\n  )\n\n  return store\n}\n\nexport { configureStore as default }\n"],"sourceRoot":""}