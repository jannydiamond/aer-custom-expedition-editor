{"version":3,"sources":["Redux/Store/index.ts","serviceWorker.ts","themes/main/index.ts","components/atoms/Label.tsx","components/atoms/Button.tsx","components/App/Form.tsx","components/App/MainApp.tsx","components/App/index.tsx","index.tsx","Redux/configureStore.ts"],"names":["RootReducer","reduceReducers","combineReducers","Boolean","window","location","hostname","match","mainTheme","colors","Label","styled","Button","initialState","name","bigPocketVariantConfig","Form","useForm","handleSubmit","register","errors","useState","formState","setFormState","onSubmit","htmlFor","id","ref","required","message","type","JSON","stringify","onClick","json","blob","Blob","navigator","clipboard","writeText","saveAs","saveToFile","MainApp","App","theme","store","enhancers","applyMiddleware","install","composeEnhancers","compose","enhancedCreateStore","createStore","configureStore","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"yPAYaA,EAAcC,YACzBC,YAA2B,KCDTC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCdSC,EAJG,CAChBC,OAAQ,I,uBCKKC,EAJDC,YAAO,SAAV,wDAAGA,CAAH,oBCIIC,EAJAD,YAAO,UAAV,yDAAGA,CAAH,oBCUNE,EAAyB,CAC7BC,KAAM,GACNC,wBAAwB,GA0EXC,EAvEF,WAAO,IAAD,EAC0BC,cAAnCC,EADS,EACTA,aAAcC,EADL,EACKA,SAAUC,EADf,EACeA,OADf,EAEmBC,mBAAmBR,GAFtC,mBAETS,EAFS,KAEEC,EAFF,KA4BjB,OACE,oCACE,0BAAMC,SAAUN,GAfH,SAAC,GAAgD,IAA9CJ,EAA6C,EAA7CA,KAAMC,EAAuC,EAAvCA,uBAMxBQ,EALa,CACXT,KAAMA,EACNC,uBAAwBA,QAatB,kCACE,qDACA,kBAAC,EAAD,CAAOU,QAAQ,QAAf,mBACA,2BACEC,GAAG,OACHZ,KAAK,OACLa,IAAKR,EAAS,CACZS,SAAU,eAGbR,EAAON,MAAQM,EAAON,KAAKe,QAC5B,kBAAC,EAAD,CAAOJ,QAAQ,0BACb,2BACEC,GAAG,yBACHI,KAAK,WACLhB,KAAK,yBACLa,IAAKR,IALT,mBAUCC,EAAOL,wBAA0BK,EAAOL,uBAAuBc,SAIlE,kBAAC,EAAD,CAAQC,KAAK,UAAb,WAEF,6BACE,8BACI,6BACGC,KAAKC,UAAUV,EAAW,KAAM,QAIvC,4BAAQQ,KAAK,SAASG,QAzCT,YApBA,SAACC,EAAcpB,GAChC,IAAMqB,EAAO,IAAIC,KAAK,CAACF,GAAO,CAAEJ,KAAM,4BAKtC1B,OAAOiC,UAAUC,UAAUC,UAAUL,GAE9BM,iBAAOL,EAAD,UAAUrB,EAAV,UAab2B,CAAWV,KAAKC,UAAUV,EAAW,KAAM,MAAO,sBAwC9C,WCrEOoB,EATC,WACd,OACE,oCACE,6DACA,kBAAC,EAAD,QCMSC,EANH,kBACV,kBAAC,IAAD,CAAeC,MAAOpC,GACpB,kBAAC,EAAD,QCCEqC,ECNiB,SAAChC,GAEtB,IAEMiC,EAAY,CAACC,IAAe,WAAf,EAFQ,IAEyBC,eAE9CC,EAOAC,IASN,OANcC,EADcC,KAE1BpD,EACAa,EACAoC,EAAgB,WAAhB,EAAoBH,IDbVO,CRLc,IQO5BC,IAASC,OACP,kBAAC,IAAD,CAAUV,MAAOA,GACf,kBAAC,EAAD,OAEFW,SAASC,eAAe,SP0HpB,kBAAmBpB,WACrBA,UAAUqB,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMnC,c","file":"static/js/main.d5ff059f.chunk.js","sourcesContent":["import { combineReducers, reduceReducers } from 'redux-loop'\n\nexport type RootState = {\n\n}\n\nexport const initialState = {}\n\nexport const actions = {\n\n}\n\nexport const RootReducer = reduceReducers(\n  combineReducers<RootState>({\n    \n  })\n)\n\nexport const selectors = {\n\n}\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const mainTheme = {\n  colors: {}\n}\n\nexport default mainTheme\n","import styled from 'styled-components/macro'\n\nconst Label = styled('label')`\n  display: block;\n`\n\nexport default Label\n","import styled from 'styled-components/macro'\n\nconst Button = styled('button')`\n  margin: 24px 0;\n`\n\nexport default Button\n","import React, { useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { saveAs } from 'file-saver'\n\nimport Label from 'components/atoms/Label'\nimport Button from 'components/atoms/Button'\n\ntype FormData = {\n  name: string,\n  bigPocketVariantConfig: boolean\n}\n\nconst initialState: FormData = {\n  name: '',\n  bigPocketVariantConfig: false\n}\n\nconst Form = () => {\n  const { handleSubmit, register, errors } = useForm<FormData>()\n  const [ formState, setFormState ] = useState<FormData>(initialState)\n\n  const saveToFile = (json: string, name: string) => {\n    const blob = new Blob([json], { type: 'text/json;charset=utf-8' })\n\n    // We additionally copy the text to the clipboard, so that\n    // users with browsers where saveAs does not work still have an\n    // option to get the text\n    window.navigator.clipboard.writeText(json)\n\n    return saveAs(blob, `${name}.json`)\n  }\n\n  const onSubmit = ({ name, bigPocketVariantConfig }: FormData) => {\n    const data = {\n      name: name,\n      bigPocketVariantConfig: bigPocketVariantConfig\n    }\n\n    setFormState(data)\n  }\n\n  const handleSave = () => {\n    saveToFile(JSON.stringify(formState, null, '  '), 'customExpedition')\n  }\n\n  return (\n    <>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <fieldset>\n          <legend>Basic Information</legend>\n          <Label htmlFor=\"name\">Expedition Name</Label>\n          <input\n            id=\"name\"\n            name=\"name\"\n            ref={register({\n              required: 'Required'\n            })}\n          />\n          {errors.name && errors.name.message}\n          <Label htmlFor=\"bigPocketVariantConfig\">\n            <input\n              id=\"bigPocketVariantConfig\"\n              type=\"checkbox\"\n              name=\"bigPocketVariantConfig\"\n              ref={register}\n            />\n            Big Pocket Mode\n          </Label>\n          \n          {errors.bigPocketVariantConfig && errors.bigPocketVariantConfig.message}\n        </fieldset>\n        \n\n        <Button type=\"submit\">Submit</Button>\n      </form>\n      <div>\n        <code>\n            <pre>\n              {JSON.stringify(formState, null, '  ')}\n            </pre>\n        </code>\n\n        <button type=\"button\" onClick={handleSave}>Save</button>\n      </div>\n    </>\n  )\n}\n\nexport default Form\n","import React from 'react'\n\nimport Form from './Form'\n\nconst MainApp = () => {\n  return (\n    <>\n      <h1>AER: Custom Expedition Editor</h1>\n      <Form />\n    </>\n  )\n}\n\nexport default MainApp\n","import React from 'react'\n\nimport { ThemeProvider } from 'styled-components/macro'\n\nimport mainTheme from 'themes/main'\n\nimport MainApp from './MainApp'\n\nconst App = () => (\n  <ThemeProvider theme={mainTheme}>\n    <MainApp />\n  </ThemeProvider>\n)\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport configureStore from './Redux/configureStore'\nimport { initialState } from './Redux/Store'\n\nimport * as serviceWorker from './serviceWorker'\n\nimport App from './components/App'\n\nconst store = configureStore(initialState)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport { install, StoreCreator } from 'redux-loop'\n\nimport { RootReducer, RootState } from './Store'\n\nconst configureStore = (initialState: RootState) => {\n  // Add middleware to this array if necessary\n  const middleWares: any[] = []\n\n  const enhancers = [applyMiddleware(...middleWares), install<RootState>()]\n\n  const composeEnhancers =\n    process.env.NODE_ENV !== 'production' &&\n    typeof window === 'object' &&\n    // @ts-ignore\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      // @ts-ignore\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      : compose\n\n  const enhancedCreateStore = createStore as StoreCreator\n  const store = enhancedCreateStore(\n    RootReducer,\n    initialState,\n    composeEnhancers(...enhancers)\n  )\n\n  return store\n}\n\nexport { configureStore as default }\n"],"sourceRoot":""}