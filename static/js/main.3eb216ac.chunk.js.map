{"version":3,"sources":["Redux/Store/DraftExpedition/Name/index.ts","Redux/Store/DraftExpedition/BigPocketVariantConfig/index.ts","Redux/Store/DraftExpedition/SequenceConfig/Branches/index.ts","Redux/Store/DraftExpedition/SequenceConfig/index.ts","Redux/Store/DraftExpedition/index.ts","Redux/Store/index.ts","serviceWorker.ts","GlobalStyle.ts","themes/main/index.ts","components/atoms/H1.tsx","components/organisms/Accordion/__styled__/Wrapper.tsx","components/organisms/Accordion/__styled__/Header.tsx","components/atoms/Button.tsx","components/organisms/Accordion/__styled__/Summary.tsx","components/organisms/Accordion/__styled__/Content.tsx","components/organisms/Accordion/__styled__/SummaryIcon.tsx","components/organisms/Accordion/index.tsx","components/atoms/ScreenReaderOnlyText.tsx","components/molecules/Fieldset/__styled__/Wrapper.tsx","components/molecules/Fieldset/__styled__/Legend.tsx","components/molecules/Fieldset/index.tsx","components/atoms/Label.tsx","components/atoms/Input.tsx","components/molecules/FormGroupInputText/__styled__/Wrapper.tsx","components/molecules/FormGroupInputText/index.tsx","components/molecules/FormGroupCheckbox/__styled__/Wrapper.tsx","components/molecules/FormGroupCheckbox/index.tsx","components/templates/BasicInformation/index.tsx","components/organisms/Modal/Wrapper.tsx","components/organisms/Modal/Backdrop.tsx","components/organisms/Modal/Content.tsx","components/organisms/Modal/Header.tsx","components/organisms/Modal/Body.tsx","components/atoms/H2.tsx","components/organisms/Modal/Title.tsx","components/organisms/Modal/CloseButton.tsx","components/organisms/Modal/Footer.tsx","components/organisms/Modal/index.tsx","components/atoms/ModalBodyWrapper.tsx","components/atoms/ModalFooterWrapper.tsx","hooks/useModal.tsx","components/organisms/Prompt/index.tsx","components/atoms/Select.tsx","components/templates/Branches/AddBranchModal/Body.tsx","components/templates/Branches/AddBranchModal/Footer.tsx","components/templates/Branches/AddBranchModal/index.tsx","components/templates/Branches/index.tsx","helpers/copyToClipboard.ts","helpers/saveToFile.ts","components/molecules/Preview/__styled__/Wrapper.tsx","components/molecules/Preview/__styled__/Pre.tsx","components/molecules/Preview/index.tsx","components/molecules/Configurator/__styled__/Wrapper.tsx","components/molecules/Configurator/__styled__/Form.tsx","components/molecules/Configurator/index.tsx","components/App/__styled__/Wrapper.tsx","components/App/MainApp.tsx","components/App/index.tsx","index.tsx","Redux/configureStore.ts"],"names":["ActionTypes","actions","noOp","createAction","setExpeditionName","name","SET_EXPEDITION_NAME","selectors","getExpeditionName","state","DraftExpedition","Name","setBigPocketVariantConfig","value","SET_BIG_POCKET_VARIANT_CONFIG","getBigPocketVariantConfig","BigPocketVariantConfig","initialState","addBranch","branch","ADD_BRANCH","getBranchesState","SequenceConfig","Branches","getBranchIds","createSelector","branches","Object","keys","getBranches","values","Reducer","combineReducers","action","type","payload","id","nextBranchId","RootReducer","reduceReducers","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","mainTheme","colors","H1","styled","Wrapper","Header","Button","Summary","Content","SummaryIcon","React","memo","title","open","children","useState","isOpen","setIsOpen","aria-expanded","aria-controls","onClick","className","role","aria-labelledby","hidden","ScreenReaderOnlyText","Legend","legend","legendVisible","Label","Input","label","labelHidden","onChange","defaultValue","htmlFor","defaultChecked","mapDispatchToProps","connect","expeditionName","bigPocketVariantConfig","event","target","currentTarget","checked","Backdrop","Body","props","hasFooter","H2","Title","themeColor","rest","CloseButton","Footer","titleColor","titleLabel","closeModal","footer","domEl","document","getElementById","ReactDOM","createPortal","Fragment","variant","ModalBodyWrapper","ModalFooterWrapper","useModal","yesHandler","noHandler","isVisible","setIsVisible","hide","show","RenderModal","closeCallback","Select","ReactSelect","branchTypeOptions","changeId","changeType","find","option","options","classNamePrefix","modal","clearState","setBranch","selectOption","addBranchModal","style","display","copyToClipboard","json","navigator","clipboard","writeText","saveToFile","blob","Blob","saveAs","Pre","fileName","data","sequenceConfig","reduce","JSON","stringify","Form","length","map","key","MainApp","App","theme","store","enhancers","applyMiddleware","install","composeEnhancers","compose","enhancedCreateStore","createStore","configureStore","render","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3eb216ac.chunk.js","sourcesContent":["import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer } from 'redux-loop'\n\n///////////\n// STATE //\n///////////\n\nexport type State = string\nexport const initialState: State = \"\"\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  SET_EXPEDITION_NAME = 'DraftExpedition/Name/SET_EXPEDITION_NAME',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  setExpeditionName: (name: string) =>\n    createAction(ActionTypes.SET_EXPEDITION_NAME, name),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.SET_EXPEDITION_NAME: {\n      return action.payload\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport type NameStateSlice = {\n  DraftExpedition: {\n    Name: State\n  }\n}\n\nconst getExpeditionName = (state: NameStateSlice) => state.DraftExpedition.Name\n\nexport const selectors = {\n  getExpeditionName,\n}\n","import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer } from 'redux-loop'\n\n///////////\n// STATE //\n///////////\n\nexport type State = boolean\nexport const initialState: State = false\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  SET_BIG_POCKET_VARIANT_CONFIG = 'DraftExpedition/BigPocketVariantConfig/SET_BIG_POCKET_VARIANT_CONFIG',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  setBigPocketVariantConfig: (value: boolean) =>\n    createAction(ActionTypes.SET_BIG_POCKET_VARIANT_CONFIG, value),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.SET_BIG_POCKET_VARIANT_CONFIG: {\n      return action.payload\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport type BigPocketVariantConfigStateSlice = {\n  DraftExpedition: {\n    BigPocketVariantConfig: State\n  }\n}\n\nconst getBigPocketVariantConfig = (state: BigPocketVariantConfigStateSlice) => state.DraftExpedition.BigPocketVariantConfig\n\nexport const selectors = {\n  getBigPocketVariantConfig,\n}\n","import { createSelector } from 'reselect'\n\nimport { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer } from 'redux-loop'\n\n///////////\n// STATE //\n///////////\n\ntype Branch = {\n  id: string,\n  type: 'narrative' | 'battle' | 'reward',\n  nextBranchId?: string[] | string\n}\n\ntype Branches = {\n  [id: string]: Branch\n}\n\n\nexport type State = Branches\nexport const initialState: State = {}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  ADD_BRANCH = 'DraftExpedition/SequenceConfig/Branches/ADD_BRANCH',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  addBranch: (branch: Branch) =>\n    createAction(ActionTypes.ADD_BRANCH, branch),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.ADD_BRANCH: {\n      const { id, type, nextBranchId } = action.payload\n\n      return {\n        ...state,\n        [id]: {\n          id,\n          type,\n          nextBranchId\n        }\n      }\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport type BranchesStateSlice = {\n  DraftExpedition: {\n    SequenceConfig: {\n      Branches: State\n    }\n  }\n}\n\nconst getBranchesState = (state: BranchesStateSlice) => state.DraftExpedition.SequenceConfig.Branches\n\nconst getBranchIds = createSelector([getBranchesState], (branches) =>\n  Object.keys(branches)\n)\n\nconst getBranches = createSelector(\n  [getBranchesState], (\n  branches\n) =>\n  Object.values(branches)\n)\n\nexport const selectors = {\n  getBranchesState,\n  getBranchIds,\n  getBranches,\n}\n","import { combineReducers } from 'redux-loop'\n\nimport * as Branches from './Branches'\n\n///////////\n// STATE //\n///////////\n\nexport type State = {\n  Branches: Branches.State\n}\n\nexport const initialState = {\n  Branches: Branches.initialState,\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport const actions = {\n  Branches: Branches.actions,\n}\n\nexport type Action = Branches.Action\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer = combineReducers({\n  Branches: Branches.Reducer,\n})\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport const selectors = {\n  Branches: Branches.selectors,\n}\n","import { combineReducers } from 'redux-loop'\n\nimport * as Name from './Name'\nimport * as BigPocketVariantConfig from './BigPocketVariantConfig'\nimport * as SequenceConfig from './SequenceConfig'\n\n///////////\n// STATE //\n///////////\n\nexport type State = {\n  Name: Name.State\n  BigPocketVariantConfig: BigPocketVariantConfig.State\n  SequenceConfig: SequenceConfig.State\n}\n\nexport const initialState = {\n  Name: Name.initialState,\n  BigPocketVariantConfig: BigPocketVariantConfig.initialState,\n  SequenceConfig: SequenceConfig.initialState,\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport const actions = {\n  Name: Name.actions,\n  BigPocketVariantConfig: BigPocketVariantConfig.actions,\n  SequenceConfig: SequenceConfig.actions,\n}\n\nexport type Action =\n  | Name.Action\n  | BigPocketVariantConfig.Action\n  | SequenceConfig.Action\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer = combineReducers({\n  Name: Name.Reducer,\n  BigPocketVariantConfig: BigPocketVariantConfig.Reducer,\n  SequenceConfig: SequenceConfig.Reducer,\n})\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport const selectors = {\n  Name: Name.selectors,\n  BigPocketVariantConfig: BigPocketVariantConfig.selectors,\n  SequenceConfig: SequenceConfig.selectors,\n}\n","import { combineReducers, reduceReducers } from 'redux-loop'\n\nimport * as DraftExpedition from 'Redux/Store/DraftExpedition'\n\nexport type RootState = {\n  DraftExpedition: DraftExpedition.State\n}\n\nexport const initialState = {\n  DraftExpedition: DraftExpedition.initialState\n}\n\nexport const actions = {\n  DraftExpedition: DraftExpedition.actions,\n}\n\nexport type RootAction =\n  | DraftExpedition.Action\n\nexport const RootReducer = reduceReducers(\n  combineReducers<RootState>({\n    DraftExpedition: DraftExpedition.Reducer,\n  })\n)\n\nexport const selectors = {\n  DraftExpedition: DraftExpedition.selectors\n}\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createGlobalStyle } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle`\n  *,\n  ::after, \n  ::before {\n    box-sizing: border-box;\n  }\n\n  body {\n    font-family: 'Roboto', Arial, sans-serif;\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-font-smoothing: antialiased;\n    text-rendering: optimizeLegibility;\n    margin: 0;\n    padding: 0;\n  }\n`\nexport default GlobalStyle\n","const mainTheme = {\n  colors: {}\n}\n\nexport default mainTheme\n","\n\nimport styled from 'styled-components/macro'\n\nconst H1 = styled('h1')`\n  color: #2196f3;\n  margin-top: 0;\n`\n\nexport default H1\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  margin-bottom: 16px;\n`\n\nexport default Wrapper\n","import styled from 'styled-components/macro'\n\nconst Header = styled('h3')`\n  border-bottom: 1px solid #dadada;\n  margin: 0;\n`\n\nexport default Header\n","import styled from 'styled-components/macro'\n\nconst Button = styled('button')`\n  height: 32px;\n  padding: 0 8px;\n  cursor: pointer;\n  font-family: 'Roboto';\n`\n\nexport default Button\n","import styled from 'styled-components/macro'\n\nimport Button from 'components/atoms/Button'\n\nconst Summary = styled(Button)`\n  height: auto;\n  font-size: 1.5rem;\n  font-weight: 100;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0;\n  position: relative;\n  outline: 0;\n  border: none;\n  background: transparent;\n`\n\nexport default Summary\n","import styled from 'styled-components/macro'\n\nconst Content = styled('div')`\n  padding-top: 16px;\n`\n\nexport default Content\n","import styled from 'styled-components/macro'\n\nconst SummaryIcon = styled('span')`\n  position: absolute;\n  right: 8px;\n`\n\nexport default SummaryIcon\n","import React, { useState } from 'react'\n\nimport Wrapper from './__styled__/Wrapper'\nimport Header from './__styled__/Header'\nimport Summary from './__styled__/Summary'\nimport Content from './__styled__/Content'\nimport SummaryIcon from './__styled__/SummaryIcon'\n\ntype Props = {\n  id: string\n  title: string\n  open?: boolean\n  children: React.ReactNode\n}\n\nconst Accordion = ({\n  id,\n  title,\n  open,\n  children\n}: Props) => {\n  const [isOpen, setIsOpen] = useState<boolean>(open ? open : false)\n\n  const handleClick = () => {\n    setIsOpen(!isOpen)\n  }\n\n  return (\n    <Wrapper>\n      <Header>\n        <Summary\n          id={`${id}Summary`}\n          type=\"button\"\n          aria-expanded={isOpen ? 'true' : 'false'}\n          aria-controls={`${id}Content`}\n          onClick={handleClick}\n        >\n          {title}\n          <SummaryIcon className=\"material-icons\">\n            {isOpen ? 'expand_less' : 'expand_more'}\n          </SummaryIcon>\n        </Summary>\n      </Header>\n      <Content\n        id={`${id}Content`}\n        role=\"region\"\n        aria-labelledby={`${id}Summary`}\n        hidden={isOpen ? false : true}\n      >\n        { children }\n      </Content>\n    </Wrapper>\n  )\n}\n\nexport default React.memo(Accordion)\n","import styled from 'styled-components/macro'\n\nconst ScreenReaderOnlyText = styled('span')`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: 0;\n`\n\nexport default ScreenReaderOnlyText\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('fieldset')`\n  padding: 0;\n  border: none;\n`\n\nexport default Wrapper\n","import styled from 'styled-components/macro'\n\nconst Legend = styled('legend')`\n  padding: 0;\n`\n\nexport default Legend\n","import React from 'react'\n\nimport ScreenReaderOnlyText from 'components/atoms/ScreenReaderOnlyText'\nimport Wrapper from './__styled__/Wrapper'\nimport Legend from './__styled__/Legend'\n\ntype Props = {\n  legend: string\n  legendVisible?: boolean\n  children: React.ReactNode\n}\n\nconst Fieldset = ({\n  legend,\n  legendVisible,\n  children,\n}: Props) => {\n  return (\n    <Wrapper>\n      <Legend>\n        {\n          legendVisible \n            ? (legend) \n            : (<ScreenReaderOnlyText>{legend}</ScreenReaderOnlyText>)\n        }\n      </Legend>\n      {children}\n    </Wrapper>\n  )\n}\n\nexport default React.memo(Fieldset)\n","import styled from 'styled-components/macro'\n\nconst Label = styled('label')`\n  display: block;\n  font-family: 'Roboto';\n  font-size: 12px;\n  margin-bottom: 4px;\n`\n\nexport default Label\n","import styled from 'styled-components/macro'\n\nconst Input = styled('input')`\n  height: 32px;\n  padding: 0 8px;\n  font-family: 'Roboto';\n  border: 1px solid #dadada;\n`\n\nexport default Input\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  margin-bottom: 16px;\n`\n\nexport default Wrapper\n","import React from 'react'\n\nimport ScreenReaderOnlyText from 'components/atoms/ScreenReaderOnlyText'\nimport Label from 'components/atoms/Label'\nimport Input from 'components/atoms/Input'\nimport Wrapper from './__styled__/Wrapper'\n\ntype Props = {\n  id: string\n  label: string\n  labelHidden?: boolean\n  name?: string\n  onChange: (event: any) => void\n  defaultValue: string | number | undefined\n}\n\nconst FormGroupInputText = ({\n  id,\n  label,\n  labelHidden,\n  name,\n  onChange,\n  defaultValue,\n}: Props) => {\n  \n  return (\n    <Wrapper>\n      <Label htmlFor={id}>\n        {\n          labelHidden ? (\n            <ScreenReaderOnlyText>{label}</ScreenReaderOnlyText>\n          ) : (\n            label\n          )\n        }\n      </Label>\n      <Input\n        id={id}\n        name={name ? name : id}\n        type=\"text\"\n        onChange={onChange}\n        defaultValue={defaultValue}\n      />\n    </Wrapper>\n  )\n}\n\nexport default React.memo(FormGroupInputText)\n","import styled from 'styled-components/macro'\n\nimport Label from 'components/atoms/Label'\n\nconst Wrapper = styled('div')`\n  margin-bottom: 16px;\n\n  ${Label} {\n    font-size: 16px;\n    margin-bottom: 0;\n  }\n\n  input {\n    margin: 0 8px 0 0;\n  }\n`\n\nexport default Wrapper\n","import React from 'react'\n\nimport ScreenReaderOnlyText from 'components/atoms/ScreenReaderOnlyText'\nimport Label from 'components/atoms/Label'\nimport Wrapper from './__styled__/Wrapper'\n\ntype Props = {\n  id: string\n  label: string\n  labelHidden?: boolean\n  name?: string\n  onChange: (event: any) => void\n  defaultChecked: boolean\n}\n\nconst FormGroupCheckbox = ({\n  id,\n  label,\n  labelHidden,\n  name,\n  onChange,\n  defaultChecked,\n}: Props) => {\n  return (\n    <Wrapper>\n      <Label htmlFor={id}>\n        <input\n          id={id}\n          type=\"checkbox\"\n          name={name ? name : id}\n          onChange={onChange}\n          defaultChecked={defaultChecked}\n        />\n        {labelHidden ? (\n          <ScreenReaderOnlyText>{label}</ScreenReaderOnlyText>\n        ) : (\n          label\n        )}\n      </Label>\n    </Wrapper>\n  )\n}\n\nexport default React.memo(FormGroupCheckbox)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { RootState, selectors, actions } from 'Redux/Store'\n\nimport Accordion from 'components/organisms/Accordion'\nimport Fieldset from 'components/molecules/Fieldset'\nimport FormGroupInputText from 'components/molecules/FormGroupInputText'\nimport FormGroupCheckbox from 'components/molecules/FormGroupCheckbox'\n\nconst mapStateToProps = (state: RootState) => ({\n  expeditionName: selectors.DraftExpedition.Name.getExpeditionName(state),\n  bigPocketVariantConfig: selectors.DraftExpedition.BigPocketVariantConfig.getBigPocketVariantConfig(\n    state\n  ),\n})\n\nconst mapDispatchToProps = {\n  setExpeditionName: actions.DraftExpedition.Name.setExpeditionName,\n  setBigPocketVariantConfig:\n    actions.DraftExpedition.BigPocketVariantConfig.setBigPocketVariantConfig,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps & {}\n\nconst BasicInformation = ({\n  expeditionName,\n  bigPocketVariantConfig,\n  setExpeditionName,\n  setBigPocketVariantConfig,\n}: Props) => {\n\n  const handleNameChange = (event: any) => {\n    setExpeditionName(event.target.value)\n  }\n\n  const handleBigPocketChange = (event: any) => {\n    setBigPocketVariantConfig(event.currentTarget.checked)\n  }\n\n  return (\n    <Accordion id=\"basicInformation\" title=\"Basic Information\" open>\n      <Fieldset legend=\"Basic Information\">\n        <FormGroupInputText\n          id=\"expeditionName\"\n          label=\"Expedition Name\"\n          onChange={handleNameChange}\n          defaultValue={expeditionName}\n        />\n        <FormGroupCheckbox\n          id=\"bigPocketVariantConfig\"\n          label=\"Big Pocket Mode\"\n          onChange={handleBigPocketChange}\n          defaultChecked={bigPocketVariantConfig}\n        />\n      </Fieldset>\n    </Accordion>\n  )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BasicInformation)\n","import styled from 'styled-components'\n\nconst Wrapper = styled('div')`\n  height: 100%;\n  width: 100%;\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 10000;\n  padding: 24px;\n`\n\nexport default Wrapper\n","import styled from 'styled-components'\n\nconst Backdrop = styled('div')`\n  position: fixed;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  background: rgb(0, 0, 0, 0.3);\n`\n\nexport default Backdrop\n","import styled from 'styled-components'\n\nconst Content = styled('div')`\n  margin: auto;\n  height: 100%;\n  width: 100%;\n  background: #fff;\n  box-shadow: 0 0 10px 2px rgba(0, 0, 0, 0.2);\n  border-radius: 8px;\n  position: relative;\n`\n\nexport default Content\n","import styled from 'styled-components'\n\nconst Header = styled('div')`\n  margin: auto;\n  height: 64px;\n  width: 100%;\n  padding: 0 24px;\n  position: relative;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n`\n\nexport default Header\n","import styled from 'styled-components'\n\ntype Props = {\n  hasFooter?: boolean\n}\n\nconst Body = styled('div')<Props>`\n  height: ${props => props.hasFooter ? 'calc(100% - (64px * 2))' : 'calc(100% - 64px)'};\n`\n\nexport default Body\n","import styled from 'styled-components/macro'\n\nconst H2 = styled('h2')`\n  color: #2196f3;\n`\n\nexport default H2\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport H2 from 'components/atoms/H2'\n\ntype Props = {\n  themeColor: string\n}\n\n// NOTE: we need to take away additional props, so that they are not passed\n// to DOM elements by MUI Components (we really should get rid of MUI...)\nconst Title = styled(({ themeColor, ...rest }) => <H2 {...rest} />)<Props>`\n  color: ${props => props.themeColor};\n  margin: 0;\n`\n\nexport default Title\n","import styled from 'styled-components'\n\nconst CloseButton = styled('button')`\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 48px;\n  height: 48px;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  transition: color .2s ease;\n\n  &:hover {\n    color: #2196f3;\n  }\n`\n\nexport default CloseButton\n","import styled from 'styled-components'\n\nconst Footer = styled('div')`\n  margin: auto;\n  height: 64px;\n  width: 100%;\n  padding: 0 24px;\n  position: relative;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\n  margin-top: -1px;\n`\n\nexport default Footer\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport Wrapper from './Wrapper'\nimport Backdrop from './Backdrop'\nimport Content from './Content'\nimport Header from './Header'\nimport Body from './Body'\nimport Title from './Title'\nimport CloseButton from './CloseButton'\nimport Footer from './Footer'\n\ntype Props = {\n  titleLabel: string\n  titleColor?: string\n  children: React.ReactChild\n  closeModal: () => void\n  footer?: React.ReactNode\n}\n\nconst Modal = ({ titleColor, titleLabel, children, closeModal, footer }: Props) => {\n  const domEl = document.getElementById('modal-root')\n\n  if (!domEl) return null\n\n  return ReactDOM.createPortal(\n    <React.Fragment>\n      <Wrapper>\n        <Backdrop onClick={closeModal} />\n        <Content>\n          <Header>\n            <Title variant=\"h2\" themeColor={titleColor}>\n              {titleLabel}\n            </Title>\n            <CloseButton onClick={closeModal}>\n              <span className=\"material-icons\">close</span>\n            </CloseButton>\n          </Header>\n          <Body hasFooter={footer ? true : false}>{children}</Body>\n          {footer && (\n            <Footer>{footer}</Footer>\n          )}\n        </Content>\n      </Wrapper>\n    </React.Fragment>,\n    domEl\n  )\n}\n\nexport default React.memo(Modal)\n","import styled from 'styled-components/macro'\n\ntype Props = {\n  hasFooter?: boolean\n}\n\nconst ModalBodyWrapper = styled('div')<Props>`\n  margin: auto;\n  height: ${props => (props.hasFooter ? 'calc(100% - 64px)' : '100%')};\n  width: 100%;\n  padding: 24px;\n  position: relative;\n  overflow-y: auto;\n\n  > *:first-child {\n    margin-top: 0;\n  }\n`\n\nexport default ModalBodyWrapper\n","import styled from 'styled-components/macro'\n\nconst ModalFooterWrapper = styled('div')`\n  margin: auto;\n  height: 64px;\n  width: 100%;\n  padding: 0 24px;\n  position: relative;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\n  margin-top: -1px;\n\n  button {\n    width: 100%;\n  }\n\n  button + button {\n    margin-left: 16px;\n  }\n`\n\nexport default ModalFooterWrapper\n","import React, { useState } from 'react'\n\nimport Modal from 'components/organisms/Modal'\nimport Prompt from 'components/organisms/Prompt'\n\ntype ModalProps = {\n  titleColor?: string\n  titleLabel: string\n  children: React.ReactChild\n  closeCallback?: () => void\n  footer?: React.ReactNode\n}\n\nexport type RenderModalType = (props: ModalProps) => JSX.Element\n\n// Renders a modal to the modal root and handles the visibility state\n// of this modal.\n//\n// NOTE: Each modal you want to render should use a separate hook!!!\n// Otherwise your modals will share their visibility state which might lead\n// to overlapping and unclosable elements.\nexport const useModal = () => {\n  const [isVisible, setIsVisible] = useState(false)\n  const show = () => setIsVisible(true)\n  const hide = () => setIsVisible(false)\n  const RenderModal: RenderModalType = ({\n    titleColor,\n    titleLabel,\n    children,\n    closeCallback,\n    footer,\n  }) => {\n    const handleClose = () => {\n      hide()\n      if (closeCallback) {\n        closeCallback()\n      }\n    }\n\n    return (\n      <React.Fragment>\n        {isVisible && (\n          <Modal\n            titleColor={titleColor}\n            titleLabel={titleLabel}\n            closeModal={handleClose}\n            footer={footer}\n          >\n            {children}\n          </Modal>\n        )}\n      </React.Fragment>\n    )\n  }\n\n  return {\n    show,\n    hide,\n    RenderModal,\n  }\n}\n\ntype PromptProps = {\n  closeCallback?: () => void\n  children?: React.ReactChild\n  noHandler: () => void\n  titleColor: string\n  titleLabel: string\n  yesHandler: () => void\n}\n\nexport type RenderPromptType = (props: PromptProps) => JSX.Element\n\nexport const usePrompt = () => {\n  const { show, hide, RenderModal } = useModal()\n\n  const RenderPrompt: RenderPromptType = ({\n    children,\n    noHandler,\n    titleColor,\n    titleLabel,\n    yesHandler,\n  }) => (\n    <RenderModal\n      titleColor={titleColor}\n      titleLabel={titleLabel}\n      closeCallback={noHandler}\n    >\n      <Prompt yesHandler={yesHandler} noHandler={noHandler}>\n        {children}\n      </Prompt>\n    </RenderModal>\n  )\n\n  return {\n    show,\n    hide,\n    RenderPrompt,\n  }\n}\n","import React from 'react'\n\nimport ModalBodyWrapper from 'components/atoms/ModalBodyWrapper'\nimport ModalFooterWrapper from 'components/atoms/ModalFooterWrapper'\nimport Button from 'components/atoms/Button'\n\nconst Prompt = ({\n  yesHandler,\n  noHandler,\n  children,\n}: {\n  yesHandler: () => void\n  noHandler: () => void\n  children?: React.ReactChild\n}) => {\n  return (\n    <React.Fragment>\n      <ModalBodyWrapper hasFooter={true}>{children}</ModalBodyWrapper>\n      <ModalFooterWrapper>\n        <Button\n          onClick={noHandler}\n        >\n          No\n        </Button>\n        <Button\n          onClick={yesHandler}\n        >\n          Yes\n        </Button>\n      </ModalFooterWrapper>\n    </React.Fragment>\n  )\n}\n\nexport default React.memo(Prompt)\n","import styled from 'styled-components/macro'\nimport ReactSelect from 'react-select'\n\nconst Select = styled(ReactSelect)`\n\n`\n\nexport default Select\n","import React from 'react'\n\nimport Fieldset from 'components/molecules/Fieldset'\nimport FormGroupInputText from 'components/molecules/FormGroupInputText'\nimport Label from 'components/atoms/Label'\nimport Select from 'components/atoms/Select'\nimport ModalBodyWrapper from 'components/atoms/ModalBodyWrapper'\n\ntype BranchType = 'narrative' | 'battle' | 'reward'\n\ntype Branch = {\n  id: string,\n  type: BranchType,\n  nextBranchId?: string[] | string\n}\n\ntype BranchTypeOption = {\n  value: BranchType\n  label: string\n}\n\ntype BranchTypeOptions = BranchTypeOption[]\n\nconst branchTypeOptions: BranchTypeOptions = [\n  { value: 'narrative', label: 'narrative' },\n  { value: 'battle', label: 'battle' },\n  { value: 'reward', label: 'reward' },\n]\n\ntype Props = {\n  branch: Branch\n  changeId: (event: any) => void\n  changeType: (selectOption: BranchTypeOption) => void\n}\n\nconst Body = ({\n  branch,\n  changeId,\n  changeType\n}: Props) => {\n\n  const defaultValue = branchTypeOptions.find(\n    (option) => option.value === branch.type\n  )\n\n  return (\n    <ModalBodyWrapper>\n      <Fieldset legend=\"Branches\">\n        <FormGroupInputText\n          id=\"branchId\"\n          label=\"Branch id\"\n          onChange={changeId}\n          defaultValue={branch.id}\n        />\n\n        <Label htmlFor=\"branchType\">Branch type</Label>\n        <Select\n          options={branchTypeOptions}\n          classNamePrefix=\"ReactSelect\"\n          id=\"branchType\"\n          name=\"branchType\"\n          onChange={changeType}\n          defaultValue={defaultValue}\n        />\n\n      </Fieldset>\n    </ModalBodyWrapper>\n  )\n}\n\nexport default React.memo(Body)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { actions } from 'Redux/Store'\n\nimport Button from 'components/atoms/Button'\n\nconst mapDispatchToProps = {\n  addBranch: actions.DraftExpedition.SequenceConfig.Branches.addBranch,\n}\n\ntype BranchType = 'narrative' | 'battle' | 'reward'\n\ntype Branch = {\n  id: string,\n  type: BranchType,\n  nextBranchId?: string[] | string\n}\n\ntype Props = typeof mapDispatchToProps & {\n  modal: any,\n  branch: Branch\n  clearState: () => void\n}\n\nconst Footer = ({\n  modal,\n  branch,\n  clearState,\n  addBranch,\n}: Props) => {\n\n  const handleAddBranch = () => {\n    addBranch(branch)\n    clearState()\n    modal.hide()\n  }\n\n  const handleCancel = () => {\n    clearState()\n    modal.hide()\n  }\n\n  return (\n    <>\n      <Button onClick={handleCancel}>Cancel</Button>\n      <Button onClick={handleAddBranch}>Add branch</Button>\n    </>\n  )\n}\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(React.memo(Footer))\n","import React, { useState } from 'react'\n\nimport Body from './Body'\nimport Footer from './Footer'\n\ntype BranchType = 'narrative' | 'battle' | 'reward'\n\ntype Branch = {\n  id: string,\n  type: BranchType,\n  nextBranchId?: string[] | string\n}\n\ntype BranchTypeOption = {\n  value: BranchType\n  label: string\n}\n\nconst initialState: Branch = {\n  id: '',\n  type: 'narrative',\n}\n\ntype Props = {\n  modal: any\n}\n\nconst AddBranchModal = ({\n  modal\n}: Props) => {\n  const [branch, setBranch] = useState<Branch>(initialState)\n\n  const handleBranchIdChange = (event: any) => {\n    setBranch({\n      ...branch,\n      id: event.target.value,\n    })\n  }\n\n  const handleBranchTypeChange = (selectOption: BranchTypeOption) => {\n    setBranch({\n      ...branch,\n      type: selectOption.value,\n    })\n  }\n\n  const handleClearState = () => {\n    setBranch(initialState)\n  }\n\n  return (\n    <modal.RenderModal\n      titleLabel=\"Add branch\"\n      footer={<Footer modal={modal} branch={branch} clearState={handleClearState} />}>\n      <Body branch={branch} changeId={handleBranchIdChange} changeType={handleBranchTypeChange} />\n    </modal.RenderModal>\n  )\n}\n\nexport default React.memo(AddBranchModal)\n","import React from 'react'\n\nimport { useModal } from 'hooks/useModal'\n\nimport Accordion from 'components/organisms/Accordion'\nimport Button from 'components/atoms/Button'\nimport AddBranchModal from './AddBranchModal'\n\nconst Branches = () => {\n  const addBranchModal = useModal()\n\n  return (\n    <Accordion id=\"branches\" title=\"Branches\" open>\n      <Button\n        type=\"button\"\n        style={{ display: 'block' }}\n        onClick={() => addBranchModal.show()}\n      >\n        Add branch\n        </Button>\n      <AddBranchModal modal={addBranchModal} />\n    </Accordion>\n  )\n}\n\nexport default React.memo(Branches)\n","const copyToClipboard = (json: string) => {\n  window.navigator.clipboard.writeText(json)\n}\n\nexport default copyToClipboard\n","import { saveAs } from 'file-saver'\n\nconst saveToFile = (json: string, name: string) => {\n  const blob = new Blob([json], { type: 'text/json;charset=utf-8' })\n\n  return saveAs(blob, `${name}.json`)\n}\n\nexport default saveToFile\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  width: 50%;\n  padding: 0 0 0 32px;\n\n  @media all and (max-width: 920px) {\n    width: 100%;\n    padding: 32px 0 0 0;\n  }\n`\n\nexport default Wrapper\n","import styled from 'styled-components/macro'\n\nconst Pre = styled('pre')`\n  padding: 24px;\n  border: 1px solid #dadada;\n  background: #fafafa;\n`\n\nexport default Pre\n\n\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { RootState, selectors } from 'Redux/Store'\n\nimport { saveToFile, copyToClipboard } from 'helpers'\n\nimport Button from 'components/atoms/Button'\nimport Wrapper from './__styled__/Wrapper'\nimport Pre from './__styled__/Pre'\n\nconst mapStateToProps = (state: RootState) => ({\n  name: selectors.DraftExpedition.Name.getExpeditionName(state),\n  bigPocketVariantConfig: selectors.DraftExpedition.BigPocketVariantConfig.getBigPocketVariantConfig(\n    state\n  ),\n  branches: selectors.DraftExpedition.SequenceConfig.Branches.getBranches(\n    state\n  ),\n})\n\ntype Props = ReturnType<typeof mapStateToProps> & {\n  fileName?: string,\n}\n\nconst Preview = ({\n  fileName = 'expedition',\n  name,\n  bigPocketVariantConfig,\n  branches,\n}: Props) => {\n\n  const dataBranches = branches.reduce((branches, branch) => {\n    return {\n      ...branches,\n      [branch.id]: {\n        type: branch.type,\n        nextBranchId: branch.nextBranchId\n      }\n    }\n  }, {})\n\n  const data = {\n    name: name,\n    bigPocketVariantConfig: bigPocketVariantConfig,\n    sequenceConfig: {\n      branches: dataBranches\n    }\n  }\n\n  const handleCopyToClipboard = () => {\n    copyToClipboard(JSON.stringify(data, null, '  '))\n  }\n\n  const handleSave = () => {\n    saveToFile(JSON.stringify(data, null, '  '), fileName)\n  }\n\n  return (\n    <Wrapper>\n      <Pre>{JSON.stringify(data, null, '  ')}</Pre>\n\n      <Button type=\"button\" onClick={handleCopyToClipboard}>\n        Copy to clipboard\n      </Button>\n      <Button type=\"button\" onClick={handleSave}>\n        Save to file\n      </Button>\n    </Wrapper>\n  )\n}\n\nexport default connect(\n  mapStateToProps\n)(React.memo(Preview))\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  display: flex;\n\n  @media all and (max-width: 920px) {\n    flex-direction: column;\n  }\n`\n\nexport default Wrapper\n","import styled from 'styled-components/macro'\n\nconst Form = styled('form')`\n  width: 50%;\n\n  @media all and (max-width: 920px) {\n    width: 100%;\n  }\n`\n\nexport default Form\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { RootState, selectors } from 'Redux/Store'\n\nimport BasicInformation from 'components/templates/BasicInformation'\nimport Branches from 'components/templates/Branches'\nimport Preview from 'components/molecules/Preview'\n\nimport Wrapper from './__styled__/Wrapper'\nimport Form from './__styled__/Form'\n\nconst mapStateToProps = (state: RootState) => ({\n  branches: selectors.DraftExpedition.SequenceConfig.Branches.getBranches(state),\n})\n\ntype Props = ReturnType<typeof mapStateToProps> & {}\n\nconst Configurator = ({\n  branches,\n}: Props) => {\n\n  // ToDo: REFACTOR: Split form into own components\n  return (\n    <Wrapper>\n      <Form>\n        <BasicInformation />\n        <Branches />\n\n        {branches.length > 0 ? (\n          <ul>\n            {branches.map((branch) => {\n              return (\n                <li key={branch.id}>\n                  {branch.id} {branch.type}\n                </li>\n              )\n            })}\n          </ul>\n        ) : (\n          <p>No branches added</p>\n        )}\n      </Form>\n\n      <Preview />\n    </Wrapper>\n  )\n}\n\nexport default connect(\n  mapStateToProps\n)(React.memo(Configurator))\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  padding: 32px;\n`\n\nexport default Wrapper\n","import React from 'react'\n\nimport H1 from 'components/atoms/H1'\nimport Configurator from 'components/molecules/Configurator'\nimport Wrapper from './__styled__/Wrapper'\n\nconst MainApp = () => {\n  return (\n    <Wrapper>\n      <H1>AER: Custom Expedition Editor</H1>\n      <Configurator />\n      <div id=\"modal-root\" />\n    </Wrapper>\n  )\n}\n\nexport default MainApp\n","import React from 'react'\n\nimport { ThemeProvider } from 'styled-components/macro'\n\nimport GlobalStyle from 'GlobalStyle'\nimport mainTheme from 'themes/main'\n\nimport MainApp from './MainApp'\n\nconst App = () => (\n  <ThemeProvider theme={mainTheme}>\n    <GlobalStyle />\n    <MainApp />\n  </ThemeProvider>\n)\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport configureStore from './Redux/configureStore'\nimport { initialState } from './Redux/Store'\n\nimport * as serviceWorker from './serviceWorker'\n\nimport App from './components/App'\n\nconst store = configureStore(initialState)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport { install, StoreCreator } from 'redux-loop'\n\nimport { RootReducer, RootState } from './Store'\n\nconst configureStore = (initialState: RootState) => {\n  // Add middleware to this array if necessary\n  const middleWares: any[] = []\n\n  const enhancers = [applyMiddleware(...middleWares), install<RootState>()]\n\n  const composeEnhancers =\n    process.env.NODE_ENV !== 'production' &&\n    typeof window === 'object' &&\n    // @ts-ignore\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      // @ts-ignore\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      : compose\n\n  const enhancedCreateStore = createStore as StoreCreator\n  const store = enhancedCreateStore(\n    RootReducer,\n    initialState,\n    composeEnhancers(...enhancers)\n  )\n\n  return store\n}\n\nexport { configureStore as default }\n"],"sourceRoot":""}