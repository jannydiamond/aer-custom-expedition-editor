{"version":3,"sources":["Redux/Store/DraftExpedition/Name/index.ts","Redux/Store/DraftExpedition/BigPocketVariantConfig/index.ts","Redux/Store/DraftExpedition/SequenceConfig/DraftBranch/index.ts","Redux/Store/DraftExpedition/SequenceConfig/Branches/index.ts","Redux/Store/DraftExpedition/SequenceConfig/index.ts","Redux/Store/DraftExpedition/index.ts","Redux/Store/index.ts","serviceWorker.ts","GlobalStyle.ts","themes/main/index.ts","components/atoms/H1.tsx","components/organisms/Accordion/__styled__/Wrapper.tsx","components/organisms/Accordion/__styled__/Header.tsx","components/atoms/Button.tsx","components/organisms/Accordion/__styled__/Summary.tsx","components/organisms/Accordion/__styled__/Content.tsx","components/organisms/Accordion/__styled__/SummaryIcon.tsx","components/organisms/Accordion/index.tsx","components/atoms/ScreenReaderOnlyText.tsx","components/molecules/Fieldset/__styled__/Wrapper.tsx","components/molecules/Fieldset/__styled__/Legend.tsx","components/molecules/Fieldset/index.tsx","components/atoms/Label.tsx","components/atoms/Input.tsx","components/molecules/FormGroupInputText/__styled__/Wrapper.tsx","components/molecules/FormGroupInputText/index.tsx","components/molecules/FormGroupCheckbox/__styled__/Wrapper.tsx","components/molecules/FormGroupCheckbox/index.tsx","components/templates/BasicInformation/index.tsx","components/organisms/Modal/Wrapper.tsx","components/organisms/Modal/Backdrop.tsx","components/organisms/Modal/Content.tsx","components/organisms/Modal/Header.tsx","components/organisms/Modal/Body.tsx","components/atoms/H2.tsx","components/organisms/Modal/Title.tsx","components/organisms/Modal/CloseButton.tsx","components/organisms/Modal/Footer.tsx","components/organisms/Modal/index.tsx","components/atoms/ModalBodyWrapper.tsx","components/atoms/ModalFooterWrapper.tsx","hooks/useModal.tsx","components/organisms/Prompt/index.tsx","components/atoms/Select.tsx","components/molecules/FormGroupSelect/__styled__/Wrapper.tsx","components/molecules/FormGroupSelect/index.tsx","components/templates/Branches/AddBranchModal/BaseBranch/index.tsx","components/atoms/Textarea.tsx","components/molecules/FormGroupTextarea/__styled__/Wrapper.tsx","components/molecules/FormGroupTextarea/index.tsx","components/templates/Branches/AddBranchModal/NarrativeBranch/index.tsx","components/templates/Branches/AddBranchModal/RewardBranch/Treasures/index.tsx","components/templates/Branches/AddBranchModal/RewardBranch/Mages/index.tsx","components/templates/Branches/AddBranchModal/RewardBranch/Supply/index.tsx","components/templates/Branches/AddBranchModal/RewardBranch/index.tsx","components/templates/Branches/AddBranchModal/Body.tsx","components/templates/Branches/AddBranchModal/Footer.tsx","components/templates/Branches/AddBranchModal/index.tsx","components/templates/Branches/index.tsx","helpers/copyToClipboard.ts","helpers/saveToFile.ts","components/molecules/Preview/__styled__/Wrapper.tsx","components/molecules/Preview/__styled__/Pre.tsx","components/molecules/Preview/index.tsx","components/molecules/Configurator/__styled__/Wrapper.tsx","components/molecules/Configurator/__styled__/Form.tsx","components/molecules/Configurator/index.tsx","components/App/__styled__/Wrapper.tsx","components/App/MainApp.tsx","components/App/index.tsx","index.tsx","Redux/configureStore.ts"],"names":["ActionTypes","actions","noOp","createAction","setExpeditionName","name","SET_EXPEDITION_NAME","selectors","getExpeditionName","state","DraftExpedition","Name","setBigPocketVariantConfig","value","SET_BIG_POCKET_VARIANT_CONFIG","getBigPocketVariantConfig","BigPocketVariantConfig","initialState","_id","id","type","draftAddBranch","DRAFT_ADD_BRANCH","draftEditBranch","branch","DRAFT_EDIT_BRANCH","updateDraftBranch","UPDATE_DRAFT_BRANCH","clearDraftBranch","CLEAR_DRAFT_BRANCH","getDraftBranchState","SequenceConfig","DraftBranch","addBranch","ADD_BRANCH","getBranchesState","Branches","getBranchIds","createSelector","branches","Object","keys","getBranches","values","Reducer","combineReducers","action","shortid","generate","payload","text","decisions","rewardType","treasure","mage","supply","ids","tier1","tier2","tier3","randomAmount","blueprints","RootReducer","reduceReducers","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","mainTheme","colors","H1","styled","Wrapper","Header","Button","Summary","Content","SummaryIcon","React","memo","title","open","children","useState","isOpen","setIsOpen","aria-expanded","aria-controls","onClick","className","role","aria-labelledby","hidden","ScreenReaderOnlyText","Legend","legend","legendVisible","Label","Input","label","labelHidden","onChange","defaultValue","required","htmlFor","defaultChecked","mapDispatchToProps","connect","expeditionName","bigPocketVariantConfig","event","target","currentTarget","checked","Backdrop","Body","props","hasFooter","H2","Title","themeColor","rest","CloseButton","Footer","titleColor","titleLabel","closeModal","footer","domEl","document","getElementById","ReactDOM","createPortal","Fragment","variant","ModalBodyWrapper","ModalFooterWrapper","useModal","yesHandler","noHandler","isVisible","setIsVisible","hide","show","RenderModal","closeCallback","Select","ReactSelect","options","isMulti","classNamePrefix","draftBranch","branchTypeOptions","branchTypeDefaultValue","find","option","FormGroupSelect","selectOption","Textarea","split","map","decision","treasureOptions","DATA","normalizedData","ENG","treasures","level","selectOptions","selectedTreasureIds","parseInt","mageOptions","mages","selectedMageIds","supplyOptions","cards","selectedSupplyIds","handleRewardTypeChange","renderBranch","modal","addBranchModal","style","display","length","narrativeBranch","key","rewardBranch","copyToClipboard","json","navigator","clipboard","writeText","saveToFile","blob","Blob","saveAs","Pre","fileName","data","sequenceConfig","reduce","newBranch","config","randomTreasuresTier1","Array","fill","random","randomTreasuresTier2","randomTreasuresTier3","assign","randomMageAmount","JSON","stringify","Form","MainApp","App","theme","store","enhancers","applyMiddleware","install","composeEnhancers","compose","enhancedCreateStore","createStore","configureStore","render","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kMAcYA,E,wEAAAA,K,gEAAAA,M,KAIL,ICJKA,EDICC,EAAU,CACrBC,KAAM,kBAAMC,YAAa,SACzBC,kBAAmB,SAACC,GAAD,OACjBF,YAAaH,EAAYM,oBAAqBD,KAoCrCE,EAAY,CACvBC,kBAHwB,SAACC,GAAD,OAA2BA,EAAMC,gBAAgBC,Q,SCzC/DX,K,sGAAAA,M,KAIL,ICGKA,EDHCC,EAAU,CACrBC,KAAM,kBAAMC,YAAa,SACzBS,0BAA2B,SAACC,GAAD,OACzBV,YAAaH,EAAYc,8BAA+BD,KAoC/CN,EAAY,CACvBQ,0BAHgC,SAACN,GAAD,OAA6CA,EAAMC,gBAAgBM,yB,wBC5CxFC,EAAsB,CACjCC,IAAK,GACLC,GAAI,GACJC,KAAM,c,SAOIpB,K,+EAAAA,E,iFAAAA,E,mFAAAA,E,sFAAAA,M,KAOL,ICXKA,EDWCC,EAAU,CACrBC,KAAM,kBAAMC,YAAa,SACzBkB,eAAgB,kBACdlB,YAAaH,EAAYsB,mBAC3BC,gBAAiB,SAACC,GAAD,OACfrB,YAAaH,EAAYyB,kBAAmBD,IAC9CE,kBAAmB,SAACF,GAAD,OACjBrB,YAAaH,EAAY2B,oBAAqBH,IAChDI,iBAAkB,kBAChBzB,YAAaH,EAAY6B,sBAqDhBtB,EAAY,CACvBuB,oBAH0B,SAACrB,GAAD,OAAkCA,EAAMC,gBAAgBqB,eAAeC,c,sBC7EtFf,EAAsB,I,SAMvBjB,K,iEAAAA,M,KAIL,IAAMC,EAAU,CACrBC,KAAM,kBAAMC,YAAa,SACzB8B,UAAW,SAACT,GAAD,OACTrB,YAAaH,EAAYkC,WAAYV,KA4FnCW,EAAmB,SAAC1B,GAAD,OAA+BA,EAAMC,gBAAgBqB,eAAeK,UAahF7B,EAAY,CACvB4B,mBACAE,aAbmBC,YAAe,CAACH,IAAmB,SAACI,GAAD,OACtDC,OAAOC,KAAKF,MAaZG,YAVkBJ,YAClB,CAACH,IAAmB,SACpBI,GADoB,OAGpBC,OAAOG,OAAOJ,OChHHtB,EAAe,CAC1Be,YAAaA,EACbI,SAAUA,GAOCnC,EAAU,CACrB+B,YAAaA,EACbI,SAAUA,GAUCQ,EAAUC,YAAgB,CACrCb,YFUiD,WAG7C,IAFJvB,EAEG,uDAFYQ,EACf6B,EACG,uCACH,OAAQA,EAAO1B,MACb,KAAKpB,EAAYsB,iBACf,OAAO,2BACFb,GADL,IAEES,IAAK6B,IAAQC,aAIjB,KAAKhD,EAAYyB,kBAIjB,KAAKzB,EAAY2B,oBACf,OAAOmB,EAAOG,QAGhB,KAAKjD,EAAY6B,mBACf,OAAOZ,EAGT,QACE,OAAOR,IElCX2B,SDJiD,WAG7C,IAFJ3B,EAEG,uDAFYQ,EACf6B,EACG,uCACH,OAAQA,EAAO1B,MACb,KAAKpB,EAAYkC,WAAa,IAAD,EACDY,EAAOG,QAAzB/B,EADmB,EACnBA,IAAKC,EADc,EACdA,GAAIC,EADU,EACVA,KAEjB,OAAOA,GACL,IAAK,YAAc,IAAD,EACa0B,EAAOG,QAA5BC,EADQ,EACRA,KAAMC,EADE,EACFA,UAEd,OAAO,2BACF1C,GADL,kBAEGS,EAAM,CACLA,MACAC,GAAIA,GAAUD,EACdE,OACA8B,KAAMA,GAAc,GACpBC,YAAWA,GAAS,YAAOA,MAKjC,IAAK,SAAW,IAAD,gBACmCL,EAAOG,QAA/CG,EADK,EACLA,WAAYC,EADP,EACOA,SAAUC,EADjB,EACiBA,KAAMC,EADvB,EACuBA,OAEpC,OAAO,2BACF9C,GADL,kBAEGS,EAAM,CACLA,MACAC,GAAIA,GAAUD,EACdE,OACAgC,WAAYA,GAA0B,UACtCC,SAAU,CACRG,IAAG,iBAAEH,QAAF,IAAEA,OAAF,EAAEA,EAAUG,WAAZ,QAAmB,GACtBC,MAAK,iBAAEJ,QAAF,IAAEA,OAAF,EAAEA,EAAUI,aAAZ,QAAqB,EAC1BC,MAAK,iBAAEL,QAAF,IAAEA,OAAF,EAAEA,EAAUK,aAAZ,QAAqB,EAC1BC,MAAK,iBAAEN,QAAF,IAAEA,OAAF,EAAEA,EAAUM,aAAZ,QAAqB,GAE5BL,KAAM,CACJE,IAAG,iBAAEF,QAAF,IAAEA,OAAF,EAAEA,EAAME,WAAR,QAAe,GAClBI,aAAY,iBAAEN,QAAF,IAAEA,OAAF,EAAEA,EAAMM,oBAAR,QAAwB,GAEtCL,OAAQ,CACNC,KAAW,OAAND,QAAM,IAANA,OAAA,EAAAA,EAAQC,KAAMD,EAAOC,IAAM,GAChCK,WAAU,iBAAEN,QAAF,IAAEA,OAAF,EAAEA,EAAQM,kBAAV,QAAwB,OAM1C,QACE,OAAO,2BACFpD,GADL,kBAEGS,EAAM,CACLA,MACAC,KACAC,UAOV,QACE,OAAOX,MCvDAF,EAAY,CACvByB,YAAaA,EACbI,SAAUA,GC9BCnB,EAAe,CAC1BN,KLTiC,GKUjCK,wBJViC,EIWjCe,eAAgBA,GAOL9B,EAAU,CACrBU,KAAMA,EACNK,uBAAwBA,EACxBe,eAAgBA,GAYLa,EAAUC,YAAgB,CACrClC,KLZiD,WAG7C,IAFJF,EAEG,uDAzB8B,GAwBjCqC,EACG,uCACH,OAAQA,EAAO1B,MACb,KAAKpB,EAAYM,oBACf,OAAOwC,EAAOG,QAGhB,QACE,OAAOxC,IKGXO,uBJbiD,WAG7C,IAFJP,EAEG,wDADHqC,EACG,uCACH,OAAQA,EAAO1B,MACb,KAAKpB,EAAYc,8BACf,OAAOgC,EAAOG,QAGhB,QACE,OAAOxC,IIIXsB,eAAgBA,IAOLxB,EAAY,CACvBI,KAAMA,EACNK,uBAAwBA,EACxBe,eAAgBA,GC9CLd,EAAe,CAC1BP,gBAAiBA,GAGNT,EAAU,CACrBS,gBAAiBA,GAMNoD,EAAcC,YACzBlB,YAA2B,CACzBnC,gBAAiBA,KAIRH,EAAY,CACvBG,gBAAiBA,GCdCsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yXChBN,IAgBeC,EAhBKC,YAAH,KCEFC,EAJG,CAChBC,OAAQ,ICQKC,EALJC,YAAO,MAAV,yDAAGA,CAAH,iC,QCEOC,EAJCD,YAAO,OAAV,8DAAGA,CAAH,yBCKEE,EALAF,YAAO,MAAV,6DAAGA,CAAH,+CCOGG,EAPAH,YAAO,UAAV,yDAAGA,CAAH,oECgBGI,GAdCJ,YAAOG,GAAV,6DAAGH,CAAH,2KCEEK,GAJCL,YAAO,OAAV,0DAAGA,CAAH,uBCKEM,GALKN,YAAO,QAAV,kEAAGA,CAAH,kCCqDFO,OAAMC,MAxCH,SAAC,GAKL,IAJZ/D,EAIW,EAJXA,GACAgE,EAGW,EAHXA,MACAC,EAEW,EAFXA,KACAC,EACW,EADXA,SACW,EACiBC,mBAAkBF,IAAc,GADjD,mBACJG,EADI,KACIC,EADJ,KAOX,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,GAAD,CACErE,GAAE,UAAKA,EAAL,WACFC,KAAK,SACLqE,gBAAeF,EAAS,OAAS,QACjCG,gBAAA,UAAkBvE,EAAlB,WACAwE,QAZY,WAClBH,GAAWD,KAaJJ,EACD,kBAAC,GAAD,CAAaS,UAAU,kBACpBL,EAAS,cAAgB,iBAIhC,kBAAC,GAAD,CACEpE,GAAE,UAAKA,EAAL,WACF0E,KAAK,SACLC,kBAAA,UAAoB3E,EAApB,WACA4E,QAAQR,GAENF,OCpCKW,GAXctB,YAAO,QAAV,2EAAGA,CAAH,+GCKXC,GALCD,YAAO,YAAV,8DAAGA,CAAH,4BCIEuB,GAJAvB,YAAO,UAAV,6DAAGA,CAAH,gBC6BGO,OAAMC,MAnBJ,SAAC,GAIJ,IAHZgB,EAGW,EAHXA,OACAC,EAEW,EAFXA,cACAd,EACW,EADXA,SAEA,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,KAEIc,EACKD,EACA,kBAAC,GAAD,KAAuBA,IAG/Bb,MCjBQe,GAPD1B,YAAO,SAAV,wDAAGA,CAAH,0ECQI2B,GARD3B,YAAO,SAAV,wDAAGA,CAAH,yFCIIC,GAJCD,YAAO,OAAV,8DAAGA,CAAH,yBCgDEO,OAAMC,MAjCM,SAAC,GAQd,IAPZ/D,EAOW,EAPXA,GACAmF,EAMW,EANXA,MACAC,EAKW,EALXA,YACAlG,EAIW,EAJXA,KACAmG,EAGW,EAHXA,SACAC,EAEW,EAFXA,aACAC,EACW,EADXA,SAGA,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,CAAOC,QAASxF,GAEZoF,EACE,kBAAC,GAAD,KAAuBD,GAEvBA,GAIN,kBAAC,GAAD,CACEnF,GAAIA,EACJd,KAAMA,GAAcc,EACpBC,KAAK,OACLoF,SAAUA,EACVC,aAAcA,EACdC,SAAUA,QC3BH/B,GAbCD,YAAO,OAAV,8DAAGA,CAAH,oFAGT0B,ICoCWnB,OAAMC,MA5BK,SAAC,GAOb,IANZ/D,EAMW,EANXA,GACAmF,EAKW,EALXA,MACAC,EAIW,EAJXA,YACAlG,EAGW,EAHXA,KACAmG,EAEW,EAFXA,SACAI,EACW,EADXA,eAEA,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,CAAOD,QAASxF,GACd,2BACEA,GAAIA,EACJC,KAAK,WACLf,KAAMA,GAAcc,EACpBqF,SAAUA,EACVI,eAAgBA,IAEjBL,EACC,kBAAC,GAAD,KAAuBD,GAEvBA,OCnBJO,GAAqB,CACzBzG,kBAAmBH,EAAQS,gBAAgBC,KAAKP,kBAChDQ,0BACEX,EAAQS,gBAAgBM,uBAAuBJ,2BAwCpCkG,gBAlDS,SAACrG,GAAD,MAAuB,CAC7CsG,eAAgBxG,EAAUG,gBAAgBC,KAAKH,kBAAkBC,GACjEuG,uBAAwBzG,EAAUG,gBAAgBM,uBAAuBD,0BACvEN,MA+CoCoG,GAAzBC,EAnCU,SAAC,GAKZ,IAJZC,EAIW,EAJXA,eACAC,EAGW,EAHXA,uBACA5G,EAEW,EAFXA,kBACAQ,EACW,EADXA,0BAWA,OACE,kBAAC,GAAD,CAAWO,GAAG,mBAAmBgE,MAAM,oBAAoBC,MAAI,GAC7D,kBAAC,GAAD,CAAUc,OAAO,qBACf,kBAAC,GAAD,CACE/E,GAAG,iBACHmF,MAAM,kBACNE,SAdiB,SAACS,GACxB7G,EAAkB6G,EAAMC,OAAOrG,QAczB4F,aAAcM,IAEhB,kBAAC,GAAD,CACE5F,GAAG,yBACHmF,MAAM,kBACNE,SAhBsB,SAACS,GAC7BrG,EAA0BqG,EAAME,cAAcC,UAgBxCR,eAAgBI,S,0LCnD1B,IAUerC,GAVCD,YAAO,MAAPA,CAAH,M,uLCAb,IASe2C,GATE3C,YAAO,MAAPA,CAAH,M,8OCAd,IAUeK,GAVCL,YAAO,MAAPA,CAAH,M,qRCAb,IAYeE,GAZAF,YAAO,MAAPA,CAAH,M,yFCIZ,IAIe4C,GAJF5C,YAAO,MAAPA,CAAH,MACE,SAAA6C,GAAK,OAAIA,EAAMC,UAAY,0BAA4B,uB,SCDpDC,GAJJ/C,YAAO,MAAV,yDAAGA,CAAH,oB,sGCSR,IAKegD,GALDhD,aAAO,cAAGiD,WAAH,IAAkBC,EAAlB,sCAA6B,kBAAC,GAAOA,KAA5ClD,CAAH,MACA,SAAA6C,GAAK,OAAIA,EAAMI,c,sSCV1B,IAgBeE,GAhBKnD,YAAO,SAAPA,CAAH,M,gTCAjB,IAaeoD,GAbApD,YAAO,MAAPA,CAAH,MC+CGO,OAAMC,MA7BP,SAAC,GAAqE,IAAnE6C,EAAkE,EAAlEA,WAAYC,EAAsD,EAAtDA,WAAY3C,EAA0C,EAA1CA,SAAU4C,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,OACvDC,EAAQC,SAASC,eAAe,cAEtC,OAAKF,EAEEG,IAASC,aACd,kBAAC,IAAMC,SAAP,KACE,kBAAC,GAAD,KACE,kBAAC,GAAD,CAAU7C,QAASsC,IACnB,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,kBAAC,GAAD,CAAOQ,QAAQ,KAAKd,WAAYI,GAC7BC,GAEH,kBAAC,GAAD,CAAarC,QAASsC,GACpB,0BAAMrC,UAAU,kBAAhB,WAGJ,kBAAC,GAAD,CAAM4B,YAAWU,GAAwB7C,GACxC6C,GACC,kBAAC,GAAD,KAASA,MAKjBC,GAtBiB,QCJNO,GAbUhE,YAAO,OAAV,uEAAGA,CAAH,qHAEV,SAAA6C,GAAK,OAAKA,EAAMC,UAAY,oBAAsB,UCe/CmB,GArBYjE,YAAO,OAAV,wEAAGA,CAAH,6OCmBXkE,ICaE3D,IAAMC,MA5BN,SAAC,GAQT,IAPL2D,EAOI,EAPJA,WACAC,EAMI,EANJA,UACAzD,EAKI,EALJA,SAMA,OACE,kBAAC,IAAMmD,SAAP,KACE,kBAAC,GAAD,CAAkBhB,WAAW,GAAOnC,GACpC,kBAAC,GAAD,KACE,kBAAC,EAAD,CACEM,QAASmD,GADX,MAKA,kBAAC,EAAD,CACEnD,QAASkD,GADX,YDHgB,WAAO,IAAD,EACMvD,oBAAS,GADf,mBACrByD,EADqB,KACVC,EADU,KAGtBC,EAAO,kBAAMD,GAAa,IA+BhC,MAAO,CACLE,KAjCW,kBAAMF,GAAa,IAkC9BC,OACAE,YAjCmC,SAAC,GAM/B,IALLpB,EAKI,EALJA,WACAC,EAII,EAJJA,WACA3C,EAGI,EAHJA,SACA+D,EAEI,EAFJA,cACAlB,EACI,EADJA,OASA,OACE,kBAAC,IAAMM,SAAP,KACGO,GACC,kBAAC,GAAD,CACEhB,WAAYA,EACZC,WAAYA,EACZC,WAbY,WAClBgB,IACIG,GACFA,KAWIlB,OAAQA,GAEP7C,Q,SEzCEgE,GAJA3E,YAAO4E,MAAV,6DAAG5E,CAAH,MCGGC,GAJCD,YAAO,OAAV,8DAAGA,CAAH,yBCqDEO,OAAMC,MAlCM,SAAC,GAUd,IATZ/D,EASW,EATXA,GACAoI,EAQW,EARXA,QACAjD,EAOW,EAPXA,MACAC,EAMW,EANXA,YACAlG,EAKW,EALXA,KACAmG,EAIW,EAJXA,SACAC,EAGW,EAHXA,aACAC,EAEW,EAFXA,SACA8C,EACW,EADXA,QAEA,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,CAAO7C,QAASxF,GACboF,EACC,kBAAC,GAAD,KAAuBD,GAEvBA,GAGJ,kBAAC,GAAD,CACEiD,QAASA,EACTE,gBAAgB,cAChBtI,GAAIA,EACJd,KAAMA,GAAcc,EACpBqF,SAAUA,EACVC,aAAcA,EACdC,SAAUA,EACV8C,QAASA,QCtCX3C,GAAqB,CACzBnF,kBACEzB,EAAQS,gBAAgBqB,eAAeC,YAAYN,mBA4DxCoF,eACb,KACAD,GAFaC,CAGb7B,IAAMC,MAxDW,SAAC,GAGN,IAFZwE,EAEW,EAFXA,YACAhI,EACW,EADXA,kBAGMiI,EAA6C,CACjD,CAAE9I,MAAO,YAAayF,MAAO,aAC7B,CAAEzF,MAAO,SAAUyF,MAAO,UAC1B,CAAEzF,MAAO,SAAUyF,MAAO,WAGtBsD,EAAyBD,EAAkBE,MAC/C,SAACC,GAAD,OAAYA,EAAOjJ,QAAU6I,EAAYtI,QAqB3C,OACE,oCACE,kBAAC,GAAD,CACED,GAAG,WACHmF,MAAM,YACNE,SAvBuB,SAACS,GAC5BvF,EAAkB,2BACbgI,GADY,IAEfvI,GAAI8F,EAAMC,OAAOrG,UAqBf4F,aAAciD,EAAYvI,GAC1BuF,UAAU,IAEZ,kBAACqD,GAAD,CACER,QAASI,EACTxI,GAAG,aACHmF,MAAM,cACNE,SAxByB,SAACwD,GAA0C,IAChE9I,EAAYwI,EAAZxI,IAAKC,EAAOuI,EAAPvI,GAEbO,EAAkB,2BACbT,GADY,IAEfC,MACAC,KACAC,KAAM4I,EAAanJ,UAkBjB4F,aAAcmD,SCxDPK,GATEvF,YAAO,YAAV,0DAAGA,CAAH,2GCICC,GAJCD,YAAO,OAAV,8DAAGA,CAAH,yBC+CEO,OAAMC,MAhCK,SAAC,GAQb,IAPZ/D,EAOW,EAPXA,GACAmF,EAMW,EANXA,MACAC,EAKW,EALXA,YACAlG,EAIW,EAJXA,KACAmG,EAGW,EAHXA,SACAC,EAEW,EAFXA,aACAC,EACW,EADXA,SAGA,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,CAAOC,QAASxF,GAEZoF,EACE,kBAAC,GAAD,KAAuBD,GAEvBA,GAIN,kBAAC,GAAD,CACEnF,GAAIA,EACJd,KAAMA,GAAcc,EACpBqF,SAAUA,EACVC,aAAcA,EACdC,SAAUA,QChCZG,GAAqB,CACzBnF,kBACEzB,EAAQS,gBAAgBqB,eAAeC,YAAYN,mBA0DxCoF,eACb,KACAD,GAFaC,CAGb7B,IAAMC,MAtDgB,SAAC,GAGX,IAFZwE,EAEW,EAFXA,YACAhI,EACW,EADXA,kBAwBA,OACE,oCACE,kBAAC,GAAD,CACEP,GAAG,cACHmF,MAAM,OACNE,SA1ByB,SAACS,GAC9BvF,EAAkB,2BACbgI,GADY,IAEfxG,KAAM+D,EAAMC,OAAOrG,UAwBjB4F,aAAciD,EAAYxG,OAE5B,qGAGA,kBAAC,GAAD,CACE/B,GAAG,YACHmF,MAAM,YACNE,SA5B8B,SAACS,GAAgB,IAAD,EAC5C9D,EAAS,UACZ8D,EAAMC,OAAOrG,OAASoG,EAAMC,OAAOrG,MAAMqJ,MAAM,aADnC,QAC6C,GAC5DxI,EAAkB,2BACbgI,GADY,IAEfvG,UAAWA,EAAUgH,KAAI,SAACC,GACxB,MAAO,CACLlJ,IAAK6B,IAAQC,WACbE,KAAMkH,UAqBR3D,aACEiD,EAAYvG,UACRuG,EAAYvG,UAAUgH,KAAI,SAACC,GAAD,OAAcA,EAASlH,QACjD,U,SC6CC+B,OAAMC,MA7FH,SAAC,GAGL,IAFZwE,EAEW,EAFXA,YACAhI,EACW,EADXA,kBAOM2I,EAJqC7H,OAAOG,OAChD2H,KAAKC,eAAeC,IAAIC,WAGYN,KAAI,SAAC9G,GACzC,MAAO,CACLxC,MAAOwC,EAASlC,GAChBmF,MAAM,GAAD,OAAKjD,EAAShD,KAAd,oBAA8BgD,EAASqH,MAAvC,SAgDT,OACE,kBAAC,GAAD,CAAWvJ,GAAG,YAAYgE,MAAM,YAAYC,MAAI,GAC9C,kBAAC2E,GAAD,CACER,QAASc,EACTlJ,GAAG,kBACHmF,MAAM,mBACNE,SAlDuB,SAACmE,GAC5B,IAAMC,EAAgCD,EAAcR,KAClD,SAACL,GAAD,OAAgCA,EAAOjJ,SAGzCa,EAAkB,2BACbgI,GADY,IAEfrG,SAAS,2BACJqG,EAAYrG,UADT,IAENG,IAAI,YAAKoH,SA0CTpB,SAAO,IAET,gDACA,6EACA,kBAAC,GAAD,CACErI,GAAG,iBACHmF,MAAM,SACNE,SA5CkC,SAACS,GACvCvF,EAAkB,2BACbgI,GADY,IAEfrG,SAAS,2BACJqG,EAAYrG,UADT,IAENI,MAAOoH,SAAU5D,EAAMC,OAA4BrG,aAwCnD4F,aAAc,IAEhB,kBAAC,GAAD,CACEtF,GAAG,iBACHmF,MAAM,SACNE,SAxCkC,SAACS,GACvCvF,EAAkB,2BACbgI,GADY,IAEfrG,SAAS,2BACJqG,EAAYrG,UADT,IAENK,MAAOmH,SAAU5D,EAAMC,OAA4BrG,aAoCnD4F,aAAc,IAEhB,kBAAC,GAAD,CACEtF,GAAG,iBACHmF,MAAM,SACNE,SApCkC,SAACS,GACvCvF,EAAkB,2BACbgI,GADY,IAEfrG,SAAS,2BACJqG,EAAYrG,UADT,IAENM,MAAOkH,SAAU5D,EAAMC,OAA4BrG,aAgCnD4F,aAAc,QC9BPxB,OAAMC,MAzDP,SAAC,GAA+C,IAA7CwE,EAA4C,EAA5CA,YAAahI,EAA+B,EAA/BA,kBAKtBoJ,EAJ6BtI,OAAOG,OACxC2H,KAAKC,eAAeC,IAAIO,OAGIZ,KAAI,SAAC7G,GACjC,MAAO,CACLzC,MAAOyC,EAAKnC,GACZmF,MAAOhD,EAAKjD,SA4BhB,OACE,kBAAC,GAAD,CAAWc,GAAG,QAAQgE,MAAM,QAAQC,MAAI,GACtC,kBAAC2E,GAAD,CACER,QAASuB,EACT3J,GAAG,cACHmF,MAAM,eACNE,SA9BmB,SAACmE,GACxB,IAAMK,EAA4BL,EAAcR,KAC9C,SAACL,GAAD,OAAgCA,EAAOjJ,SAGzCa,EAAkB,2BACbgI,GADY,IAEfpG,KAAK,2BACAoG,EAAYpG,MADb,IAEFE,IAAI,YAAKwH,SAsBTxB,SAAO,IAET,4CACA,gEACA,kBAAC,GAAD,CACErI,GAAG,oBACHmF,MAAM,yBACNE,SAxB+B,SAACS,GACpCvF,EAAkB,2BACbgI,GADY,IAEfpG,KAAK,2BACAoG,EAAYpG,MADb,IAEFM,aAAciH,SAAU5D,EAAMC,OAA4BrG,aAoB1D4F,aAAc,QCZPxB,OAAMC,MAxCN,SAAC,GAA+C,IAA7CwE,EAA4C,EAA5CA,YAAahI,EAA+B,EAA/BA,kBAKvBuJ,EAJ+BzI,OAAOG,OAC1C2H,KAAKC,eAAeC,IAAIU,OAGOf,KAAI,SAAC5G,GACpC,MAAO,CACL1C,MAAO0C,EAAOpC,GACdmF,MAAM,GAAD,OAAK/C,EAAOlD,KAAZ,aAAqBkD,EAAOnC,KAA5B,SAkBT,OACE,kBAAC,GAAD,CAAWD,GAAG,SAASgE,MAAM,SAASC,MAAI,GACxC,kBAAC2E,GAAD,CACER,QAAS0B,EACT9J,GAAG,oBACHmF,MAAM,sBACNE,SApBqB,SAACmE,GAC1B,IAAMQ,EAA8BR,EAAcR,KAChD,SAACL,GAAD,OAAgCA,EAAOjJ,SAGzCa,EAAkB,2BACbgI,GADY,IAEfnG,OAAO,2BACFmG,EAAYnG,QADX,IAEJC,IAAI,YAAK2H,SAYT3B,SAAO,IAET,uDCtCA3C,GAAqB,CACzBnF,kBACEzB,EAAQS,gBAAgBqB,eAAeC,YAAYN,mBAuDxCoF,eACb,KACAD,GAFaC,CAGb7B,IAAMC,MAnDa,SAAC,GAGR,IAFZwE,EAEW,EAFXA,YACAhI,EACW,EADXA,kBAGM0J,EAAyB,SAACnE,GAC9BvF,EAAkB,2BACbgI,GADY,IAEftG,WAAa6D,EAAMC,OAA4BrG,UAInD,OACE,oCACE,kBAAC,GAAD,CAAUqF,OAAO,cAAcC,eAAa,GAC1C,yBAAKP,UAAU,iBACb,2BACExE,KAAK,QACLf,KAAK,aACLc,GAAG,UACHyF,gBAAc,EACd/F,MAAM,UACN2F,SAAU4E,IAEZ,2BAAOzE,QAAQ,WAAf,YAEF,yBAAKf,UAAU,iBACb,2BACExE,KAAK,QACLf,KAAK,aACLc,GAAG,SACHN,MAAM,SACN2F,SAAU4E,IAEZ,2BAAOzE,QAAQ,UAAf,YAGwB,WAA3B+C,EAAYtG,YACX,oCACE,kBAAC,GAAD,CAAWsG,YAAaA,EAAahI,kBAAmBA,IACxD,kBAAC,GAAD,CAAOgI,YAAaA,EAAahI,kBAAmBA,IACpD,kBAAC,GAAD,CAAQgI,YAAaA,EAAahI,kBAAmBA,UCVhDoF,gBAvCS,SAACrG,GAAD,MAAuB,CAC7CiJ,YAAanJ,EAAUG,gBAAgBqB,eAAeC,YAAYF,oBAChErB,MAqCWqG,CAEb7B,IAAMC,MAjCK,SAAC,GAEA,IADZwE,EACW,EADXA,YAmBA,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,CAAUxD,OAAO,YACf,kBAAC,GAAD,CAAYwD,YAAaA,IAnBV,SAAClI,GACpB,OAAQA,EAAOJ,MACb,IAAK,YACH,OAAO,kBAAC,GAAD,CAAiBsI,YAAaA,IAGvC,IAAK,SACH,OAAO,kBAAC,GAAD,CAAcA,YAAaA,IAGpC,QACE,OAAO,sCAUN2B,CAAa3B,SC/BhB7C,GAAqB,CACzB5E,UAAWhC,EAAQS,gBAAgBqB,eAAeK,SAASH,UAC3DL,iBAAkB3B,EAAQS,gBAAgBqB,eAAeC,YAAYJ,kBAmCxDkF,gBA3CS,SAACrG,GAAD,MAAuB,CAC7CiJ,YAAanJ,EAAUG,gBAAgBqB,eAAeC,YAAYF,oBAChErB,MA2CFoG,GAFaC,CAGb7B,IAAMC,MA/BO,SAAC,GAKF,IAJZoG,EAIW,EAJXA,MACA5B,EAGW,EAHXA,YACAzH,EAEW,EAFXA,UACAL,EACW,EADXA,iBAgBA,OACE,oCACE,kBAAC,EAAD,CAAQ+D,QAPS,WACnB/D,IACA0J,EAAMrC,SAKJ,UACA,kBAAC,EAAD,CAAQtD,QAhBY,WACtB1D,EAAU,eACJyH,IAEN9H,IACA0J,EAAMrC,SAWJ,mBCvBShE,OAAMC,MAbE,SAAC,GAEV,IADZoG,EACW,EADXA,MAGA,OACE,kBAACA,EAAMnC,YAAP,CACEnB,WAAW,aACXE,OAAQ,kBAAC,GAAD,CAAQoD,MAAOA,KACvB,kBAAC,GAAD,UCAAzE,GAAqB,CACzBxF,eAAgBpB,EAAQS,gBAAgBqB,eAAeC,YAAYX,gBA2FtDyF,gBAlGS,SAACrG,GAAD,MAAuB,CAC7C8B,SAAUhC,EAAUG,gBAAgBqB,eAAeK,SAASM,YAC1DjC,MAkGFoG,GAFaC,CAGb7B,IAAMC,MAzFS,SAAC,GAGJ,IAFZ3C,EAEW,EAFXA,SACAlB,EACW,EADXA,eAEMkK,EAAiB3C,KAOvB,OACE,kBAAC,GAAD,CAAWzH,GAAG,WAAWgE,MAAM,WAAWC,MAAI,GAC5C,kBAAC,EAAD,CACEhE,KAAK,SACLoK,MAAO,CAAEC,QAAS,SAClB9F,QAVkB,WACtB4F,EAAerC,OACf7H,MAKE,cAOA,kBAAC,GAAD,CAAgBiK,MAAOC,IAEtBhJ,EAASmJ,OAAS,EACjB,4BACGnJ,EAAS4H,KAAI,SAAC3I,GACb,OAAQA,EAAOJ,MACb,IAAK,YACH,IAAMuK,EAAkBnK,EAExB,OACE,wBAAIoK,IAAKpK,EAAOL,IACd,kCAAQK,EAAOL,IACf,oCAAUK,EAAOJ,MAChBuK,EAAgBzI,MACf,oCAAUyI,EAAgBzI,MAE3ByI,EAAgBxI,UACf,oCACE,yCACA,4BACGwI,EAAgBxI,UAAUgH,KACzB,SAACC,GAAD,OACE,wBAAIwB,IAAKxB,EAASlJ,KAAMkJ,EAASlH,WAMzC,4CAMR,IAAK,SACH,IAAM2I,EAAerK,EAErB,OACE,wBAAIoK,IAAKpK,EAAOL,IACd,kCAAQK,EAAOL,IACf,oCAAUK,EAAOJ,MAChByK,EAAazI,YACZ,2CAAiByI,EAAazI,aAMtC,QACE,OACE,wBAAIwI,IAAKpK,EAAOL,IACd,kCAAQK,EAAOL,IACf,oCAAUK,EAAOJ,YAQ7B,qDCrGO0K,GAJS,SAACC,GACvB9H,OAAO+H,UAAUC,UAAUC,UAAUH,I,SCOxBI,GANI,SAACJ,EAAc1L,GAChC,IAAM+L,EAAO,IAAIC,KAAK,CAACN,GAAO,CAAE3K,KAAM,4BAEtC,OAAOkL,kBAAOF,EAAD,UAAU/L,EAAV,WCOAsE,GAVCD,YAAO,OAAV,0DAAGA,CAAH,mGCME6H,GANH7H,YAAO,OAAV,yDAAGA,CAAH,+DCoLMoC,gBAzKS,SAACrG,GAAD,MAAuB,CAC7CJ,KAAME,EAAUG,gBAAgBC,KAAKH,kBAAkBC,GACvDuG,uBAAwBzG,EAAUG,gBAAgBM,uBAAuBD,0BACvEN,GAEF8B,SAAUhC,EAAUG,gBAAgBqB,eAAeK,SAASM,YAC1DjC,MAmKWqG,CAEb7B,IAAMC,MA7JQ,SAAC,GAKH,IAAD,IAJXsH,gBAIW,MAJA,aAIA,EAwHLC,EAAO,CACXpM,KAzHS,EAHXA,KA6HE2G,uBA1HS,EAFXA,uBA6HE0F,eAAgB,CACdnK,SA5HO,EADXA,SAG8BoK,QAAO,SAACpK,EAAUf,GAC9C,OAAQA,EAAOJ,MACb,IAAK,YACH,IAAMuK,EAAkBnK,EAElBoL,EAAY,CAChBxL,KAAMI,EAAOJ,KACbyL,OAAQ,CACN3J,KAAMyI,EAAgBzI,KACtBC,YAAWwI,EAAgBxI,WACvBwI,EAAgBxI,UAAUgH,KAAI,SAACC,GAAD,OAAcA,EAASlH,UAK7D,OAAO,2BACFX,GADL,kBAEGf,EAAOL,GAAKyL,IAIjB,IAAK,SACH,IAAMf,EAAerK,EAEfoL,EAAY,CAChBxL,KAAMI,EAAOJ,KACbyL,OAAQ,CACNzL,KAAMyK,EAAazI,aAIjB0J,EAAuD,IAAhCjB,EAAaxI,SAASI,MAC/CsJ,MAAMlB,EAAaxI,SAASI,OAAOuJ,KAAK,CACtCC,QAAQ,EACRvC,MAAO,IAET,GAEEwC,EAAuD,IAAhCrB,EAAaxI,SAASK,MAC/CqJ,MAAMlB,EAAaxI,SAASK,OAAOsJ,KAAK,CACtCC,QAAQ,EACRvC,MAAO,IAET,GAEEyC,EAC4B,IAAhCtB,EAAaxI,SAASM,MAClBoJ,MAAMlB,EAAaxI,SAASM,OAAOqJ,KAAK,CACtCC,QAAQ,EACRvC,MAAO,IAET,IAGJmB,EAAaxI,SAASG,IAAIkI,OAAS,GACnCoB,EAAqBpB,OAAS,GAC9BwB,EAAqBxB,OAAS,GAC9ByB,EAAqBzB,OAAS,IAE9BlJ,OAAO4K,OAAOR,EAAUC,OAAQ,CAC9BxJ,SAAU,CACRG,IAAI,GAAD,mBACEqI,EAAaxI,SAASG,KADxB,YAEEsJ,GAFF,YAGEI,GAHF,YAIEC,OAMX,IAAME,EAC+B,IAAnCxB,EAAavI,KAAKM,aACdmJ,MAAMlB,EAAavI,KAAKM,cAAcoJ,KAAK,CACzCC,QAAQ,IAEV,GAwBN,OArBEpB,EAAavI,KAAKE,IAAIkI,OAAS,GAC/B2B,EAAiB3B,OAAS,IAE1BlJ,OAAO4K,OAAOR,EAAUC,OAAQ,CAC9BvJ,KAAM,CACJE,IAAI,GAAD,mBACEqI,EAAavI,KAAKE,KADpB,YAEE6J,OAMPxB,EAAatI,OAAOC,IAAIkI,OAAS,GACnClJ,OAAO4K,OAAOR,EAAUC,OAAQ,CAC9BtJ,OAAQ,CACNC,IAAI,YAAKqI,EAAatI,OAAOC,QAK5B,2BACFjB,GADL,kBAEGf,EAAOL,GAAKyL,IAIjB,QACE,OAAO,2BACFrK,GADL,kBAEGf,EAAOL,GAAK,CACXC,KAAMI,EAAOJ,WAMpB,MAkBH,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,KAAMkM,KAAKC,UAAUd,EAAM,KAAM,OAEjC,kBAAC,EAAD,CAAQrL,KAAK,SAASuE,QAZI,WAC5BmG,GAAgBwB,KAAKC,UAAUd,EAAM,KAAM,SAWzC,qBAGA,kBAAC,EAAD,CAAQrL,KAAK,SAASuE,QAXP,WACjBwG,GAAWmB,KAAKC,UAAUd,EAAM,KAAM,MAAOD,KAU3C,qBCrKS7H,GARCD,YAAO,OAAV,8DAAGA,CAAH,2ECQE8I,GARF9I,YAAO,QAAV,uDAAGA,CAAH,6DCqBKO,OAAMC,MAdA,WAEnB,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,kBAAC,GAAD,MACA,kBAAC,GAAD,OAGF,kBAAC,GAAD,UCZSP,GAJCD,YAAO,OAAV,0DAAGA,CAAH,mBCcE+I,GAVC,WACd,OACE,kBAAC,GAAD,KACE,kBAAC,EAAD,sCACA,kBAAC,GAAD,MACA,yBAAKtM,GAAG,iBCKCuM,GAPH,kBACV,kBAAC,IAAD,CAAeC,MAAOpJ,GACpB,kBAAC,EAAD,MACA,kBAAC,GAAD,QCDEqJ,GCNiB,SAAC3M,GAEtB,IAEM4M,EAAY,CAACC,IAAe,WAAf,EAFQ,IAEyBC,eAE9CC,EAOAC,IASN,OANcC,EADcC,KAE1BrK,EACA7C,EACA+M,EAAgB,WAAhB,EAAoBH,IDbVO,CAAenN,GAE7BqH,IAAS+F,OACP,kBAAC,IAAD,CAAUT,MAAOA,IACf,kBAAC,GAAD,OAEFxF,SAASC,eAAe,S/D0HpB,kBAAmB2D,WACrBA,UAAUsC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e40c5a97.chunk.js","sourcesContent":["import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer } from 'redux-loop'\n\n///////////\n// STATE //\n///////////\n\nexport type State = string\nexport const initialState: State = \"\"\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  SET_EXPEDITION_NAME = 'DraftExpedition/Name/SET_EXPEDITION_NAME',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  setExpeditionName: (name: string) =>\n    createAction(ActionTypes.SET_EXPEDITION_NAME, name),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.SET_EXPEDITION_NAME: {\n      return action.payload\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport type NameStateSlice = {\n  DraftExpedition: {\n    Name: State\n  }\n}\n\nconst getExpeditionName = (state: NameStateSlice) => state.DraftExpedition.Name\n\nexport const selectors = {\n  getExpeditionName,\n}\n","import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer } from 'redux-loop'\n\n///////////\n// STATE //\n///////////\n\nexport type State = boolean\nexport const initialState: State = false\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  SET_BIG_POCKET_VARIANT_CONFIG = 'DraftExpedition/BigPocketVariantConfig/SET_BIG_POCKET_VARIANT_CONFIG',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  setBigPocketVariantConfig: (value: boolean) =>\n    createAction(ActionTypes.SET_BIG_POCKET_VARIANT_CONFIG, value),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.SET_BIG_POCKET_VARIANT_CONFIG: {\n      return action.payload\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport type BigPocketVariantConfigStateSlice = {\n  DraftExpedition: {\n    BigPocketVariantConfig: State\n  }\n}\n\nconst getBigPocketVariantConfig = (state: BigPocketVariantConfigStateSlice) => state.DraftExpedition.BigPocketVariantConfig\n\nexport const selectors = {\n  getBigPocketVariantConfig,\n}\n","import { LoopReducer } from 'redux-loop'\nimport { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\n\nimport * as types from 'types'\nimport shortid from 'shortid'\n\n///////////\n// STATE //\n///////////\n\nexport type State = types.BranchBase | types.NarrativeBranch\nexport const initialState: State = {\n  _id: '',\n  id: '',\n  type: 'narrative',\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  DRAFT_ADD_BRANCH = 'DraftExpedition/SequenceConfig/DraftBranch/DRAFT_ADD_BRANCH',\n  DRAFT_EDIT_BRANCH = 'DraftExpedition/SequenceConfig/DraftBranch/DRAFT_EDIT_BRANCH',\n  CLEAR_DRAFT_BRANCH = 'DraftExpedition/SequenceConfig/DraftBranch/CLEAR_DRAFT_BRANCH',\n  UPDATE_DRAFT_BRANCH = 'DraftExpedition/SequenceConfig/DraftBranch/UPDATE_DRAFT_BRANCH',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  draftAddBranch: () =>\n    createAction(ActionTypes.DRAFT_ADD_BRANCH),\n  draftEditBranch: (branch: types.BranchBase | types.Branch) =>\n    createAction(ActionTypes.DRAFT_EDIT_BRANCH, branch),\n  updateDraftBranch: (branch: types.BranchBase | types.Branch) =>\n    createAction(ActionTypes.UPDATE_DRAFT_BRANCH, branch),\n  clearDraftBranch: () =>\n    createAction(ActionTypes.CLEAR_DRAFT_BRANCH),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.DRAFT_ADD_BRANCH: {\n      return {\n        ...state,\n        _id: shortid.generate()\n      }\n    }\n\n    case ActionTypes.DRAFT_EDIT_BRANCH: {\n      return action.payload\n    }\n\n    case ActionTypes.UPDATE_DRAFT_BRANCH: {\n      return action.payload\n    }\n\n    case ActionTypes.CLEAR_DRAFT_BRANCH: {\n      return initialState\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport type DraftBranchStateSlice = {\n  DraftExpedition: {\n    SequenceConfig: {\n      DraftBranch: State\n    }\n  }\n}\n\nconst getDraftBranchState = (state: DraftBranchStateSlice) => state.DraftExpedition.SequenceConfig.DraftBranch\n\nexport const selectors = {\n  getDraftBranchState\n}","import { createSelector } from 'reselect'\nimport { LoopReducer } from 'redux-loop'\nimport { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\n\nimport * as types from 'types'\n\n///////////\n// STATE //\n///////////\n\nexport type State = types.Branches | {}\nexport const initialState: State = {}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  ADD_BRANCH = 'DraftExpedition/SequenceConfig/Branches/ADD_BRANCH',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  addBranch: (branch: types.NarrativeBranch | types.RewardBranch) =>\n    createAction(ActionTypes.ADD_BRANCH, branch),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.ADD_BRANCH: {\n      const { _id, id, type } = action.payload\n\n      switch(type) {\n        case 'narrative': {\n          const { text, decisions } = (action.payload as types.NarrativeBranch)\n\n          return {\n            ...state,\n            [_id]: {\n              _id,\n              id: id ? id : _id,\n              type,\n              text: text ? text : '',\n              decisions: decisions ? [...decisions] : false\n            },\n          }\n        }\n\n        case 'reward': {\n          const { rewardType, treasure, mage, supply } = (action.payload as types.RewardBranch)\n\n          return {\n            ...state,\n            [_id]: {\n              _id,\n              id: id ? id : _id,\n              type,\n              rewardType: rewardType ? rewardType : 'regular',\n              treasure: {\n                ids: treasure?.ids ?? [],\n                tier1: treasure?.tier1 ?? 0,\n                tier2: treasure?.tier2 ?? 0,\n                tier3: treasure?.tier3 ?? 0,\n              },\n              mage: {\n                ids: mage?.ids ?? [],\n                randomAmount: mage?.randomAmount ?? 0\n              },\n              supply: {\n                ids: supply?.ids ? supply.ids : [],\n                blueprints: supply?.blueprints ?? []\n              }\n            },\n          }\n        }\n\n        default: {\n          return {\n            ...state,\n            [_id]: {\n              _id,\n              id,\n              type,\n            },\n          }\n        }\n      }  \n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport type BranchesStateSlice = {\n  DraftExpedition: {\n    SequenceConfig: {\n      Branches: State\n    }\n  }\n}\n\nconst getBranchesState = (state: BranchesStateSlice) => state.DraftExpedition.SequenceConfig.Branches\n\nconst getBranchIds = createSelector([getBranchesState], (branches) =>\n  Object.keys(branches)\n)\n\nconst getBranches = createSelector(\n  [getBranchesState], (\n  branches\n) =>\n  Object.values(branches)\n)\n\nexport const selectors = {\n  getBranchesState,\n  getBranchIds,\n  getBranches,\n}\n","import { combineReducers } from 'redux-loop'\n\nimport * as DraftBranch from './DraftBranch'\nimport * as Branches from './Branches'\n\n///////////\n// STATE //\n///////////\n\nexport type State = {\n  DraftBranch: DraftBranch.State\n  Branches: Branches.State\n}\n\nexport const initialState = {\n  DraftBranch: DraftBranch.initialState,\n  Branches: Branches.initialState,\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport const actions = {\n  DraftBranch: DraftBranch.actions,\n  Branches: Branches.actions,\n}\n\nexport type Action = DraftBranch.Action\n  | Branches.Action\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer = combineReducers({\n  DraftBranch: DraftBranch.Reducer,\n  Branches: Branches.Reducer,\n})\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport const selectors = {\n  DraftBranch: DraftBranch.selectors,\n  Branches: Branches.selectors,\n}\n","import { combineReducers } from 'redux-loop'\n\nimport * as Name from './Name'\nimport * as BigPocketVariantConfig from './BigPocketVariantConfig'\nimport * as SequenceConfig from './SequenceConfig'\n\n///////////\n// STATE //\n///////////\n\nexport type State = {\n  Name: Name.State\n  BigPocketVariantConfig: BigPocketVariantConfig.State\n  SequenceConfig: SequenceConfig.State\n}\n\nexport const initialState = {\n  Name: Name.initialState,\n  BigPocketVariantConfig: BigPocketVariantConfig.initialState,\n  SequenceConfig: SequenceConfig.initialState,\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport const actions = {\n  Name: Name.actions,\n  BigPocketVariantConfig: BigPocketVariantConfig.actions,\n  SequenceConfig: SequenceConfig.actions,\n}\n\nexport type Action =\n  | Name.Action\n  | BigPocketVariantConfig.Action\n  | SequenceConfig.Action\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer = combineReducers({\n  Name: Name.Reducer,\n  BigPocketVariantConfig: BigPocketVariantConfig.Reducer,\n  SequenceConfig: SequenceConfig.Reducer,\n})\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport const selectors = {\n  Name: Name.selectors,\n  BigPocketVariantConfig: BigPocketVariantConfig.selectors,\n  SequenceConfig: SequenceConfig.selectors,\n}\n","import { combineReducers, reduceReducers } from 'redux-loop'\n\nimport * as DraftExpedition from 'Redux/Store/DraftExpedition'\n\nexport type RootState = {\n  DraftExpedition: DraftExpedition.State\n}\n\nexport const initialState = {\n  DraftExpedition: DraftExpedition.initialState\n}\n\nexport const actions = {\n  DraftExpedition: DraftExpedition.actions,\n}\n\nexport type RootAction =\n  | DraftExpedition.Action\n\nexport const RootReducer = reduceReducers(\n  combineReducers<RootState>({\n    DraftExpedition: DraftExpedition.Reducer,\n  })\n)\n\nexport const selectors = {\n  DraftExpedition: DraftExpedition.selectors\n}\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createGlobalStyle } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle`\n  *,\n  ::after, \n  ::before {\n    box-sizing: border-box;\n  }\n\n  body {\n    font-family: 'Roboto', Arial, sans-serif;\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-font-smoothing: antialiased;\n    text-rendering: optimizeLegibility;\n    margin: 0;\n    padding: 0;\n  }\n`\nexport default GlobalStyle\n","const mainTheme = {\n  colors: {}\n}\n\nexport default mainTheme\n","\n\nimport styled from 'styled-components/macro'\n\nconst H1 = styled('h1')`\n  color: #2196f3;\n  margin-top: 0;\n`\n\nexport default H1\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  margin-bottom: 16px;\n`\n\nexport default Wrapper\n","import styled from 'styled-components/macro'\n\nconst Header = styled('h3')`\n  border-bottom: 1px solid #dadada;\n  margin: 0;\n`\n\nexport default Header\n","import styled from 'styled-components/macro'\n\nconst Button = styled('button')`\n  height: 32px;\n  padding: 0 8px;\n  cursor: pointer;\n  font-family: 'Roboto';\n`\n\nexport default Button\n","import styled from 'styled-components/macro'\n\nimport Button from 'components/atoms/Button'\n\nconst Summary = styled(Button)`\n  height: auto;\n  font-size: 1.5rem;\n  font-weight: 100;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0;\n  position: relative;\n  outline: 0;\n  border: none;\n  background: transparent;\n`\n\nexport default Summary\n","import styled from 'styled-components/macro'\n\nconst Content = styled('div')`\n  padding-top: 16px;\n`\n\nexport default Content\n","import styled from 'styled-components/macro'\n\nconst SummaryIcon = styled('span')`\n  position: absolute;\n  right: 8px;\n`\n\nexport default SummaryIcon\n","import React, { useState } from 'react'\n\nimport Wrapper from './__styled__/Wrapper'\nimport Header from './__styled__/Header'\nimport Summary from './__styled__/Summary'\nimport Content from './__styled__/Content'\nimport SummaryIcon from './__styled__/SummaryIcon'\n\ntype Props = {\n  id: string\n  title: string\n  open?: boolean\n  children: React.ReactNode\n}\n\nconst Accordion = ({\n  id,\n  title,\n  open,\n  children\n}: Props) => {\n  const [isOpen, setIsOpen] = useState<boolean>(open ? open : false)\n\n  const handleClick = () => {\n    setIsOpen(!isOpen)\n  }\n\n  return (\n    <Wrapper>\n      <Header>\n        <Summary\n          id={`${id}Summary`}\n          type=\"button\"\n          aria-expanded={isOpen ? 'true' : 'false'}\n          aria-controls={`${id}Content`}\n          onClick={handleClick}\n        >\n          {title}\n          <SummaryIcon className=\"material-icons\">\n            {isOpen ? 'expand_less' : 'expand_more'}\n          </SummaryIcon>\n        </Summary>\n      </Header>\n      <Content\n        id={`${id}Content`}\n        role=\"region\"\n        aria-labelledby={`${id}Summary`}\n        hidden={isOpen ? false : true}\n      >\n        { children }\n      </Content>\n    </Wrapper>\n  )\n}\n\nexport default React.memo(Accordion)\n","import styled from 'styled-components/macro'\n\nconst ScreenReaderOnlyText = styled('span')`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: 0;\n`\n\nexport default ScreenReaderOnlyText\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('fieldset')`\n  padding: 0;\n  border: none;\n`\n\nexport default Wrapper\n","import styled from 'styled-components/macro'\n\nconst Legend = styled('legend')`\n  padding: 0;\n`\n\nexport default Legend\n","import React from 'react'\n\nimport ScreenReaderOnlyText from 'components/atoms/ScreenReaderOnlyText'\nimport Wrapper from './__styled__/Wrapper'\nimport Legend from './__styled__/Legend'\n\ntype Props = {\n  legend: string\n  legendVisible?: boolean\n  children: React.ReactNode\n}\n\nconst Fieldset = ({\n  legend,\n  legendVisible,\n  children,\n}: Props) => {\n  return (\n    <Wrapper>\n      <Legend>\n        {\n          legendVisible \n            ? (legend) \n            : (<ScreenReaderOnlyText>{legend}</ScreenReaderOnlyText>)\n        }\n      </Legend>\n      {children}\n    </Wrapper>\n  )\n}\n\nexport default React.memo(Fieldset)\n","import styled from 'styled-components/macro'\n\nconst Label = styled('label')`\n  display: block;\n  font-family: 'Roboto';\n  font-size: 12px;\n  margin-bottom: 4px;\n`\n\nexport default Label\n","import styled from 'styled-components/macro'\n\nconst Input = styled('input')`\n  height: 32px;\n  width: 100%;\n  padding: 0 8px;\n  font-family: 'Roboto';\n  border: 1px solid #dadada;\n`\n\nexport default Input\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  margin-bottom: 16px;\n`\n\nexport default Wrapper\n","import React from 'react'\n\nimport ScreenReaderOnlyText from 'components/atoms/ScreenReaderOnlyText'\nimport Label from 'components/atoms/Label'\nimport Input from 'components/atoms/Input'\nimport Wrapper from './__styled__/Wrapper'\n\ntype Props = {\n  id: string\n  label: string\n  labelHidden?: boolean\n  name?: string\n  onChange: (event: any) => void\n  defaultValue: any\n  required?: boolean\n}\n\nconst FormGroupInputText = ({\n  id,\n  label,\n  labelHidden,\n  name,\n  onChange,\n  defaultValue,\n  required\n}: Props) => {\n  \n  return (\n    <Wrapper>\n      <Label htmlFor={id}>\n        {\n          labelHidden ? (\n            <ScreenReaderOnlyText>{label}</ScreenReaderOnlyText>\n          ) : (\n            label\n          )\n        }\n      </Label>\n      <Input\n        id={id}\n        name={name ? name : id}\n        type=\"text\"\n        onChange={onChange}\n        defaultValue={defaultValue}\n        required={required}\n      />\n    </Wrapper>\n  )\n}\n\nexport default React.memo(FormGroupInputText)\n","import styled from 'styled-components/macro'\n\nimport Label from 'components/atoms/Label'\n\nconst Wrapper = styled('div')`\n  margin-bottom: 16px;\n\n  ${Label} {\n    font-size: 16px;\n    margin-bottom: 0;\n  }\n\n  input {\n    margin: 0 8px 0 0;\n  }\n`\n\nexport default Wrapper\n","import React from 'react'\n\nimport ScreenReaderOnlyText from 'components/atoms/ScreenReaderOnlyText'\nimport Label from 'components/atoms/Label'\nimport Wrapper from './__styled__/Wrapper'\n\ntype Props = {\n  id: string\n  label: string\n  labelHidden?: boolean\n  name?: string\n  onChange: (event: any) => void\n  defaultChecked: boolean\n}\n\nconst FormGroupCheckbox = ({\n  id,\n  label,\n  labelHidden,\n  name,\n  onChange,\n  defaultChecked,\n}: Props) => {\n  return (\n    <Wrapper>\n      <Label htmlFor={id}>\n        <input\n          id={id}\n          type=\"checkbox\"\n          name={name ? name : id}\n          onChange={onChange}\n          defaultChecked={defaultChecked}\n        />\n        {labelHidden ? (\n          <ScreenReaderOnlyText>{label}</ScreenReaderOnlyText>\n        ) : (\n          label\n        )}\n      </Label>\n    </Wrapper>\n  )\n}\n\nexport default React.memo(FormGroupCheckbox)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { RootState, selectors, actions } from 'Redux/Store'\n\nimport Accordion from 'components/organisms/Accordion'\nimport Fieldset from 'components/molecules/Fieldset'\nimport FormGroupInputText from 'components/molecules/FormGroupInputText'\nimport FormGroupCheckbox from 'components/molecules/FormGroupCheckbox'\n\nconst mapStateToProps = (state: RootState) => ({\n  expeditionName: selectors.DraftExpedition.Name.getExpeditionName(state),\n  bigPocketVariantConfig: selectors.DraftExpedition.BigPocketVariantConfig.getBigPocketVariantConfig(\n    state\n  ),\n})\n\nconst mapDispatchToProps = {\n  setExpeditionName: actions.DraftExpedition.Name.setExpeditionName,\n  setBigPocketVariantConfig:\n    actions.DraftExpedition.BigPocketVariantConfig.setBigPocketVariantConfig,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps & {}\n\nconst BasicInformation = ({\n  expeditionName,\n  bigPocketVariantConfig,\n  setExpeditionName,\n  setBigPocketVariantConfig,\n}: Props) => {\n\n  const handleNameChange = (event: any) => {\n    setExpeditionName(event.target.value)\n  }\n\n  const handleBigPocketChange = (event: any) => {\n    setBigPocketVariantConfig(event.currentTarget.checked)\n  }\n\n  return (\n    <Accordion id=\"basicInformation\" title=\"Basic Information\" open>\n      <Fieldset legend=\"Basic Information\">\n        <FormGroupInputText\n          id=\"expeditionName\"\n          label=\"Expedition Name\"\n          onChange={handleNameChange}\n          defaultValue={expeditionName}\n        />\n        <FormGroupCheckbox\n          id=\"bigPocketVariantConfig\"\n          label=\"Big Pocket Mode\"\n          onChange={handleBigPocketChange}\n          defaultChecked={bigPocketVariantConfig}\n        />\n      </Fieldset>\n    </Accordion>\n  )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BasicInformation)\n","import styled from 'styled-components'\n\nconst Wrapper = styled('div')`\n  height: 100%;\n  width: 100%;\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 10000;\n  padding: 24px;\n`\n\nexport default Wrapper\n","import styled from 'styled-components'\n\nconst Backdrop = styled('div')`\n  position: fixed;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  background: rgb(0, 0, 0, 0.3);\n`\n\nexport default Backdrop\n","import styled from 'styled-components'\n\nconst Content = styled('div')`\n  margin: auto;\n  height: 100%;\n  width: 100%;\n  background: #fff;\n  box-shadow: 0 0 10px 2px rgba(0, 0, 0, 0.2);\n  border-radius: 8px;\n  position: relative;\n`\n\nexport default Content\n","import styled from 'styled-components'\n\nconst Header = styled('div')`\n  margin: auto;\n  height: 64px;\n  width: 100%;\n  padding: 0 24px;\n  position: relative;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n`\n\nexport default Header\n","import styled from 'styled-components'\n\ntype Props = {\n  hasFooter?: boolean\n}\n\nconst Body = styled('div')<Props>`\n  height: ${props => props.hasFooter ? 'calc(100% - (64px * 2))' : 'calc(100% - 64px)'};\n`\n\nexport default Body\n","import styled from 'styled-components/macro'\n\nconst H2 = styled('h2')`\n  color: #2196f3;\n`\n\nexport default H2\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport H2 from 'components/atoms/H2'\n\ntype Props = {\n  themeColor: string\n}\n\n// NOTE: we need to take away additional props, so that they are not passed\n// to DOM elements by MUI Components (we really should get rid of MUI...)\nconst Title = styled(({ themeColor, ...rest }) => <H2 {...rest} />)<Props>`\n  color: ${props => props.themeColor};\n  margin: 0;\n`\n\nexport default Title\n","import styled from 'styled-components'\n\nconst CloseButton = styled('button')`\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 48px;\n  height: 48px;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  transition: color .2s ease;\n\n  &:hover {\n    color: #2196f3;\n  }\n`\n\nexport default CloseButton\n","import styled from 'styled-components'\n\nconst Footer = styled('div')`\n  margin: auto;\n  height: 64px;\n  width: 100%;\n  padding: 0 24px;\n  position: relative;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\n  margin-top: -1px;\n`\n\nexport default Footer\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport Wrapper from './Wrapper'\nimport Backdrop from './Backdrop'\nimport Content from './Content'\nimport Header from './Header'\nimport Body from './Body'\nimport Title from './Title'\nimport CloseButton from './CloseButton'\nimport Footer from './Footer'\n\ntype Props = {\n  titleLabel: string\n  titleColor?: string\n  children: React.ReactChild\n  closeModal: () => void\n  footer?: React.ReactNode\n}\n\nconst Modal = ({ titleColor, titleLabel, children, closeModal, footer }: Props) => {\n  const domEl = document.getElementById('modal-root')\n\n  if (!domEl) return null\n\n  return ReactDOM.createPortal(\n    <React.Fragment>\n      <Wrapper>\n        <Backdrop onClick={closeModal} />\n        <Content>\n          <Header>\n            <Title variant=\"h2\" themeColor={titleColor}>\n              {titleLabel}\n            </Title>\n            <CloseButton onClick={closeModal}>\n              <span className=\"material-icons\">close</span>\n            </CloseButton>\n          </Header>\n          <Body hasFooter={footer ? true : false}>{children}</Body>\n          {footer && (\n            <Footer>{footer}</Footer>\n          )}\n        </Content>\n      </Wrapper>\n    </React.Fragment>,\n    domEl\n  )\n}\n\nexport default React.memo(Modal)\n","import styled from 'styled-components/macro'\n\ntype Props = {\n  hasFooter?: boolean\n}\n\nconst ModalBodyWrapper = styled('div')<Props>`\n  margin: auto;\n  height: ${props => (props.hasFooter ? 'calc(100% - 64px)' : '100%')};\n  width: 100%;\n  padding: 24px;\n  position: relative;\n  overflow-y: auto;\n\n  > *:first-child {\n    margin-top: 0;\n  }\n`\n\nexport default ModalBodyWrapper\n","import styled from 'styled-components/macro'\n\nconst ModalFooterWrapper = styled('div')`\n  margin: auto;\n  height: 64px;\n  width: 100%;\n  padding: 0 24px;\n  position: relative;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\n  margin-top: -1px;\n\n  button {\n    width: 100%;\n  }\n\n  button + button {\n    margin-left: 16px;\n  }\n`\n\nexport default ModalFooterWrapper\n","import React, { useState } from 'react'\n\nimport Modal from 'components/organisms/Modal'\nimport Prompt from 'components/organisms/Prompt'\n\ntype ModalProps = {\n  titleColor?: string\n  titleLabel: string\n  children: React.ReactChild\n  closeCallback?: () => void\n  footer?: React.ReactNode\n}\n\nexport type RenderModalType = (props: ModalProps) => JSX.Element\n\n// Renders a modal to the modal root and handles the visibility state\n// of this modal.\n//\n// NOTE: Each modal you want to render should use a separate hook!!!\n// Otherwise your modals will share their visibility state which might lead\n// to overlapping and unclosable elements.\nexport const useModal = () => {\n  const [isVisible, setIsVisible] = useState(false)\n  const show = () => setIsVisible(true)\n  const hide = () => setIsVisible(false)\n  const RenderModal: RenderModalType = ({\n    titleColor,\n    titleLabel,\n    children,\n    closeCallback,\n    footer,\n  }) => {\n    const handleClose = () => {\n      hide()\n      if (closeCallback) {\n        closeCallback()\n      }\n    }\n\n    return (\n      <React.Fragment>\n        {isVisible && (\n          <Modal\n            titleColor={titleColor}\n            titleLabel={titleLabel}\n            closeModal={handleClose}\n            footer={footer}\n          >\n            {children}\n          </Modal>\n        )}\n      </React.Fragment>\n    )\n  }\n\n  return {\n    show,\n    hide,\n    RenderModal,\n  }\n}\n\ntype PromptProps = {\n  closeCallback?: () => void\n  children?: React.ReactChild\n  noHandler: () => void\n  titleColor: string\n  titleLabel: string\n  yesHandler: () => void\n}\n\nexport type RenderPromptType = (props: PromptProps) => JSX.Element\n\nexport const usePrompt = () => {\n  const { show, hide, RenderModal } = useModal()\n\n  const RenderPrompt: RenderPromptType = ({\n    children,\n    noHandler,\n    titleColor,\n    titleLabel,\n    yesHandler,\n  }) => (\n    <RenderModal\n      titleColor={titleColor}\n      titleLabel={titleLabel}\n      closeCallback={noHandler}\n    >\n      <Prompt yesHandler={yesHandler} noHandler={noHandler}>\n        {children}\n      </Prompt>\n    </RenderModal>\n  )\n\n  return {\n    show,\n    hide,\n    RenderPrompt,\n  }\n}\n","import React from 'react'\n\nimport ModalBodyWrapper from 'components/atoms/ModalBodyWrapper'\nimport ModalFooterWrapper from 'components/atoms/ModalFooterWrapper'\nimport Button from 'components/atoms/Button'\n\nconst Prompt = ({\n  yesHandler,\n  noHandler,\n  children,\n}: {\n  yesHandler: () => void\n  noHandler: () => void\n  children?: React.ReactChild\n}) => {\n  return (\n    <React.Fragment>\n      <ModalBodyWrapper hasFooter={true}>{children}</ModalBodyWrapper>\n      <ModalFooterWrapper>\n        <Button\n          onClick={noHandler}\n        >\n          No\n        </Button>\n        <Button\n          onClick={yesHandler}\n        >\n          Yes\n        </Button>\n      </ModalFooterWrapper>\n    </React.Fragment>\n  )\n}\n\nexport default React.memo(Prompt)\n","import styled from 'styled-components/macro'\nimport ReactSelect from 'react-select'\n\nconst Select = styled(ReactSelect)`\n\n`\n\nexport default Select\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  margin-bottom: 16px;\n`\n\nexport default Wrapper\n","import React from 'react'\n\nimport * as types from 'types'\n\nimport ScreenReaderOnlyText from 'components/atoms/ScreenReaderOnlyText'\nimport Label from 'components/atoms/Label'\nimport Select from 'components/atoms/Select'\nimport Wrapper from './__styled__/Wrapper'\n\ntype Props = {\n  id: string\n  options: types.SelectOptions\n  label: string\n  labelHidden?: boolean\n  name?: string\n  onChange: (event: any) => void\n  defaultValue?: any\n  required?: boolean\n  isMulti?: boolean\n}\n\nconst FormGroupInputText = ({\n  id,\n  options,\n  label,\n  labelHidden,\n  name,\n  onChange,\n  defaultValue,\n  required,\n  isMulti,\n}: Props) => {\n  return (\n    <Wrapper>\n      <Label htmlFor={id}>\n        {labelHidden ? (\n          <ScreenReaderOnlyText>{label}</ScreenReaderOnlyText>\n        ) : (\n          label\n        )}\n      </Label>\n      <Select\n        options={options}\n        classNamePrefix=\"ReactSelect\"\n        id={id}\n        name={name ? name : id}\n        onChange={onChange}\n        defaultValue={defaultValue}\n        required={required}\n        isMulti={isMulti}\n      />\n    </Wrapper>\n  )\n}\n\nexport default React.memo(FormGroupInputText)\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport * as types from 'types'\r\n\r\nimport { actions } from 'Redux/Store'\r\nimport { initialState } from 'Redux/Store/DraftExpedition/SequenceConfig/DraftBranch'\r\n\r\nimport FormGroupInputText from 'components/molecules/FormGroupInputText'\r\nimport FormGroupSelect from 'components/molecules/FormGroupSelect'\r\n\r\nconst mapDispatchToProps = {\r\n  updateDraftBranch:\r\n    actions.DraftExpedition.SequenceConfig.DraftBranch.updateDraftBranch,\r\n}\r\n\r\ntype Props = typeof mapDispatchToProps & {\r\n  draftBranch: types.BranchBase\r\n}\r\n\r\nconst BaseBranch = ({ \r\n  draftBranch, \r\n  updateDraftBranch,\r\n}: Props) => {\r\n\r\n  const branchTypeOptions: types.BranchTypeOptions = [\r\n    { value: 'narrative', label: 'narrative' },\r\n    { value: 'battle', label: 'battle' },\r\n    { value: 'reward', label: 'reward' },\r\n  ]\r\n\r\n  const branchTypeDefaultValue = branchTypeOptions.find(\r\n    (option) => option.value === draftBranch.type\r\n  )\r\n\r\n  const handleBranchIdChange = (event: any) => {\r\n    updateDraftBranch({\r\n      ...draftBranch,\r\n      id: event.target.value,\r\n    })\r\n  }\r\n\r\n  const handleBranchTypeChange = (selectOption: types.BranchTypeOption) => {\r\n    const { _id, id } = draftBranch\r\n\r\n    updateDraftBranch({\r\n      ...initialState,\r\n      _id,\r\n      id,\r\n      type: selectOption.value,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <FormGroupInputText\r\n        id=\"branchId\"\r\n        label=\"Branch id\"\r\n        onChange={handleBranchIdChange}\r\n        defaultValue={draftBranch.id}\r\n        required={true}\r\n      />\r\n      <FormGroupSelect\r\n        options={branchTypeOptions}\r\n        id=\"branchType\"\r\n        label=\"Branch type\"\r\n        onChange={handleBranchTypeChange}\r\n        defaultValue={branchTypeDefaultValue}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(React.memo(BaseBranch))\r\n","import styled from 'styled-components/macro'\n\nconst Textarea = styled('textarea')`\n  min-height: 64px;\n  width: 100%;\n  padding: 8px;\n  font-family: 'Roboto';\n  border: 1px solid #dadada;\n  resize: vertical;\n`\n\nexport default Textarea\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  margin-bottom: 16px;\n`\n\nexport default Wrapper\n","import React from 'react'\n\nimport ScreenReaderOnlyText from 'components/atoms/ScreenReaderOnlyText'\nimport Label from 'components/atoms/Label'\nimport Textarea from 'components/atoms/Textarea'\nimport Wrapper from './__styled__/Wrapper'\n\ntype Props = {\n  id: string\n  label: string\n  labelHidden?: boolean\n  name?: string\n  onChange: (event: any) => void\n  defaultValue: any\n  required?: boolean\n}\n\nconst FormGroupTextarea = ({\n  id,\n  label,\n  labelHidden,\n  name,\n  onChange,\n  defaultValue,\n  required\n}: Props) => {\n  \n  return (\n    <Wrapper>\n      <Label htmlFor={id}>\n        {\n          labelHidden ? (\n            <ScreenReaderOnlyText>{label}</ScreenReaderOnlyText>\n          ) : (\n            label\n          )\n        }\n      </Label>\n      <Textarea\n        id={id}\n        name={name ? name : id}\n        onChange={onChange}\n        defaultValue={defaultValue}\n        required={required}\n      />\n    </Wrapper>\n  )\n}\n\nexport default React.memo(FormGroupTextarea)\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport shortid from 'shortid'\r\n\r\nimport * as types from 'types'\r\n\r\nimport { actions } from 'Redux/Store'\r\n\r\nimport FormGroupInputText from 'components/molecules/FormGroupInputText'\r\nimport FormGroupTextarea from 'components/molecules/FormGroupTextarea'\r\n\r\nconst mapDispatchToProps = {\r\n  updateDraftBranch:\r\n    actions.DraftExpedition.SequenceConfig.DraftBranch.updateDraftBranch,\r\n}\r\n\r\ntype Props = typeof mapDispatchToProps & {\r\n  draftBranch: types.NarrativeBranch\r\n}\r\n\r\nconst NarrativeBranch = ({ \r\n  draftBranch, \r\n  updateDraftBranch \r\n}: Props) => {\r\n  \r\n  const handleBranchTextChange = (event: any) => {\r\n    updateDraftBranch({\r\n      ...draftBranch,\r\n      text: event.target.value,\r\n    })\r\n  }\r\n\r\n  const handleBranchDecisionsChange = (event: any) => {\r\n    const decisions =\r\n      (event.target.value && event.target.value.split('; ')) ?? []\r\n    updateDraftBranch({\r\n      ...draftBranch,\r\n      decisions: decisions.map((decision: string) => {\r\n        return {\r\n          _id: shortid.generate(),\r\n          text: decision,\r\n        }\r\n      }),\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <FormGroupTextarea\r\n        id=\"description\"\r\n        label=\"Text\"\r\n        onChange={handleBranchTextChange}\r\n        defaultValue={draftBranch.text}\r\n      />\r\n      <p>\r\n        Add multiple decisions by separating them with ';' followed by a SPACE\r\n      </p>\r\n      <FormGroupInputText\r\n        id=\"decisions\"\r\n        label=\"Decisions\"\r\n        onChange={handleBranchDecisionsChange}\r\n        defaultValue={\r\n          draftBranch.decisions\r\n            ? draftBranch.decisions.map((decision) => decision.text)\r\n            : ''\r\n        }\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(React.memo(NarrativeBranch))","import React from 'react'\r\n\r\nimport DATA from 'aer-data'\r\nimport * as aerTypes from 'aer-types'\r\n\r\nimport * as types from 'types'\r\n\r\nimport Accordion from 'components/organisms/Accordion'\r\nimport FormGroupSelect from 'components/molecules/FormGroupSelect'\r\nimport FormGroupInputText from 'components/molecules/FormGroupInputText'\r\n\r\ntype Props = {\r\n  draftBranch: types.RewardBranch\r\n  updateDraftBranch: (branch: types.Branch) => void\r\n}\r\n\r\nconst Treasures = ({\r\n  draftBranch,\r\n  updateDraftBranch,\r\n}: Props) => {\r\n\r\n  const dataTreasures: aerTypes.Treasure[] = Object.values(\r\n    DATA.normalizedData.ENG.treasures\r\n  )\r\n\r\n  const treasureOptions = dataTreasures.map((treasure: aerTypes.Treasure) => {\r\n    return {\r\n      value: treasure.id,\r\n      label: `${treasure.name} (Level: ${treasure.level})`,\r\n    }\r\n  })\r\n\r\n  const handleTreasureChange = (selectOptions: types.SelectOptions) => {\r\n    const selectedTreasureIds: string[] = selectOptions.map(\r\n      (option: types.SelectOption) => option.value\r\n    )\r\n\r\n    updateDraftBranch({\r\n      ...draftBranch,\r\n      treasure: {\r\n        ...draftBranch.treasure,\r\n        ids: [...selectedTreasureIds],\r\n      },\r\n    })\r\n  }\r\n\r\n  const handleTreasureAmountTier1Change = (event: React.ChangeEvent) => {\r\n    updateDraftBranch({\r\n      ...draftBranch,\r\n      treasure: {\r\n        ...draftBranch.treasure,\r\n        tier1: parseInt((event.target as HTMLInputElement).value),\r\n      },\r\n    })\r\n  }\r\n\r\n  const handleTreasureAmountTier2Change = (event: React.ChangeEvent) => {\r\n    updateDraftBranch({\r\n      ...draftBranch,\r\n      treasure: {\r\n        ...draftBranch.treasure,\r\n        tier2: parseInt((event.target as HTMLInputElement).value),\r\n      },\r\n    })\r\n  }\r\n\r\n  const handleTreasureAmountTier3Change = (event: React.ChangeEvent) => {\r\n    updateDraftBranch({\r\n      ...draftBranch,\r\n      treasure: {\r\n        ...draftBranch.treasure,\r\n        tier3: parseInt((event.target as HTMLInputElement).value),\r\n      },\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Accordion id=\"treasures\" title=\"Treasures\" open>\r\n      <FormGroupSelect\r\n        options={treasureOptions}\r\n        id=\"selectTreasures\"\r\n        label=\"Select Treasures\"\r\n        onChange={handleTreasureChange}\r\n        isMulti\r\n      />\r\n      <h3>Random Treasures</h3>\r\n      <p>Enter the amount of random treasures per tier.</p>\r\n      <FormGroupInputText\r\n        id=\"treasuresTier1\"\r\n        label=\"Tier 1\"\r\n        onChange={handleTreasureAmountTier1Change}\r\n        defaultValue={0}\r\n      />\r\n      <FormGroupInputText\r\n        id=\"treasuresTier2\"\r\n        label=\"Tier 2\"\r\n        onChange={handleTreasureAmountTier2Change}\r\n        defaultValue={0}\r\n      />\r\n      <FormGroupInputText\r\n        id=\"treasuresTier3\"\r\n        label=\"Tier 3\"\r\n        onChange={handleTreasureAmountTier3Change}\r\n        defaultValue={0}\r\n      />\r\n    </Accordion>\r\n  )\r\n}\r\n\r\nexport default React.memo(Treasures)","import React from 'react'\r\n\r\nimport DATA from 'aer-data'\r\nimport * as aerTypes from 'aer-types'\r\n\r\nimport * as types from 'types'\r\n\r\nimport Accordion from 'components/organisms/Accordion'\r\nimport FormGroupSelect from 'components/molecules/FormGroupSelect'\r\nimport FormGroupInputText from 'components/molecules/FormGroupInputText'\r\n\r\ntype Props = {\r\n  draftBranch: types.RewardBranch\r\n  updateDraftBranch: (branch: types.Branch) => void\r\n}\r\n\r\nconst Mages = ({ draftBranch, updateDraftBranch }: Props) => {\r\n  const dataMages: aerTypes.Mage[] = Object.values(\r\n    DATA.normalizedData.ENG.mages\r\n  )\r\n\r\n  const mageOptions = dataMages.map((mage: aerTypes.Mage) => {\r\n    return {\r\n      value: mage.id,\r\n      label: mage.name,\r\n    }\r\n  })\r\n\r\n  const handleMageChange = (selectOptions: types.SelectOptions) => {\r\n    const selectedMageIds: string[] = selectOptions.map(\r\n      (option: types.SelectOption) => option.value\r\n    )\r\n\r\n    updateDraftBranch({\r\n      ...draftBranch,\r\n      mage: {\r\n        ...draftBranch.mage,\r\n        ids: [...selectedMageIds],\r\n      },\r\n    })\r\n  }\r\n\r\n  const handleMageRandomAmountChange = (event: React.ChangeEvent) => {\r\n    updateDraftBranch({\r\n      ...draftBranch,\r\n      mage: {\r\n        ...draftBranch.mage,\r\n        randomAmount: parseInt((event.target as HTMLInputElement).value),\r\n      },\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Accordion id=\"mages\" title=\"Mages\" open>\r\n      <FormGroupSelect\r\n        options={mageOptions}\r\n        id=\"selectMages\"\r\n        label=\"Select Mages\"\r\n        onChange={handleMageChange}\r\n        isMulti\r\n      />\r\n      <h3>Random Mages</h3>\r\n      <p>Enter the amount of random mages.</p>\r\n      <FormGroupInputText\r\n        id=\"randomMagesAmount\"\r\n        label=\"Amount of random mages\"\r\n        onChange={handleMageRandomAmountChange}\r\n        defaultValue={0}\r\n      />\r\n    </Accordion>\r\n  )\r\n}\r\n\r\nexport default React.memo(Mages)\r\n","import React from 'react'\r\n\r\nimport DATA from 'aer-data'\r\nimport * as aerTypes from 'aer-types'\r\n\r\nimport * as types from 'types'\r\n\r\nimport Accordion from 'components/organisms/Accordion'\r\nimport FormGroupSelect from 'components/molecules/FormGroupSelect'\r\n\r\ntype Props = {\r\n  draftBranch: types.RewardBranch\r\n  updateDraftBranch: (branch: types.Branch) => void\r\n}\r\n\r\nconst Supply = ({ draftBranch, updateDraftBranch }: Props) => {\r\n  const dataSupply: aerTypes.ICard[] = Object.values(\r\n    DATA.normalizedData.ENG.cards\r\n  )\r\n\r\n  const supplyOptions = dataSupply.map((supply: aerTypes.ICard) => {\r\n    return {\r\n      value: supply.id,\r\n      label: `${supply.name} (${supply.type})`,\r\n    }\r\n  })\r\n\r\n  const handleSupplyChange = (selectOptions: types.SelectOptions) => {\r\n    const selectedSupplyIds: string[] = selectOptions.map(\r\n      (option: types.SelectOption) => option.value\r\n    )\r\n\r\n    updateDraftBranch({\r\n      ...draftBranch,\r\n      supply: {\r\n        ...draftBranch.supply,\r\n        ids: [...selectedSupplyIds],\r\n      },\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Accordion id=\"supply\" title=\"Supply\" open>\r\n      <FormGroupSelect\r\n        options={supplyOptions}\r\n        id=\"selectSupplyCards\"\r\n        label=\"Select Supply Cards\"\r\n        onChange={handleSupplyChange}\r\n        isMulti\r\n      />\r\n      <h3>Random supply cards</h3>\r\n    </Accordion>\r\n  )\r\n}\r\n\r\nexport default React.memo(Supply)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport * as types from 'types'\r\n\r\nimport { actions } from 'Redux/Store'\r\n\r\nimport Fieldset from 'components/molecules/Fieldset'\r\nimport Treasures from './Treasures'\r\nimport Mages from './Mages'\r\nimport Supply from './Supply'\r\n\r\nconst mapDispatchToProps = {\r\n  updateDraftBranch:\r\n    actions.DraftExpedition.SequenceConfig.DraftBranch.updateDraftBranch,\r\n}\r\n\r\ntype Props = typeof mapDispatchToProps & {\r\n  draftBranch: types.RewardBranch\r\n}\r\n\r\nconst RewardBranch = ({ \r\n  draftBranch,\r\n  updateDraftBranch \r\n}: Props) => {\r\n\r\n  const handleRewardTypeChange = (event: React.ChangeEvent) => {\r\n    updateDraftBranch({\r\n      ...draftBranch,\r\n      rewardType: (event.target as HTMLInputElement).value as types.RewardType,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Fieldset legend=\"Reward type\" legendVisible>\r\n        <div className=\"radio-wrapper\">\r\n          <input\r\n            type=\"radio\"\r\n            name=\"rewardType\"\r\n            id=\"regular\"\r\n            defaultChecked\r\n            value=\"regular\"\r\n            onChange={handleRewardTypeChange}\r\n          />\r\n          <label htmlFor=\"regular\">regular</label>\r\n        </div>\r\n        <div className=\"radio-wrapper\">\r\n          <input\r\n            type=\"radio\"\r\n            name=\"rewardType\"\r\n            id=\"custom\"\r\n            value=\"custom\"\r\n            onChange={handleRewardTypeChange}\r\n          />\r\n          <label htmlFor=\"custom\">custom</label>\r\n        </div>\r\n      </Fieldset>\r\n      {draftBranch.rewardType === 'custom' && (\r\n        <>\r\n          <Treasures draftBranch={draftBranch} updateDraftBranch={updateDraftBranch} />\r\n          <Mages draftBranch={draftBranch} updateDraftBranch={updateDraftBranch} />\r\n          <Supply draftBranch={draftBranch} updateDraftBranch={updateDraftBranch} />\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(React.memo(RewardBranch))","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport * as types from 'types'\n\nimport { RootState, selectors } from 'Redux/Store'\n\nimport Fieldset from 'components/molecules/Fieldset'\nimport ModalBodyWrapper from 'components/atoms/ModalBodyWrapper'\nimport BaseBranch from './BaseBranch'\nimport NarrativeBranch from './NarrativeBranch'\nimport RewardBranch from './RewardBranch'\n\nconst mapStateToProps = (state: RootState) => ({\n  draftBranch: selectors.DraftExpedition.SequenceConfig.DraftBranch.getDraftBranchState(\n    state\n  ),\n})\n\ntype Props = ReturnType<typeof mapStateToProps> & {}\n\nconst Body = ({ \n  draftBranch, \n}: Props) => {\n\n  const renderBranch = (branch: types.Branch) => {\n    switch (branch.type) {\n      case 'narrative': {\n        return <NarrativeBranch draftBranch={draftBranch as types.NarrativeBranch} />\n      }\n\n      case 'reward': {\n        return <RewardBranch draftBranch={draftBranch as types.RewardBranch} />\n      }\n\n      default: {\n        return <></>\n      }\n    }\n  }\n\n  return (\n    <ModalBodyWrapper>\n      <Fieldset legend=\"Branches\">\n        <BaseBranch draftBranch={draftBranch as types.BranchBase} />\n\n        {renderBranch(draftBranch as types.Branch)}\n      </Fieldset>\n    </ModalBodyWrapper>\n  )\n}\n\nexport default connect(\n  mapStateToProps\n)(React.memo(Body))\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { RootState, selectors, actions } from 'Redux/Store'\n\nimport * as types from 'types'\n\nimport Button from 'components/atoms/Button'\n\nconst mapStateToProps = (state: RootState) => ({\n  draftBranch: selectors.DraftExpedition.SequenceConfig.DraftBranch.getDraftBranchState(\n    state\n  ),\n})\n\nconst mapDispatchToProps = {\n  addBranch: actions.DraftExpedition.SequenceConfig.Branches.addBranch,\n  clearDraftBranch: actions.DraftExpedition.SequenceConfig.DraftBranch.clearDraftBranch,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps & {\n  modal: any,\n}\n\nconst Footer = ({\n  modal,\n  draftBranch,\n  addBranch,\n  clearDraftBranch\n}: Props) => {\n\n  const handleAddBranch = () => {\n    addBranch({\n      ...(draftBranch as types.Branch),\n    })\n    clearDraftBranch()\n    modal.hide()\n  }\n\n  const handleCancel = () => {\n    clearDraftBranch()\n    modal.hide()\n  }\n\n  return (\n    <>\n      <Button onClick={handleCancel}>Cancel</Button>\n      <Button onClick={handleAddBranch}>Add branch</Button>\n    </>\n  )\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(React.memo(Footer))\n","import React from 'react'\n\nimport * as types from 'types'\n\nimport Body from './Body'\nimport Footer from './Footer'\n\ntype Props = {\n  modal: types.Modal\n}\n\nconst AddBranchModal = ({\n  modal,\n}: Props) => {\n\n  return (\n    <modal.RenderModal\n      titleLabel=\"Add branch\"\n      footer={<Footer modal={modal} />}>\n      <Body />\n    </modal.RenderModal>\n  )\n}\n\nexport default React.memo(AddBranchModal)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport * as types from 'types'\n\nimport { RootState, selectors, actions } from 'Redux/Store'\n\nimport { useModal } from 'hooks/useModal'\n\nimport Accordion from 'components/organisms/Accordion'\nimport Button from 'components/atoms/Button'\nimport AddBranchModal from './AddBranchModal'\n\nconst mapStateToProps = (state: RootState) => ({\n  branches: selectors.DraftExpedition.SequenceConfig.Branches.getBranches(\n    state\n  ),\n})\n\nconst mapDispatchToProps = {\n  draftAddBranch: actions.DraftExpedition.SequenceConfig.DraftBranch.draftAddBranch,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps & {}\n\nconst Branches = ({\n  branches,\n  draftAddBranch,\n}: Props) => {\n  const addBranchModal = useModal()\n\n  const handleAddBranch = () => {\n    addBranchModal.show()\n    draftAddBranch()\n  }\n\n  return (\n    <Accordion id=\"branches\" title=\"Branches\" open>\n      <Button\n        type=\"button\"\n        style={{ display: 'block' }}\n        onClick={handleAddBranch}\n      >\n        Add branch\n      </Button>\n      <AddBranchModal modal={addBranchModal} />\n\n      {branches.length > 0 ? (\n        <ul>\n          {branches.map((branch: types.Branch) => {\n            switch (branch.type) {\n              case 'narrative': {\n                const narrativeBranch = branch as types.NarrativeBranch\n\n                return (\n                  <li key={branch.id}>\n                    <p>Id: {branch.id}</p>\n                    <p>Type: {branch.type}</p>\n                    {narrativeBranch.text && (\n                      <p>Text: {narrativeBranch.text}</p>\n                    )}\n                    {narrativeBranch.decisions ? (\n                      <>\n                        <p>Desicions:</p>\n                        <ul>\n                          {narrativeBranch.decisions.map(\n                            (decision: types.Decision) => (\n                              <li key={decision._id}>{decision.text}</li>\n                            )\n                          )}\n                        </ul>\n                      </>\n                    ) : (\n                      <p>No Desicions</p>\n                    )}\n                  </li>\n                )\n              }\n\n              case 'reward': {\n                const rewardBranch = branch as types.RewardBranch\n\n                return (\n                  <li key={branch.id}>\n                    <p>Id: {branch.id}</p>\n                    <p>Type: {branch.type}</p>\n                    {rewardBranch.rewardType && (\n                      <p>Reward type: {rewardBranch.rewardType}</p>\n                    )} \n                  </li>\n                )\n              }\n\n              default: {\n                return (\n                  <li key={branch.id}>\n                    <p>Id: {branch.id}</p>\n                    <p>Type: {branch.type}</p>\n                  </li>\n                )\n              }\n            }\n          })}\n        </ul>\n      ) : (\n        <p>No branches added</p>\n      )}\n    </Accordion>\n  )\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(React.memo(Branches))\n","const copyToClipboard = (json: string) => {\n  window.navigator.clipboard.writeText(json)\n}\n\nexport default copyToClipboard\n","import { saveAs } from 'file-saver'\n\nconst saveToFile = (json: string, name: string) => {\n  const blob = new Blob([json], { type: 'text/json;charset=utf-8' })\n\n  return saveAs(blob, `${name}.json`)\n}\n\nexport default saveToFile\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  width: 50%;\n  padding: 0 0 0 32px;\n\n  @media all and (max-width: 920px) {\n    width: 100%;\n    padding: 32px 0 0 0;\n  }\n`\n\nexport default Wrapper\n","import styled from 'styled-components/macro'\n\nconst Pre = styled('pre')`\n  padding: 24px;\n  border: 1px solid #dadada;\n  background: #fafafa;\n`\n\nexport default Pre\n\n\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport * as types from 'types'\n\nimport { RootState, selectors } from 'Redux/Store'\n\nimport { saveToFile, copyToClipboard } from 'helpers'\n\nimport Button from 'components/atoms/Button'\nimport Wrapper from './__styled__/Wrapper'\nimport Pre from './__styled__/Pre'\n\nconst mapStateToProps = (state: RootState) => ({\n  name: selectors.DraftExpedition.Name.getExpeditionName(state),\n  bigPocketVariantConfig: selectors.DraftExpedition.BigPocketVariantConfig.getBigPocketVariantConfig(\n    state\n  ),\n  branches: selectors.DraftExpedition.SequenceConfig.Branches.getBranches(\n    state\n  ),\n})\n\ntype Props = ReturnType<typeof mapStateToProps> & {\n  fileName?: string,\n}\n\nconst Preview = ({\n  fileName = 'expedition',\n  name,\n  bigPocketVariantConfig,\n  branches,\n}: Props) => {\n\n  const dataBranches = branches.reduce((branches, branch: types.Branch) => {\n    switch (branch.type) {\n      case 'narrative': {\n        const narrativeBranch = branch as types.NarrativeBranch\n\n        const newBranch = {\n          type: branch.type,\n          config: {\n            text: narrativeBranch.text,\n            decisions: narrativeBranch.decisions\n              ? narrativeBranch.decisions.map((decision) => decision.text)\n              : false,\n          },\n        }\n\n        return {\n          ...branches,\n          [branch.id]: newBranch,\n        }\n      }\n\n      case 'reward': {\n        const rewardBranch = branch as types.RewardBranch\n\n        const newBranch = {\n          type: branch.type,\n          config: {\n            type: rewardBranch.rewardType,\n          },\n        }\n\n        const randomTreasuresTier1 = rewardBranch.treasure.tier1 !== 0\n          ? Array(rewardBranch.treasure.tier1).fill({\n              random: true,\n              level: 1,\n            })\n          : []\n\n        const randomTreasuresTier2 = rewardBranch.treasure.tier2 !== 0\n          ? Array(rewardBranch.treasure.tier2).fill({\n              random: true,\n              level: 2,\n            })\n          : []\n\n        const randomTreasuresTier3 =\n          rewardBranch.treasure.tier3 !== 0\n            ? Array(rewardBranch.treasure.tier3).fill({\n                random: true,\n                level: 3,\n              })\n            : []\n\n        if (\n          rewardBranch.treasure.ids.length > 0 ||\n          randomTreasuresTier1.length > 0 ||\n          randomTreasuresTier2.length > 0 ||\n          randomTreasuresTier3.length > 0\n        ) {\n          Object.assign(newBranch.config, {\n            treasure: {\n              ids: [\n                ...rewardBranch.treasure.ids,\n                ...randomTreasuresTier1,\n                ...randomTreasuresTier2,\n                ...randomTreasuresTier3,\n              ],\n            },\n          })\n        }\n\n        const randomMageAmount =\n          rewardBranch.mage.randomAmount !== 0\n            ? Array(rewardBranch.mage.randomAmount).fill({\n                random: true\n              })\n            : []\n\n        if (\n          rewardBranch.mage.ids.length > 0 ||\n          randomMageAmount.length > 0\n        ) {\n          Object.assign(newBranch.config, {\n            mage: {\n              ids: [\n                ...rewardBranch.mage.ids,\n                ...randomMageAmount\n              ],\n            },\n          })\n        }\n\n        if (rewardBranch.supply.ids.length > 0) {\n          Object.assign(newBranch.config, {\n            supply: {\n              ids: [...rewardBranch.supply.ids],\n            },\n          })\n        }\n\n        return {\n          ...branches,\n          [branch.id]: newBranch,\n        }\n      }\n\n      default: {\n        return {\n          ...branches,\n          [branch.id]: {\n            type: branch.type,\n          },\n        }\n      }\n    }\n    \n  }, {})\n\n  const data = {\n    name: name,\n    bigPocketVariantConfig: bigPocketVariantConfig,\n    sequenceConfig: {\n      branches: dataBranches\n    }\n  }\n\n  const handleCopyToClipboard = () => {\n    copyToClipboard(JSON.stringify(data, null, '  '))\n  }\n\n  const handleSave = () => {\n    saveToFile(JSON.stringify(data, null, '  '), fileName)\n  }\n\n  return (\n    <Wrapper>\n      <Pre>{JSON.stringify(data, null, '  ')}</Pre>\n\n      <Button type=\"button\" onClick={handleCopyToClipboard}>\n        Copy to clipboard\n      </Button>\n      <Button type=\"button\" onClick={handleSave}>\n        Save to file\n      </Button>\n    </Wrapper>\n  )\n}\n\nexport default connect(\n  mapStateToProps\n)(React.memo(Preview))\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  display: flex;\n\n  @media all and (max-width: 920px) {\n    flex-direction: column;\n  }\n`\n\nexport default Wrapper\n","import styled from 'styled-components/macro'\n\nconst Form = styled('form')`\n  width: 50%;\n\n  @media all and (max-width: 920px) {\n    width: 100%;\n  }\n`\n\nexport default Form\n","import React from 'react'\n\nimport BasicInformation from 'components/templates/BasicInformation'\nimport Branches from 'components/templates/Branches'\nimport Preview from 'components/molecules/Preview'\n\nimport Wrapper from './__styled__/Wrapper'\nimport Form from './__styled__/Form'\n\nconst Configurator = () => {\n\n  return (\n    <Wrapper>\n      <Form>\n        <BasicInformation />\n        <Branches />\n      </Form>\n\n      <Preview />\n    </Wrapper>\n  )\n}\n\nexport default React.memo(Configurator)\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  padding: 32px;\n`\n\nexport default Wrapper\n","import React from 'react'\n\nimport H1 from 'components/atoms/H1'\nimport Configurator from 'components/molecules/Configurator'\nimport Wrapper from './__styled__/Wrapper'\n\nconst MainApp = () => {\n  return (\n    <Wrapper>\n      <H1>AER: Custom Expedition Editor</H1>\n      <Configurator />\n      <div id=\"modal-root\" />\n    </Wrapper>\n  )\n}\n\nexport default MainApp\n","import React from 'react'\n\nimport { ThemeProvider } from 'styled-components/macro'\n\nimport GlobalStyle from 'GlobalStyle'\nimport mainTheme from 'themes/main'\n\nimport MainApp from './MainApp'\n\nconst App = () => (\n  <ThemeProvider theme={mainTheme}>\n    <GlobalStyle />\n    <MainApp />\n  </ThemeProvider>\n)\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport configureStore from './Redux/configureStore'\nimport { initialState } from './Redux/Store'\n\nimport * as serviceWorker from './serviceWorker'\n\nimport App from './components/App'\n\nconst store = configureStore(initialState)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport { install, StoreCreator } from 'redux-loop'\n\nimport { RootReducer, RootState } from './Store'\n\nconst configureStore = (initialState: RootState) => {\n  // Add middleware to this array if necessary\n  const middleWares: any[] = []\n\n  const enhancers = [applyMiddleware(...middleWares), install<RootState>()]\n\n  const composeEnhancers =\n    process.env.NODE_ENV !== 'production' &&\n    typeof window === 'object' &&\n    // @ts-ignore\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      // @ts-ignore\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      : compose\n\n  const enhancedCreateStore = createStore as StoreCreator\n  const store = enhancedCreateStore(\n    RootReducer,\n    initialState,\n    composeEnhancers(...enhancers)\n  )\n\n  return store\n}\n\nexport { configureStore as default }\n"],"sourceRoot":""}