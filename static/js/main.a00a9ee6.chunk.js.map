{"version":3,"sources":["Redux/Store/DraftExpedition/Name/index.ts","Redux/Store/DraftExpedition/BigPocketVariantConfig/index.ts","Redux/Store/DraftExpedition/SequenceConfig/Branches/index.ts","Redux/Store/DraftExpedition/SequenceConfig/index.ts","Redux/Store/DraftExpedition/index.ts","Redux/Store/index.ts","serviceWorker.ts","GlobalStyle.ts","themes/main/index.ts","components/atoms/H1.tsx","components/organisms/Accordion/__styled__/Wrapper.tsx","components/organisms/Accordion/__styled__/Header.tsx","components/atoms/Button.tsx","components/organisms/Accordion/__styled__/Summary.tsx","components/organisms/Accordion/__styled__/Content.tsx","components/organisms/Accordion/__styled__/SummaryIcon.tsx","components/organisms/Accordion/index.tsx","components/atoms/ScreenReaderOnlyText.tsx","components/molecules/Fieldset/__styled__/Wrapper.tsx","components/molecules/Fieldset/__styled__/Legend.tsx","components/molecules/Fieldset/index.tsx","components/atoms/Label.tsx","components/atoms/Input.tsx","components/molecules/FormGroupInputText/__styled__/Wrapper.tsx","components/molecules/FormGroupInputText/index.tsx","components/molecules/FormGroupCheckbox/__styled__/Wrapper.tsx","components/molecules/FormGroupCheckbox/index.tsx","components/templates/BasicInformation/index.tsx","helpers/copyToClipboard.ts","helpers/saveToFile.ts","components/molecules/Preview/__styled__/Wrapper.tsx","components/molecules/Preview/__styled__/Pre.tsx","components/molecules/Preview/index.tsx","components/molecules/Configurator/__styled__/Wrapper.tsx","components/molecules/Configurator/__styled__/Form.tsx","components/molecules/Configurator/index.tsx","components/App/__styled__/Wrapper.tsx","components/App/MainApp.tsx","components/App/index.tsx","index.tsx","Redux/configureStore.ts"],"names":["ActionTypes","actions","noOp","createAction","setExpeditionName","name","SET_EXPEDITION_NAME","selectors","getExpeditionName","state","DraftExpedition","Name","setBigPocketVariantConfig","value","SET_BIG_POCKET_VARIANT_CONFIG","getBigPocketVariantConfig","BigPocketVariantConfig","initialState","addBranch","branch","ADD_BRANCH","getBranchesState","SequenceConfig","Branches","getBranchIds","createSelector","branches","Object","keys","getBranches","values","Reducer","combineReducers","action","type","payload","id","nextBranchId","RootReducer","reduceReducers","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","mainTheme","colors","H1","styled","Wrapper","Header","Button","Summary","Content","SummaryIcon","React","memo","title","open","children","useState","isOpen","setIsOpen","aria-expanded","aria-controls","onClick","className","role","aria-labelledby","hidden","ScreenReaderOnlyText","Legend","legend","legendVisible","Label","Input","label","labelHidden","onChange","defaultValue","htmlFor","defaultChecked","mapDispatchToProps","connect","expeditionName","bigPocketVariantConfig","event","target","currentTarget","checked","copyToClipboard","json","navigator","clipboard","writeText","saveToFile","blob","Blob","saveAs","Pre","fileName","data","sequenceConfig","reduce","JSON","stringify","Form","identifier","branchIds","setBranch","setNextBranchId","handleBranchNextBranchIdChange","style","display","margin","length","map","key","filter","branchId","console","log","MainApp","App","theme","store","enhancers","applyMiddleware","install","composeEnhancers","compose","enhancedCreateStore","createStore","configureStore","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a00a9ee6.chunk.js","sourcesContent":["import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer } from 'redux-loop'\n\n///////////\n// STATE //\n///////////\n\nexport type State = string\nexport const initialState: State = \"\"\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  SET_EXPEDITION_NAME = 'DraftExpedition/Name/SET_EXPEDITION_NAME',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  setExpeditionName: (name: string) =>\n    createAction(ActionTypes.SET_EXPEDITION_NAME, name),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.SET_EXPEDITION_NAME: {\n      return action.payload\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport type NameStateSlice = {\n  DraftExpedition: {\n    Name: State\n  }\n}\n\nconst getExpeditionName = (state: NameStateSlice) => state.DraftExpedition.Name\n\nexport const selectors = {\n  getExpeditionName,\n}\n","import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer } from 'redux-loop'\n\n///////////\n// STATE //\n///////////\n\nexport type State = boolean\nexport const initialState: State = false\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  SET_BIG_POCKET_VARIANT_CONFIG = 'DraftExpedition/BigPocketVariantConfig/SET_BIG_POCKET_VARIANT_CONFIG',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  setBigPocketVariantConfig: (value: boolean) =>\n    createAction(ActionTypes.SET_BIG_POCKET_VARIANT_CONFIG, value),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.SET_BIG_POCKET_VARIANT_CONFIG: {\n      return action.payload\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport type BigPocketVariantConfigStateSlice = {\n  DraftExpedition: {\n    BigPocketVariantConfig: State\n  }\n}\n\nconst getBigPocketVariantConfig = (state: BigPocketVariantConfigStateSlice) => state.DraftExpedition.BigPocketVariantConfig\n\nexport const selectors = {\n  getBigPocketVariantConfig,\n}\n","import { createSelector } from 'reselect'\n\nimport { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer } from 'redux-loop'\n\n///////////\n// STATE //\n///////////\n\ntype Branch = {\n  id: string,\n  type: 'narrative' | 'battle' | 'reward',\n  nextBranchId?: string[]\n}\n\ntype Branches = {\n  [id: string]: Branch\n}\n\n\nexport type State = Branches\nexport const initialState: State = {}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  ADD_BRANCH = 'DraftExpedition/SequenceConfig/Branches/ADD_BRANCH',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  addBranch: (branch: Branch) =>\n    createAction(ActionTypes.ADD_BRANCH, branch),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.ADD_BRANCH: {\n      const { id, type, nextBranchId } = action.payload\n\n      return {\n        ...state,\n        [id]: {\n          id,\n          type,\n          nextBranchId\n        }\n      }\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport type BranchesStateSlice = {\n  DraftExpedition: {\n    SequenceConfig: {\n      Branches: State\n    }\n  }\n}\n\nconst getBranchesState = (state: BranchesStateSlice) => state.DraftExpedition.SequenceConfig.Branches\n\nconst getBranchIds = createSelector([getBranchesState], (branches) =>\n  Object.keys(branches)\n)\n\nconst getBranches = createSelector(\n  [getBranchesState], (\n  branches\n) =>\n  Object.values(branches)\n)\n\nexport const selectors = {\n  getBranchesState,\n  getBranchIds,\n  getBranches,\n}\n","import { combineReducers } from 'redux-loop'\n\nimport * as Branches from './Branches'\n\n///////////\n// STATE //\n///////////\n\nexport type State = {\n  Branches: Branches.State\n}\n\nexport const initialState = {\n  Branches: Branches.initialState,\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport const actions = {\n  Branches: Branches.actions,\n}\n\nexport type Action = Branches.Action\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer = combineReducers({\n  Branches: Branches.Reducer,\n})\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport const selectors = {\n  Branches: Branches.selectors,\n}\n","import { combineReducers } from 'redux-loop'\n\nimport * as Name from './Name'\nimport * as BigPocketVariantConfig from './BigPocketVariantConfig'\nimport * as SequenceConfig from './SequenceConfig'\n\n///////////\n// STATE //\n///////////\n\nexport type State = {\n  Name: Name.State\n  BigPocketVariantConfig: BigPocketVariantConfig.State\n  SequenceConfig: SequenceConfig.State\n}\n\nexport const initialState = {\n  Name: Name.initialState,\n  BigPocketVariantConfig: BigPocketVariantConfig.initialState,\n  SequenceConfig: SequenceConfig.initialState,\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport const actions = {\n  Name: Name.actions,\n  BigPocketVariantConfig: BigPocketVariantConfig.actions,\n  SequenceConfig: SequenceConfig.actions,\n}\n\nexport type Action =\n  | Name.Action\n  | BigPocketVariantConfig.Action\n  | SequenceConfig.Action\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer = combineReducers({\n  Name: Name.Reducer,\n  BigPocketVariantConfig: BigPocketVariantConfig.Reducer,\n  SequenceConfig: SequenceConfig.Reducer,\n})\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport const selectors = {\n  Name: Name.selectors,\n  BigPocketVariantConfig: BigPocketVariantConfig.selectors,\n  SequenceConfig: SequenceConfig.selectors,\n}\n","import { combineReducers, reduceReducers } from 'redux-loop'\n\nimport * as DraftExpedition from 'Redux/Store/DraftExpedition'\n\nexport type RootState = {\n  DraftExpedition: DraftExpedition.State\n}\n\nexport const initialState = {\n  DraftExpedition: DraftExpedition.initialState\n}\n\nexport const actions = {\n  DraftExpedition: DraftExpedition.actions,\n}\n\nexport type RootAction =\n  | DraftExpedition.Action\n\nexport const RootReducer = reduceReducers(\n  combineReducers<RootState>({\n    DraftExpedition: DraftExpedition.Reducer,\n  })\n)\n\nexport const selectors = {\n  DraftExpedition: DraftExpedition.selectors\n}\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createGlobalStyle } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle`\n  *,\n  ::after, \n  ::before {\n    box-sizing: border-box;\n  }\n\n  body {\n    font-family: 'Roboto', Arial, sans-serif;\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-font-smoothing: antialiased;\n    text-rendering: optimizeLegibility;\n    margin: 0;\n    padding: 0;\n  }\n`\nexport default GlobalStyle\n","const mainTheme = {\n  colors: {}\n}\n\nexport default mainTheme\n","\n\nimport styled from 'styled-components/macro'\n\nconst H1 = styled('h1')`\n  color: #2196f3;\n  margin-top: 0;\n`\n\nexport default H1\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  margin-bottom: 32px;\n`\n\nexport default Wrapper\n","import styled from 'styled-components/macro'\n\nconst Header = styled('h3')`\n  border-bottom: 1px solid #dadada;\n  margin: 0;\n`\n\nexport default Header\n","import styled from 'styled-components/macro'\n\nconst Button = styled('button')`\n  height: 32px;\n  padding: 0 8px;\n  cursor: pointer;\n  font-family: 'Roboto';\n`\n\nexport default Button\n","import styled from 'styled-components/macro'\n\nimport Button from 'components/atoms/Button'\n\nconst Summary = styled(Button)`\n  height: auto;\n  font-size: 1.5rem;\n  font-weight: 100;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0;\n  position: relative;\n  outline: 0;\n  border: none;\n  background: transparent;\n`\n\nexport default Summary\n","import styled from 'styled-components/macro'\n\nconst Content = styled('div')`\n  padding-top: 16px;\n`\n\nexport default Content\n","import styled from 'styled-components/macro'\n\nconst SummaryIcon = styled('span')`\n  position: absolute;\n  right: 8px;\n`\n\nexport default SummaryIcon\n","import React, { useState } from 'react'\n\nimport Wrapper from './__styled__/Wrapper'\nimport Header from './__styled__/Header'\nimport Summary from './__styled__/Summary'\nimport Content from './__styled__/Content'\nimport SummaryIcon from './__styled__/SummaryIcon'\n\ntype Props = {\n  id: string\n  title: string\n  open?: boolean\n  children: React.ReactNode\n}\n\nconst Accordion = ({\n  id,\n  title,\n  open,\n  children\n}: Props) => {\n  const [isOpen, setIsOpen] = useState<boolean>(open ? open : false)\n\n  const handleClick = () => {\n    setIsOpen(!isOpen)\n  }\n\n  return (\n    <Wrapper>\n      <Header>\n        <Summary\n          id={`${id}Summary`}\n          type=\"button\"\n          aria-expanded={isOpen ? 'true' : 'false'}\n          aria-controls={`${id}Content`}\n          onClick={handleClick}\n        >\n          {title}\n          <SummaryIcon className=\"material-icons\">\n            {isOpen ? 'expand_less' : 'expand_more'}\n          </SummaryIcon>\n        </Summary>\n      </Header>\n      <Content\n        id={`${id}Content`}\n        role=\"region\"\n        aria-labelledby={`${id}Summary`}\n        hidden={isOpen ? false : true}\n      >\n        { children }\n      </Content>\n    </Wrapper>\n  )\n}\n\nexport default React.memo(Accordion)\n","import styled from 'styled-components/macro'\n\nconst ScreenReaderOnlyText = styled('span')`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: 0;\n`\n\nexport default ScreenReaderOnlyText\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('fieldset')`\n  padding: 0;\n  border: none;\n`\n\nexport default Wrapper\n","import styled from 'styled-components/macro'\n\nconst Legend = styled('legend')`\n  padding: 0;\n`\n\nexport default Legend\n","import React from 'react'\n\nimport ScreenReaderOnlyText from 'components/atoms/ScreenReaderOnlyText'\nimport Wrapper from './__styled__/Wrapper'\nimport Legend from './__styled__/Legend'\n\ntype Props = {\n  legend: string\n  legendVisible?: boolean\n  children: React.ReactNode\n}\n\nconst Fieldset = ({\n  legend,\n  legendVisible,\n  children,\n}: Props) => {\n  return (\n    <Wrapper>\n      <Legend>\n        {\n          legendVisible \n            ? (legend) \n            : (<ScreenReaderOnlyText>{legend}</ScreenReaderOnlyText>)\n        }\n      </Legend>\n      {children}\n    </Wrapper>\n  )\n}\n\nexport default React.memo(Fieldset)\n","import styled from 'styled-components/macro'\n\nconst Label = styled('label')`\n  display: block;\n  font-family: 'Roboto';\n  font-size: 12px;\n  margin-bottom: 4px;\n`\n\nexport default Label\n","import styled from 'styled-components/macro'\n\nconst Input = styled('input')`\n  height: 32px;\n  padding: 0 8px;\n  font-family: 'Roboto';\n  border: 1px solid #dadada;\n`\n\nexport default Input\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  margin-bottom: 16px;\n`\n\nexport default Wrapper\n","import React from 'react'\n\nimport ScreenReaderOnlyText from 'components/atoms/ScreenReaderOnlyText'\nimport Label from 'components/atoms/Label'\nimport Input from 'components/atoms/Input'\nimport Wrapper from './__styled__/Wrapper'\n\ntype Props = {\n  id: string\n  label: string\n  labelHidden?: boolean\n  name?: string\n  onChange: (event: any) => void\n  defaultValue: string | number | undefined\n}\n\nconst FormGroupInputText = ({\n  id,\n  label,\n  labelHidden,\n  name,\n  onChange,\n  defaultValue,\n}: Props) => {\n  \n  return (\n    <Wrapper>\n      <Label htmlFor={id}>\n        {\n          labelHidden ? (\n            <ScreenReaderOnlyText>{label}</ScreenReaderOnlyText>\n          ) : (\n            label\n          )\n        }\n      </Label>\n      <Input\n        id={id}\n        name={name ? name : id}\n        type=\"text\"\n        onChange={onChange}\n        defaultValue={defaultValue}\n      />\n    </Wrapper>\n  )\n}\n\nexport default React.memo(FormGroupInputText)\n","import styled from 'styled-components/macro'\n\nimport Label from 'components/atoms/Label'\n\nconst Wrapper = styled('div')`\n  margin-bottom: 16px;\n\n  ${Label} {\n    font-size: 16px;\n    margin-bottom: 0;\n  }\n\n  input {\n    margin: 0 8px 0 0;\n  }\n`\n\nexport default Wrapper\n","import React from 'react'\n\nimport ScreenReaderOnlyText from 'components/atoms/ScreenReaderOnlyText'\nimport Label from 'components/atoms/Label'\nimport Wrapper from './__styled__/Wrapper'\n\ntype Props = {\n  id: string\n  label: string\n  labelHidden?: boolean\n  name?: string\n  onChange: (event: any) => void\n  defaultChecked: boolean\n}\n\nconst FormGroupCheckbox = ({\n  id,\n  label,\n  labelHidden,\n  name,\n  onChange,\n  defaultChecked,\n}: Props) => {\n  return (\n    <Wrapper>\n      <Label htmlFor={id}>\n        <input\n          id={id}\n          type=\"checkbox\"\n          name={name ? name : id}\n          onChange={onChange}\n          defaultChecked={defaultChecked}\n        />\n        {labelHidden ? (\n          <ScreenReaderOnlyText>{label}</ScreenReaderOnlyText>\n        ) : (\n          label\n        )}\n      </Label>\n    </Wrapper>\n  )\n}\n\nexport default React.memo(FormGroupCheckbox)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { RootState, selectors, actions } from 'Redux/Store'\n\nimport Accordion from 'components/organisms/Accordion'\nimport Fieldset from 'components/molecules/Fieldset'\nimport FormGroupInputText from 'components/molecules/FormGroupInputText'\nimport FormGroupCheckbox from 'components/molecules/FormGroupCheckbox'\n\nconst mapStateToProps = (state: RootState) => ({\n  expeditionName: selectors.DraftExpedition.Name.getExpeditionName(state),\n  bigPocketVariantConfig: selectors.DraftExpedition.BigPocketVariantConfig.getBigPocketVariantConfig(\n    state\n  ),\n})\n\nconst mapDispatchToProps = {\n  setExpeditionName: actions.DraftExpedition.Name.setExpeditionName,\n  setBigPocketVariantConfig:\n    actions.DraftExpedition.BigPocketVariantConfig.setBigPocketVariantConfig,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps & {}\n\nconst BasicInformation = ({\n  expeditionName,\n  bigPocketVariantConfig,\n  setExpeditionName,\n  setBigPocketVariantConfig,\n}: Props) => {\n\n  const handleNameChange = (event: any) => {\n    setExpeditionName(event.target.value)\n  }\n\n  const handleBigPocketChange = (event: any) => {\n    setBigPocketVariantConfig(event.currentTarget.checked)\n  }\n\n  return (\n    <Accordion id=\"basicInformation\" title=\"Basic Information\" open>\n      <Fieldset legend=\"Basic Information\">\n        <FormGroupInputText\n          id=\"expeditionName\"\n          label=\"Expedition Name\"\n          onChange={handleNameChange}\n          defaultValue={expeditionName}\n        />\n        <FormGroupCheckbox\n          id=\"bigPocketVariantConfig\"\n          label=\"Big Pocket Mode\"\n          onChange={handleBigPocketChange}\n          defaultChecked={bigPocketVariantConfig}\n        />\n      </Fieldset>\n    </Accordion>\n  )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BasicInformation)\n","const copyToClipboard = (json: string) => {\n  window.navigator.clipboard.writeText(json)\n}\n\nexport default copyToClipboard\n","import { saveAs } from 'file-saver'\n\nconst saveToFile = (json: string, name: string) => {\n  const blob = new Blob([json], { type: 'text/json;charset=utf-8' })\n\n  return saveAs(blob, `${name}.json`)\n}\n\nexport default saveToFile\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  width: 50%;\n  padding: 0 0 0 32px;\n\n  @media all and (max-width: 920px) {\n    width: 100%;\n    padding: 32px 0 0 0;\n  }\n`\n\nexport default Wrapper\n","import styled from 'styled-components/macro'\n\nconst Pre = styled('pre')`\n  padding: 24px;\n  border: 1px solid #dadada;\n  background: #fafafa;\n`\n\nexport default Pre\n\n\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { RootState, selectors } from 'Redux/Store'\n\nimport { saveToFile, copyToClipboard } from 'helpers'\n\nimport Button from 'components/atoms/Button'\nimport Wrapper from './__styled__/Wrapper'\nimport Pre from './__styled__/Pre'\n\nconst mapStateToProps = (state: RootState) => ({\n  name: selectors.DraftExpedition.Name.getExpeditionName(state),\n  bigPocketVariantConfig: selectors.DraftExpedition.BigPocketVariantConfig.getBigPocketVariantConfig(\n    state\n  ),\n  branches: selectors.DraftExpedition.SequenceConfig.Branches.getBranches(\n    state\n  ),\n})\n\ntype Props = ReturnType<typeof mapStateToProps> & {\n  fileName?: string,\n}\n\nconst Preview = ({\n  fileName = 'expedition',\n  name,\n  bigPocketVariantConfig,\n  branches,\n}: Props) => {\n\n  const dataBranches = branches.reduce((branches, branch) => {\n    return {\n      ...branches,\n      [branch.id]: {\n        type: branch.type,\n        nextBranchId: branch.nextBranchId\n      }\n    }\n  }, {})\n\n  const data = {\n    name: name,\n    bigPocketVariantConfig: bigPocketVariantConfig,\n    sequenceConfig: {\n      branches: dataBranches\n    }\n  }\n\n  const handleCopyToClipboard = () => {\n    copyToClipboard(JSON.stringify(data, null, '  '))\n  }\n\n  const handleSave = () => {\n    saveToFile(JSON.stringify(data, null, '  '), fileName)\n  }\n\n  return (\n    <Wrapper>\n      <Pre>{JSON.stringify(data, null, '  ')}</Pre>\n\n      <Button type=\"button\" onClick={handleCopyToClipboard}>\n        Copy to clipboard\n      </Button>\n      <Button type=\"button\" onClick={handleSave}>\n        Save to file\n      </Button>\n    </Wrapper>\n  )\n}\n\nexport default connect(\n  mapStateToProps\n)(React.memo(Preview))\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  display: flex;\n\n  @media all and (max-width: 920px) {\n    flex-direction: column;\n  }\n`\n\nexport default Wrapper\n","import styled from 'styled-components/macro'\n\nconst Form = styled('form')`\n  width: 50%;\n\n  @media all and (max-width: 920px) {\n    width: 100%;\n  }\n`\n\nexport default Form\n","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\n\nimport { RootState, selectors, actions } from 'Redux/Store'\n\nimport BasicInformation from 'components/templates/BasicInformation'\nimport Preview from 'components/molecules/Preview'\nimport Label from 'components/atoms/Label'\nimport Button from 'components/atoms/Button'\n\nimport Wrapper from './__styled__/Wrapper'\nimport Form from './__styled__/Form'\n\nconst mapStateToProps = (state: RootState) => ({\n  branches: selectors.DraftExpedition.SequenceConfig.Branches.getBranches(state),\n  branchIds: selectors.DraftExpedition.SequenceConfig.Branches.getBranchIds(state),\n})\n\nconst mapDispatchToProps = {\n  addBranch: actions.DraftExpedition.SequenceConfig.Branches.addBranch,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps & {}\n\ntype FormBranch = {\n  identifier: string,\n  type: 'narrative' | 'battle' | 'reward',\n  nextBranchId?: string[] | null\n}\n\nconst initialState: FormBranch = {\n  identifier: '',\n  type: 'narrative',\n}\n\nconst Configurator = ({\n  branches,\n  branchIds,\n  addBranch,\n}: Props) => {\n\n  const [branch, setBranch] = useState<FormBranch>(initialState)\n  const [nextBranchId, setNextBranchId] = useState<string | null>(null)\n\n  const handleBranchIdentifierChange = (event: any) => {\n    setBranch({\n      ...branch,\n      identifier: event.target.value\n    })\n  }\n\n  const handleBranchTypeChange = (event: any) => {\n    setBranch({\n      ...branch,\n      type: event.target.value,\n    })\n  }\n\n  const handleBranchNextBranchIdChange = (event: any) => {\n    setNextBranchId(event.target.value)\n  }\n\n  const handleAddNextBranchId = (event: any, branchId: string) => {\n    console.log(nextBranchId)\n    console.log(branchId)\n    setNextBranchId(null)\n  }\n\n  const handleAddBranch = () => {\n    const { identifier, type } = branch\n\n    if(!identifier) return\n\n    const newBranch = {\n      id: identifier,\n      type,\n    }\n\n    addBranch(newBranch)\n    setBranch(initialState)\n  }\n\n  // ToDo: REFACTOR: Split form into own components\n  return (\n    <Wrapper>\n      <Form>\n        <BasicInformation />\n\n        <fieldset>\n          <legend>Branches</legend>\n          <Label htmlFor=\"branchIdentifier\">Branch identifier</Label>\n          <input\n            id=\"branchIdentifier\"\n            name=\"branchIdentifier\"\n            onChange={handleBranchIdentifierChange}\n            value={branch.identifier}\n          />\n\n          <Label htmlFor=\"branchType\">Branch type</Label>\n          <select\n            id=\"branchType\"\n            name=\"branchType\"\n            onChange={handleBranchTypeChange}\n            value={branch.type}\n          >\n            <option value=\"narrative\">narrative</option>\n            <option value=\"battle\">battle</option>\n            <option value=\"reward\">reward</option>\n          </select>\n\n          <Button\n            type=\"button\"\n            style={{ display: 'block', margin: '24px 0 0' }}\n            onClick={handleAddBranch}\n          >\n            Add branch\n          </Button>\n\n          {branches.length > 0 ? (\n            <ul>\n              {branches.map((branch) => {\n                return (\n                  <li key={branch.id}>\n                    <p>{branch.id}</p>\n                    <p>{branch.type}</p>\n                    <p>{branch.nextBranchId?.map((id) => id)}</p>\n                    {\n                      branchIds.filter((id) => id !== branch.id).length !== 0 && (\n                        <fieldset style={{ margin: '24px 0 0' }}>\n                          <legend>Next branches ids</legend>\n                          <Label htmlFor=\"branchNextBranchId\">\n                            Next branch identifier\n                          </Label>\n                          <select\n                            id=\"branchNextBranchId\"\n                            name=\"branchNextBranchId\"\n                            onChange={handleBranchNextBranchIdChange}\n                          >\n                            <option>Select branch id...</option>\n                            {branchIds.map((id) => {\n                              return (\n                                id !== branch.id && (\n                                  <option key={id} value={id}>\n                                    {id}\n                                  </option>\n                                )\n                              )})}\n                          </select>\n                          <button\n                            type=\"button\"\n                            style={{ display: 'block' }}\n                            onClick={(event: any) =>\n                              handleAddNextBranchId(event, branch.id)\n                            }\n                          >\n                            Add next branch id\n                          </button>\n                          {\n                              // ToDo: Use from State\n                              nextBranchId ? (\n                                <p>{nextBranchId}</p>\n                              ) : (\n                                <p>No next branches ids added</p>\n                              )\n                            }\n                        </fieldset>\n                      )\n                    }\n                  </li>\n                )\n              })}\n            </ul>\n          ) : (\n            <p>No branches added</p>\n          )}\n        </fieldset>\n      </Form>\n\n      <Preview />\n    </Wrapper>\n  )\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(React.memo(Configurator))\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  padding: 32px;\n`\n\nexport default Wrapper\n","import React from 'react'\n\nimport H1 from 'components/atoms/H1'\nimport Configurator from 'components/molecules/Configurator'\nimport Wrapper from './__styled__/Wrapper'\n\nconst MainApp = () => {\n  return (\n    <Wrapper>\n      <H1>AER: Custom Expedition Editor</H1>\n      <Configurator />\n    </Wrapper>\n  )\n}\n\nexport default MainApp\n","import React from 'react'\n\nimport { ThemeProvider } from 'styled-components/macro'\n\nimport GlobalStyle from 'GlobalStyle'\nimport mainTheme from 'themes/main'\n\nimport MainApp from './MainApp'\n\nconst App = () => (\n  <ThemeProvider theme={mainTheme}>\n    <GlobalStyle />\n    <MainApp />\n  </ThemeProvider>\n)\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport configureStore from './Redux/configureStore'\nimport { initialState } from './Redux/Store'\n\nimport * as serviceWorker from './serviceWorker'\n\nimport App from './components/App'\n\nconst store = configureStore(initialState)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport { install, StoreCreator } from 'redux-loop'\n\nimport { RootReducer, RootState } from './Store'\n\nconst configureStore = (initialState: RootState) => {\n  // Add middleware to this array if necessary\n  const middleWares: any[] = []\n\n  const enhancers = [applyMiddleware(...middleWares), install<RootState>()]\n\n  const composeEnhancers =\n    process.env.NODE_ENV !== 'production' &&\n    typeof window === 'object' &&\n    // @ts-ignore\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      // @ts-ignore\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      : compose\n\n  const enhancedCreateStore = createStore as StoreCreator\n  const store = enhancedCreateStore(\n    RootReducer,\n    initialState,\n    composeEnhancers(...enhancers)\n  )\n\n  return store\n}\n\nexport { configureStore as default }\n"],"sourceRoot":""}