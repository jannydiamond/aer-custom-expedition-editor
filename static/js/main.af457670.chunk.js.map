{"version":3,"sources":["Redux/Store/DraftExpedition/Name/index.ts","Redux/Store/DraftExpedition/SeedConfig/index.tsx","Redux/Store/DraftExpedition/BigPocketVariantConfig/index.ts","Redux/Store/DraftExpedition/InitialBarracksConfig/index.tsx","Redux/Store/DraftExpedition/InitialUBNCardsConfig/index.tsx","Redux/Store/DraftExpedition/SettingsSnapshotConfig/index.tsx","Redux/Store/DraftExpedition/SequenceConfig/DraftRewardConfig/index.ts","Redux/Store/DraftExpedition/SequenceConfig/DraftRewardSupplyCard/index.ts","Redux/Store/DraftExpedition/SequenceConfig/DraftBranch/index.ts","Redux/Store/DraftExpedition/SequenceConfig/FirstBranchId/index.tsx","Redux/Store/DraftExpedition/SequenceConfig/Branches/index.ts","Redux/Store/DraftExpedition/SequenceConfig/index.ts","Redux/Store/DraftExpedition/index.ts","Redux/Store/index.ts","serviceWorker.ts","GlobalStyle.ts","themes/main/index.ts","components/atoms/H1.tsx","components/organisms/Accordion/__styled__/Wrapper.tsx","components/organisms/Accordion/__styled__/Header.tsx","components/atoms/Button.tsx","components/organisms/Accordion/__styled__/Summary.tsx","components/organisms/Accordion/__styled__/Content.tsx","components/organisms/Accordion/__styled__/SummaryIcon.tsx","components/organisms/Accordion/index.tsx","components/atoms/ScreenReaderOnlyText.tsx","components/molecules/Fieldset/__styled__/Wrapper.tsx","components/molecules/Fieldset/__styled__/Legend.tsx","components/molecules/Fieldset/index.tsx","components/atoms/Label.tsx","components/atoms/Input.tsx","components/molecules/FormGroupInputText/__styled__/Wrapper.tsx","components/molecules/FormGroupInputText/index.tsx","components/molecules/FormGroupCheckbox/__styled__/Wrapper.tsx","components/molecules/FormGroupCheckbox/index.tsx","components/templates/BasicInformation/index.tsx","components/organisms/Modal/Wrapper.tsx","components/organisms/Modal/Backdrop.tsx","components/organisms/Modal/Content.tsx","components/organisms/Modal/Header.tsx","components/organisms/Modal/Body.tsx","components/atoms/H2.tsx","components/organisms/Modal/Title.tsx","components/organisms/Modal/CloseButton.tsx","components/organisms/Modal/Footer.tsx","components/organisms/Modal/index.tsx","components/atoms/ModalBodyWrapper.tsx","components/atoms/ModalFooterWrapper.tsx","hooks/useModal.tsx","components/organisms/Prompt/index.tsx","components/atoms/Select.tsx","components/molecules/FormGroupSelect/__styled__/Wrapper.tsx","components/molecules/FormGroupSelect/index.tsx","components/templates/Branches/AddBranchModal/BaseBranch/index.tsx","components/atoms/Textarea.tsx","components/molecules/FormGroupTextarea/__styled__/Wrapper.tsx","components/molecules/FormGroupTextarea/index.tsx","components/templates/Branches/AddBranchModal/NarrativeBranch/index.tsx","components/templates/Branches/AddBranchModal/RewardBranch/Treasures/index.tsx","components/templates/Branches/AddBranchModal/RewardBranch/Mages/index.tsx","components/molecules/FormGroupInputNumber/__styled__/Wrapper.tsx","components/molecules/FormGroupInputNumber/index.tsx","components/molecules/SupplyCardBlueprint/index.tsx","components/templates/Branches/AddBranchModal/RewardBranch/Supply/index.tsx","components/templates/Branches/AddBranchModal/RewardBranch/index.tsx","components/templates/Branches/AddBranchModal/BattleBranch/RewardConfig/Treasures/index.tsx","components/templates/Branches/AddBranchModal/BattleBranch/RewardConfig/Mages/index.tsx","components/templates/Branches/AddBranchModal/BattleBranch/RewardConfig/Supply/index.tsx","components/templates/Branches/AddBranchModal/BattleBranch/RewardConfig/index.tsx","components/templates/Branches/AddBranchModal/BattleBranch/index.tsx","components/templates/Branches/AddBranchModal/Body.tsx","components/templates/Branches/AddBranchModal/Footer.tsx","components/templates/Branches/AddBranchModal/index.tsx","components/templates/Branches/index.tsx","components/templates/ConnectBranches/index.tsx","components/templates/InitialBarracks/index.tsx","components/templates/initialUBNCards/index.tsx","components/molecules/SupplyTile/index.tsx","components/templates/SettingsSnapshot/index.tsx","helpers/copyToClipboard.ts","helpers/saveToFile.ts","components/molecules/Preview/__styled__/Wrapper.tsx","components/molecules/Preview/__styled__/Pre.tsx","components/molecules/Preview/index.tsx","components/molecules/Configurator/__styled__/Wrapper.tsx","components/molecules/Configurator/__styled__/Form.tsx","components/molecules/Configurator/index.tsx","components/App/__styled__/Wrapper.tsx","components/App/MainApp.tsx","components/App/index.tsx","index.tsx","Redux/configureStore.ts"],"names":["ActionTypes","actions","noOp","createAction","setExpeditionName","name","SET_EXPEDITION_NAME","selectors","getExpeditionName","state","DraftExpedition","Name","setSeed","seed","SET_SEED","getSeed","SeedConfig","setBigPocketVariantConfig","value","SET_BIG_POCKET_VARIANT_CONFIG","getBigPocketVariantConfig","BigPocketVariantConfig","initialState","mageIds","supplyIds","treasureIds","setMages","mages","SET_MAGES","setSupplyCards","supplyCards","SET_SUPPLY_CARDS","setTreasures","treasures","SET_TREASURES","getInitialBarracksConfig","InitialBarracksConfig","getBarrackMages","createSelector","barracks","getBarrackSupplyCards","getBarrackTreasures","setUBNCards","upgradedBasicNemesisCards","SET_UBN_CARDS","getInitialUBNCardsConfig","InitialUBNCardsConfig","initialMarketSetup","Object","values","DATA","marketsetups","setups","find","setup","default","dataMages","normalizedData","ENG","dataSupply","cards","dataTreasures","dataNemeses","nemeses","dataUBNCards","supplySetup","id","type","active","tiles","reduce","tile","tileId","shortid","generate","newTile","operation","threshold","assign","availableMageIds","map","mage","availableCardIds","supply","availableTreasureIds","treasure","availableNemesisIds","nemesis","availableUpgradedBasicNemesisCardIds","upgradedBasicNemesisCard","setSupplySetup","SET_SUPPLY_SETUP","setSupplySetupType","SET_SUPPLY_SETUP_TYPE","setSupplySetupId","SET_SUPPLY_SETUP_ID","setSupplySetupName","SET_SUPPLY_SETUP_NAME","addSupplyTile","ADD_SUPPLY_TILE","updateSupplyTile","UPDATE_SUPPLY_TILE","deleteSupplyTile","DELETE_SUPPLY_TILE","setAvailableMages","SET_AVAILABLE_MAGES","setAvailableSupplyCards","SET_AVAILABLE_SUPPLY_CARDS","setAvailableTreasures","SET_AVAILABLE_TREASURES","setAvailableNemeses","SET_AVAILABLE_NEMESES","setAvailableUBNCards","SET_AVAILABLE_UBN_CARDS","getSettingsSnapshotConfig","SettingsSnapshotConfig","getSupplySetupType","settings","getSupplySetupId","getSupplySetupName","getSupplyTiles","getSupplyTileIds","keys","getSupplyTilesArray","getAvailableMages","getAvailableSupplyCards","getAvailableTreasures","getAvailableNemeses","getAvailableUBNCards","draftAddRewardConfig","DRAFT_ADD_REWARD_CONFIG","draftEditRewardConfig","config","DRAFT_EDIT_REWARD_CONFIG","draftDeleteRewardConfig","DRAFT_DELETE_REWARD_CONFIG","clearDraftRewardConfig","CLEAR_DRAFT_REWARD_CONFIG","getDraftRewardConfigState","SequenceConfig","DraftRewardConfig","getDraftRewardConfigIds","configs","getDraftRewardConfigArray","draftAddRewardSupplyCard","DRAFT_ADD_REWARD_SUPPLY_CARD","draftAddBattleRewardSupplyCard","configId","DRAFT_ADD_BATTLE_REWARD_SUPPLY_CARD","draftEditRewardSupplyCard","blueprint","DRAFT_EDIT_REWARD_SUPPLY_CARD","draftDeleteRewardSupplyCard","DRAFT_DELETE_REWARD_SUPPLY_CARD","clearDraftRewardSupplyCard","CLEAR_DRAFT_REWARD_SUPPLY_CARD","getDraftRewardSupplyCardState","DraftRewardSupplyCard","getDraftRewardSupplyCardIds","blueprints","getDraftRewardSupplyCardArray","_id","draftAddBranch","DRAFT_ADD_BRANCH","draftEditBranch","branch","DRAFT_EDIT_BRANCH","updateDraftBranch","UPDATE_DRAFT_BRANCH","clearDraftBranch","CLEAR_DRAFT_BRANCH","getDraftBranchState","DraftBranch","setFirstBranchId","branchId","SET_FIRST_BRANCH_ID","clearFirstBranchId","CLEAR_FIRST_BRANCH_ID","getFirstBranchId","FirstBranchId","addBranch","ADD_BRANCH","updateBranch","UPDATE_BRANCH","getBranchesState","Branches","getBranchIds","branches","getBranches","Reducer","combineReducers","action","payload","rewardType","newConfigs","filter","newState","newBlueprints","text","decisions","ids","tier1","tier2","tier3","randomAmount","bigPocket","tier","nemesisId","newUBNCards","specialRules","onLoss","lossRewards","winRewards","tileToDeleteId","newTiles","newTilesState","RootReducer","reduceReducers","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","mainTheme","colors","H1","styled","Wrapper","Header","Button","Summary","Content","SummaryIcon","React","memo","title","open","children","useState","isOpen","setIsOpen","aria-expanded","aria-controls","onClick","className","role","aria-labelledby","hidden","ScreenReaderOnlyText","Legend","legend","legendVisible","Label","Input","label","labelHidden","onChange","defaultValue","required","htmlFor","defaultChecked","mapDispatchToProps","connect","expeditionName","bigPocketVariantConfig","event","target","currentTarget","checked","Backdrop","Body","props","hasFooter","H2","Title","themeColor","rest","CloseButton","Footer","titleColor","titleLabel","closeModal","footer","domEl","document","getElementById","ReactDOM","createPortal","Fragment","variant","ModalBodyWrapper","ModalFooterWrapper","useModal","yesHandler","noHandler","isVisible","setIsVisible","hide","show","RenderModal","closeCallback","Select","ReactSelect","options","isMulti","classNamePrefix","draftBranch","branchTypeOptions","branchTypeDefaultValue","option","FormGroupSelect","selectOption","Textarea","split","decision","treasureOptions","level","selectOptions","selectedTreasureIds","parseInt","mageOptions","selectedMageIds","SupplyCardBlueprint","handleChange","handleDelete","cardTypeOptions","cardTypeDefaultValue","cardOperationOptions","cardOperationDefaultValue","costValues","addSupplyCard","editSupplyCard","deleteSupplyCard","supplyOptions","handleEditSupplyCard","handleDeleteSupplyCard","selectedSupplyIds","key","renderSupplyBlueprints","handleRewardTypeChange","updateDraftRewardConfig","undefined","addRewardConfig","editRewardConfig","deleteRewardConfig","rewardConfigs","useEffect","hasTreasure","nemesisOptions","upgradedBasicNemesisCardsOptions","treasureLevelOptions","treasureLevelDefaultValue","toString","winConfigs","lossConfigs","handleBattleTierChange","handleNewUBNCardsTypeChange","handleAddRewardConfig","handleEditRewardConfig","handleDeleteRewardConfig","renderRewardConfigs","selectedUBNCardIds","addRandom","length","renderBranch","clearDraftRewardSupplyCards","draftRewardConfigs","draftRewardSupplyCards","modal","newBranch","card","reward","addBranchModal","style","display","firstBranchId","availableBranchesOptions","handleNarrativNextBranchIdChange","branchToUpdate","currentBranchId","newDecisions","decisionId","nextBranchId","handleNextBranchIdChange","availableOptions","availableBranch","narrativeBranch","decisionOptions","availableOption","setBarrackMages","setBarrackSupplyCards","setBarrackTreasures","barrackMages","barrackSupplyCards","barrackTreasures","magesDefaultValue","indexOf","supplyCardsDefaultValue","treasuresDefaultValue","upgradedBasicNemesisCardsDefaultValue","selectedUBNCardsIds","SupplyTile","supplySetupType","supplySetupId","supplySetupName","availableMages","availableSupplyCards","availableTreasures","availableNemeses","availableUBNCards","handleSupplySetupTypeChange","marketSetupsOptions","marketSetup","marketSetupsDefaultValue","handleUpdateSupplyCard","supplyGemOptions","cost","supplyRelicOptions","supplySpellOptions","supplyGemsDefaultValue","supplyRelicsDefaultValue","supplySpellsDefaultValue","treasureLevel1Options","subtype","treasureLevel2Options","treasureLevel3Options","treasuresLevel1DefaultValue","treasuresLevel2DefaultValue","treasuresLevel3DefaultValue","nemesesOptions","nemesesDefaultValue","renderSupplyTiles","selectedGemIds","allButGemSupplyCards","supplyCard","selectedRelicIds","allButRelicSupplyCards","selectedSpellIds","allButSpellSupplyCards","selectedTreasureLevel1Ids","allButLevel1Treasures","selectedTreasureLevel2Ids","allButLevel2Treasures","selectedTreasureLevel3Ids","allButLevel3Treasures","selectedNemesisIds","copyToClipboard","json","navigator","clipboard","writeText","saveToFile","blob","Blob","saveAs","Pre","initialBarracks","initialUBNCards","settingsSnapshot","fileName","dataBranches","rewardBranch","randomTreasuresTier1","Array","fill","random","randomTreasuresTier2","randomTreasuresTier3","randomMageAmount","battleBranch","hasOwnProperty","winRewardTreasure","winRewardMage","winRewardSupply","winRewardTreasureIds","winRewardRandomTreasuresTier1","winRewardRandomTreasuresTier2","winRewardRandomTreasuresTier3","winRewardMageIds","winRewardRandomMageAmount","winRewardSupplyIds","winRewardSupplyBlueprints","winRewardSupplyBigPocket","lossReward","lossRewardTreasure","lossRewardMage","lossRewardSupply","lossRewardTreasureIds","lossRewardRandomTreasuresTier1","lossRewardRandomTreasuresTier2","lossRewardRandomTreasuresTier3","lossRewardMageIds","lossRewardRandomMageAmount","lossRewardSupplyIds","lossRewardSupplyBlueprints","lossRewardSupplyBigPocket","dataSupplyTiles","data","sequenceConfig","settingsSnapshotConfig","seedConfig","initialBarracksConfig","initialUBNCardsConfig","handleCopyToClipboard","JSON","stringify","handleSave","Form","MainApp","App","theme","store","enhancers","applyMiddleware","install","composeEnhancers","compose","enhancedCreateStore","createStore","configureStore","render","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.af457670.chunk.js","sourcesContent":["import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer } from 'redux-loop'\n\n///////////\n// STATE //\n///////////\n\nexport type State = string\nexport const initialState: State = \"\"\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  SET_EXPEDITION_NAME = 'DraftExpedition/Name/SET_EXPEDITION_NAME',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  setExpeditionName: (name: string) =>\n    createAction(ActionTypes.SET_EXPEDITION_NAME, name),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.SET_EXPEDITION_NAME: {\n      return action.payload\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport type NameStateSlice = {\n  DraftExpedition: {\n    Name: State\n  }\n}\n\nconst getExpeditionName = (state: NameStateSlice) => state.DraftExpedition.Name\n\nexport const selectors = {\n  getExpeditionName,\n}\n","import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer } from 'redux-loop'\n\n///////////\n// STATE //\n///////////\n\nexport type State = string\nexport const initialState: State = ''\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  SET_SEED = 'DraftExpedition/SeedConfig/SET_SEED',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  setSeed: (seed: string) => createAction(ActionTypes.SET_SEED, seed),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.SET_SEED: {\n      return action.payload\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport type SeedStateSlice = {\n  DraftExpedition: {\n    SeedConfig: State\n  }\n}\n\nconst getSeed = (state: SeedStateSlice) => state.DraftExpedition.SeedConfig\n\nexport const selectors = {\n  getSeed,\n}\n","import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer } from 'redux-loop'\n\n///////////\n// STATE //\n///////////\n\nexport type State = boolean\nexport const initialState: State = false\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  SET_BIG_POCKET_VARIANT_CONFIG = 'DraftExpedition/BigPocketVariantConfig/SET_BIG_POCKET_VARIANT_CONFIG',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  setBigPocketVariantConfig: (value: boolean) =>\n    createAction(ActionTypes.SET_BIG_POCKET_VARIANT_CONFIG, value),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.SET_BIG_POCKET_VARIANT_CONFIG: {\n      return action.payload\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport type BigPocketVariantConfigStateSlice = {\n  DraftExpedition: {\n    BigPocketVariantConfig: State\n  }\n}\n\nconst getBigPocketVariantConfig = (state: BigPocketVariantConfigStateSlice) => state.DraftExpedition.BigPocketVariantConfig\n\nexport const selectors = {\n  getBigPocketVariantConfig,\n}\n","import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer } from 'redux-loop'\n\nimport * as aerTypes from 'aer-types'\nimport { createSelector } from 'reselect'\n\n///////////\n// STATE //\n///////////\n\nexport type State = aerTypes.Barracks\n\nexport const initialState: State = {\n  mageIds: [],\n  supplyIds: [],\n  treasureIds: [],\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  SET_MAGES = 'DraftExpedition/InitialBarracksConfig/SET_MAGES',\n  SET_SUPPLY_CARDS = 'DraftExpedition/InitialBarracksConfig/SET_SUPPLY_CARDS',\n  SET_TREASURES = 'DraftExpedition/InitialBarracksConfig/SET_TREASURES',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  setMages: (mages: string[]) => createAction(ActionTypes.SET_MAGES, mages),\n  setSupplyCards: (supplyCards: string[]) =>\n    createAction(ActionTypes.SET_SUPPLY_CARDS, supplyCards),\n  setTreasures: (treasures: string[]) =>\n    createAction(ActionTypes.SET_TREASURES, treasures),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.SET_MAGES: {\n      return {\n        ...state,\n        mageIds: action.payload,\n      }\n    }\n\n    case ActionTypes.SET_SUPPLY_CARDS: {\n      return {\n        ...state,\n        supplyIds: action.payload,\n      }\n    }\n\n    case ActionTypes.SET_TREASURES: {\n      return {\n        ...state,\n        treasureIds: action.payload,\n      }\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport type InitialBarracksConfigStateSlice = {\n  DraftExpedition: {\n    InitialBarracksConfig: State\n  }\n}\n\nconst getInitialBarracksConfig = (state: InitialBarracksConfigStateSlice) =>\n  state.DraftExpedition.InitialBarracksConfig\n\nconst getBarrackMages = createSelector(\n  [getInitialBarracksConfig],\n  (barracks: aerTypes.Barracks) => barracks.mageIds\n)\n\nconst getBarrackSupplyCards = createSelector(\n  [getInitialBarracksConfig],\n  (barracks: aerTypes.Barracks) => barracks.supplyIds\n)\n\nconst getBarrackTreasures = createSelector(\n  [getInitialBarracksConfig],\n  (barracks: aerTypes.Barracks) => barracks.treasureIds\n)\n\nexport const selectors = {\n  getInitialBarracksConfig,\n  getBarrackMages,\n  getBarrackSupplyCards,\n  getBarrackTreasures,\n}\n","import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer } from 'redux-loop'\n\n///////////\n// STATE //\n///////////\n\nexport type State = string[]\n\nexport const initialState: State = []\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  SET_UBN_CARDS = 'DraftExpedition/InitialUBNCardsConfig/SET_UBN_CARDS',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  setUBNCards: (upgradedBasicNemesisCards: string[]) =>\n    createAction(ActionTypes.SET_UBN_CARDS, upgradedBasicNemesisCards),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.SET_UBN_CARDS: {\n      return action.payload\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport type InitialUBNCardsConfigStateSlice = {\n  DraftExpedition: {\n    InitialUBNCardsConfig: State\n  }\n}\n\nconst getInitialUBNCardsConfig = (state: InitialUBNCardsConfigStateSlice) =>\n  state.DraftExpedition.InitialUBNCardsConfig\n\nexport const selectors = {\n  getInitialUBNCardsConfig,\n}\n","import { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { LoopReducer } from 'redux-loop'\nimport { createSelector } from 'reselect'\n\nimport DATA from 'aer-data'\nimport * as aerTypes from 'aer-types'\nimport shortid from 'shortid'\n\nimport * as types from 'types'\n\n///////////\n// STATE //\n///////////\n\nexport type State = {\n  supplySetup: types.SupplySetup\n  availableMageIds: string[]\n  availableCardIds: string[]\n  availableTreasureIds: string[]\n  availableNemesisIds: string[]\n  availableUpgradedBasicNemesisCardIds: string[]\n}\n\nconst dataMarketSetups = Object.values(DATA.marketsetups.setups)\nconst initialMarketSetup = dataMarketSetups.find(\n  (setup: aerTypes.IMarketSetup) => setup.default\n)\nconst dataMages: aerTypes.Mage[] = Object.values(DATA.normalizedData.ENG.mages)\nconst dataSupply: aerTypes.ICard[] = Object.values(\n  DATA.normalizedData.ENG.cards\n)\nconst dataTreasures: aerTypes.Treasure[] = Object.values(\n  DATA.normalizedData.ENG.treasures\n)\n\nconst dataNemeses: aerTypes.Nemesis[] = Object.values(\n  DATA.normalizedData.ENG.nemeses\n)\n\nconst dataUBNCards: aerTypes.UpgradedBasicNemesisCard[] = Object.values(\n  DATA.normalizedData.ENG.upgradedBasicNemesisCards\n)\n\nexport const initialState: State = {\n  supplySetup: {\n    id: initialMarketSetup?.id ?? '',\n    name: initialMarketSetup?.name ?? '',\n    type: initialMarketSetup?.type ?? 'official',\n    active: initialMarketSetup?.active ?? true,\n    tiles:\n      initialMarketSetup?.tiles.reduce(\n        (tiles: types.Tiles, tile: aerTypes.Slot) => {\n          const tileId = tile.id ?? shortid.generate()\n\n          const newTile = {\n            id: tileId,\n            type: tile.type as types.SupplyCardType,\n            operation: tile.operation,\n          }\n\n          tile.threshold &&\n            Object.assign(newTile, {\n              threshold: tile.threshold,\n            })\n\n          tile.values &&\n            Object.assign(newTile, {\n              values: tile.values,\n            })\n\n          return {\n            ...tiles,\n            [tileId]: newTile,\n          }\n        },\n        {}\n      ) ?? {},\n  },\n  availableMageIds: dataMages.map((mage: aerTypes.Mage) => mage.id),\n  availableCardIds: dataSupply.map((supply: aerTypes.ICard) => supply.id),\n  availableTreasureIds: dataTreasures.map(\n    (treasure: aerTypes.Treasure) => treasure.id\n  ),\n  availableNemesisIds: dataNemeses.map(\n    (nemesis: aerTypes.Nemesis) => nemesis.id\n  ),\n  availableUpgradedBasicNemesisCardIds: dataUBNCards.map(\n    (upgradedBasicNemesisCard: aerTypes.UpgradedBasicNemesisCard) =>\n      upgradedBasicNemesisCard.id\n  ),\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  SET_SUPPLY_SETUP = 'DraftExpedition/SettingsSnapshotConfig/SET_SUPPLY_SETUP',\n  SET_SUPPLY_SETUP_TYPE = 'DraftExpedition/SettingsSnapshotConfig/SET_SUPPLY_SETUP_TYPE',\n  SET_SUPPLY_SETUP_ID = 'DraftExpedition/SettingsSnapshotConfig/SET_SUPPLY_SETUP_ID',\n  SET_SUPPLY_SETUP_NAME = 'DraftExpedition/SettingsSnapshotConfig/SET_SUPPLY_SETUP_NAME',\n  ADD_SUPPLY_TILE = 'DraftExpedition/SettingsSnapshotConfig/ADD_SUPPLY_TILE',\n  UPDATE_SUPPLY_TILE = 'DraftExpedition/SettingsSnapshotConfig/UPDATE_SUPPLY_TILE',\n  DELETE_SUPPLY_TILE = 'DraftExpedition/SettingsSnapshotConfig/DELETE_SUPPLY_TILE',\n  SET_AVAILABLE_MAGES = 'DraftExpedition/SettingsSnapshotConfig/SET_AVAILABLE_MAGES',\n  SET_AVAILABLE_SUPPLY_CARDS = 'DraftExpedition/SettingsSnapshotConfig/SET_AVAILABLE_SUPPLY_CARDS',\n  SET_AVAILABLE_TREASURES = 'DraftExpedition/SettingsSnapshotConfig/SET_AVAILABLE_TREASURES',\n  SET_AVAILABLE_NEMESES = 'DraftExpedition/SettingsSnapshotConfig/SET_AVAILABLE_NEMESES',\n  SET_AVAILABLE_UBN_CARDS = 'DraftExpedition/SettingsSnapshotConfig/SET_AVAILABLE_UBN_CARDS',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  setSupplySetup: (supplySetup: types.SupplySetup) =>\n    createAction(ActionTypes.SET_SUPPLY_SETUP, supplySetup),\n  setSupplySetupType: (type: types.SupplySetupType) =>\n    createAction(ActionTypes.SET_SUPPLY_SETUP_TYPE, type),\n  setSupplySetupId: (id: string) =>\n    createAction(ActionTypes.SET_SUPPLY_SETUP_ID, id),\n  setSupplySetupName: (name: string) =>\n    createAction(ActionTypes.SET_SUPPLY_SETUP_NAME, name),\n  addSupplyTile: () => createAction(ActionTypes.ADD_SUPPLY_TILE),\n  updateSupplyTile: (tile: aerTypes.MarketTile) =>\n    createAction(ActionTypes.UPDATE_SUPPLY_TILE, tile),\n  deleteSupplyTile: (tileId: string) =>\n    createAction(ActionTypes.DELETE_SUPPLY_TILE, tileId),\n  setAvailableMages: (mages: string[]) =>\n    createAction(ActionTypes.SET_AVAILABLE_MAGES, mages),\n  setAvailableSupplyCards: (supplyCards: string[]) =>\n    createAction(ActionTypes.SET_AVAILABLE_SUPPLY_CARDS, supplyCards),\n  setAvailableTreasures: (treasures: string[]) =>\n    createAction(ActionTypes.SET_AVAILABLE_TREASURES, treasures),\n  setAvailableNemeses: (nemeses: string[]) =>\n    createAction(ActionTypes.SET_AVAILABLE_NEMESES, nemeses),\n  setAvailableUBNCards: (upgradedBasicNemesisCards: string[]) =>\n    createAction(\n      ActionTypes.SET_AVAILABLE_UBN_CARDS,\n      upgradedBasicNemesisCards\n    ),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.SET_SUPPLY_SETUP: {\n      return {\n        ...state,\n        supplySetup: action.payload,\n      }\n    }\n\n    case ActionTypes.SET_SUPPLY_SETUP_TYPE: {\n      return {\n        ...state,\n        supplySetup: {\n          ...state.supplySetup,\n          type: action.payload,\n        },\n      }\n    }\n\n    case ActionTypes.SET_SUPPLY_SETUP_ID: {\n      return {\n        ...state,\n        supplySetup: {\n          ...state.supplySetup,\n          id: action.payload,\n        },\n      }\n    }\n\n    case ActionTypes.SET_SUPPLY_SETUP_NAME: {\n      return {\n        ...state,\n        supplySetup: {\n          ...state.supplySetup,\n          name: action.payload,\n        },\n      }\n    }\n\n    case ActionTypes.ADD_SUPPLY_TILE: {\n      const tileId = shortid()\n\n      return {\n        ...state,\n        supplySetup: {\n          ...state.supplySetup,\n          tiles: {\n            ...state.supplySetup.tiles,\n            [tileId]: {\n              id: tileId,\n              type: 'Gem',\n              operation: 'ANY',\n            },\n          },\n        },\n      }\n    }\n\n    case ActionTypes.UPDATE_SUPPLY_TILE: {\n      const { id } = action.payload\n\n      return {\n        ...state,\n        supplySetup: {\n          ...state.supplySetup,\n          tiles: {\n            ...state.supplySetup.tiles,\n            [id]: action.payload,\n          },\n        },\n      }\n    }\n\n    case ActionTypes.DELETE_SUPPLY_TILE: {\n      const tileToDeleteId = action.payload\n      const tiles = Object.values(state.supplySetup.tiles)\n\n      const newTiles = tiles.filter(\n        (tile: aerTypes.MarketTile) => tile.id !== tileToDeleteId\n      )\n\n      const newTilesState = newTiles.reduce(\n        (tiles: types.Tiles, tile: aerTypes.MarketTile) => {\n          return {\n            ...tiles,\n            [tile.id]: tile,\n          }\n        },\n        {}\n      )\n\n      return {\n        ...state,\n        supplySetup: {\n          ...state.supplySetup,\n          tiles: newTilesState,\n        },\n      }\n    }\n\n    case ActionTypes.SET_AVAILABLE_MAGES: {\n      return {\n        ...state,\n        availableMageIds: action.payload,\n      }\n    }\n\n    case ActionTypes.SET_AVAILABLE_SUPPLY_CARDS: {\n      return {\n        ...state,\n        availableCardIds: action.payload,\n      }\n    }\n\n    case ActionTypes.SET_AVAILABLE_TREASURES: {\n      return {\n        ...state,\n        availableTreasureIds: action.payload,\n      }\n    }\n\n    case ActionTypes.SET_AVAILABLE_NEMESES: {\n      return {\n        ...state,\n        availableNemesisIds: action.payload,\n      }\n    }\n\n    case ActionTypes.SET_AVAILABLE_UBN_CARDS: {\n      return {\n        ...state,\n        availableUpgradedBasicNemesisCardIds: action.payload,\n      }\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport type SettingsSnapshotConfigStateSlice = {\n  DraftExpedition: {\n    SettingsSnapshotConfig: State\n  }\n}\n\nconst getSettingsSnapshotConfig = (state: SettingsSnapshotConfigStateSlice) =>\n  state.DraftExpedition.SettingsSnapshotConfig\n\nconst getSupplySetupType = createSelector(\n  [getSettingsSnapshotConfig],\n  (settings: State) => settings.supplySetup.type\n)\n\nconst getSupplySetupId = createSelector(\n  [getSettingsSnapshotConfig],\n  (settings: State) => settings.supplySetup.id\n)\n\nconst getSupplySetupName = createSelector(\n  [getSettingsSnapshotConfig],\n  (settings: State) => settings.supplySetup.name\n)\n\nconst getSupplyTiles = createSelector(\n  [getSettingsSnapshotConfig],\n  (settings: State) => settings.supplySetup.tiles\n)\n\nconst getSupplyTileIds = createSelector(\n  [getSupplyTiles],\n  (tiles: types.Tiles) => Object.keys(tiles)\n)\n\nconst getSupplyTilesArray = createSelector(\n  [getSupplyTiles],\n  (tiles: types.Tiles) => Object.values(tiles)\n)\n\nconst getAvailableMages = createSelector(\n  [getSettingsSnapshotConfig],\n  (settings: State) => settings.availableMageIds\n)\n\nconst getAvailableSupplyCards = createSelector(\n  [getSettingsSnapshotConfig],\n  (settings: State) => settings.availableCardIds\n)\n\nconst getAvailableTreasures = createSelector(\n  [getSettingsSnapshotConfig],\n  (settings: State) => settings.availableTreasureIds\n)\n\nconst getAvailableNemeses = createSelector(\n  [getSettingsSnapshotConfig],\n  (settings: State) => settings.availableNemesisIds\n)\n\nconst getAvailableUBNCards = createSelector(\n  [getSettingsSnapshotConfig],\n  (settings: State) => settings.availableUpgradedBasicNemesisCardIds\n)\n\nexport const selectors = {\n  getSettingsSnapshotConfig,\n  getSupplySetupType,\n  getSupplySetupId,\n  getSupplySetupName,\n  getSupplyTileIds,\n  getSupplyTilesArray,\n  getAvailableMages,\n  getAvailableSupplyCards,\n  getAvailableTreasures,\n  getAvailableNemeses,\n  getAvailableUBNCards,\n}\n","import { LoopReducer } from 'redux-loop'\nimport { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { createSelector } from 'reselect'\nimport shortid from 'shortid'\n\nimport * as types from 'types'\n\n///////////\n// STATE //\n///////////\n\nexport type State = {\n  [id: string]: types.BattleRewardConfig\n}\n\nexport const initialState: State = {}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  DRAFT_ADD_REWARD_CONFIG = 'DraftExpedition/SequenceConfig/DraftRewardConfig/DRAFT_ADD_REWARD_CONFIG',\n  DRAFT_EDIT_REWARD_CONFIG = 'DraftExpedition/SequenceConfig/DraftRewardConfig/DRAFT_EDIT_REWARD_CONFIG',\n  DRAFT_DELETE_REWARD_CONFIG = 'DraftExpedition/SequenceConfig/DraftRewardConfig/DRAFT_DELETE_REWARD_CONFIG',\n  CLEAR_DRAFT_REWARD_CONFIG = 'DraftExpedition/SequenceConfig/DraftRewardConfig/CLEAR_DRAFT_REWARD_CONFIG',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  draftAddRewardConfig: (type: types.BattleRewardConfigType) =>\n    createAction(ActionTypes.DRAFT_ADD_REWARD_CONFIG, type),\n  draftEditRewardConfig: (config: types.BattleRewardConfig) =>\n    createAction(ActionTypes.DRAFT_EDIT_REWARD_CONFIG, config),\n  draftDeleteRewardConfig: (config: types.BattleRewardConfig) =>\n    createAction(ActionTypes.DRAFT_DELETE_REWARD_CONFIG, config),\n  clearDraftRewardConfig: () =>\n    createAction(ActionTypes.CLEAR_DRAFT_REWARD_CONFIG),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.DRAFT_ADD_REWARD_CONFIG: {\n      const id = shortid.generate()\n\n      return {\n        [id]: {\n          _id: id,\n          type: action.payload,\n          rewardType: 'regular',\n        },\n        ...state,\n      }\n    }\n\n    case ActionTypes.DRAFT_EDIT_REWARD_CONFIG: {\n      const { _id } = action.payload\n\n      return {\n        ...state,\n        [_id]: action.payload,\n      }\n    }\n\n    case ActionTypes.DRAFT_DELETE_REWARD_CONFIG: {\n      const { _id } = action.payload\n      const configs = Object.values(state)\n\n      const newConfigs = configs.filter(\n        (config: types.BattleRewardConfig) => config._id !== _id\n      )\n\n      const newState = newConfigs.reduce(\n        (configs: State, config: types.BattleRewardConfig) => {\n          return {\n            ...configs,\n            [config._id]: config,\n          }\n        },\n        {}\n      )\n\n      return newState\n    }\n\n    case ActionTypes.CLEAR_DRAFT_REWARD_CONFIG: {\n      return initialState\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport type DraftRewardConfigStateSlice = {\n  DraftExpedition: {\n    SequenceConfig: {\n      DraftRewardConfig: State\n    }\n  }\n}\n\nconst getDraftRewardConfigState = (state: DraftRewardConfigStateSlice) =>\n  state.DraftExpedition.SequenceConfig.DraftRewardConfig\n\nconst getDraftRewardConfigIds = createSelector(\n  [getDraftRewardConfigState],\n  (configs) => Object.keys(configs)\n)\n\nconst getDraftRewardConfigArray = createSelector(\n  [getDraftRewardConfigState],\n  (configs) => Object.values(configs)\n)\n\nexport const selectors = {\n  getDraftRewardConfigState,\n  getDraftRewardConfigIds,\n  getDraftRewardConfigArray,\n}\n","import { LoopReducer } from 'redux-loop'\nimport { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\nimport { createSelector } from 'reselect'\nimport shortid from 'shortid'\n\nimport * as types from 'types'\n\n///////////\n// STATE //\n///////////\n\nexport type State = {\n  [id: string]: types.Blueprint\n}\n\nexport const initialState: State = {}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  DRAFT_ADD_REWARD_SUPPLY_CARD = 'DraftExpedition/SequenceConfig/DraftRewardSupplyCard/DRAFT_ADD_REWARD_SUPPLY_CARD',\n  DRAFT_ADD_BATTLE_REWARD_SUPPLY_CARD = 'DraftExpedition/SequenceConfig/DraftRewardSupplyCard/DRAFT_ADD_BATTLE_REWARD_SUPPLY_CARD',\n  DRAFT_EDIT_REWARD_SUPPLY_CARD = 'DraftExpedition/SequenceConfig/DraftRewardSupplyCard/DRAFT_EDIT_REWARD_SUPPLY_CARD',\n  DRAFT_DELETE_REWARD_SUPPLY_CARD = 'DraftExpedition/SequenceConfig/DraftRewardSupplyCard/DRAFT_DELETE_REWARD_SUPPLY_CARD',\n  CLEAR_DRAFT_REWARD_SUPPLY_CARD = 'DraftExpedition/SequenceConfig/DraftRewardSupplyCard/CLEAR_DRAFT_REWARD_SUPPLY_CARD',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  draftAddRewardSupplyCard: () =>\n    createAction(ActionTypes.DRAFT_ADD_REWARD_SUPPLY_CARD),\n  draftAddBattleRewardSupplyCard: (configId: string) =>\n    createAction(ActionTypes.DRAFT_ADD_BATTLE_REWARD_SUPPLY_CARD, configId),\n  draftEditRewardSupplyCard: (blueprint: types.Blueprint) =>\n    createAction(ActionTypes.DRAFT_EDIT_REWARD_SUPPLY_CARD, blueprint),\n  draftDeleteRewardSupplyCard: (blueprint: types.Blueprint) =>\n    createAction(ActionTypes.DRAFT_DELETE_REWARD_SUPPLY_CARD, blueprint),\n  clearDraftRewardSupplyCard: () =>\n    createAction(ActionTypes.CLEAR_DRAFT_REWARD_SUPPLY_CARD),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.DRAFT_ADD_REWARD_SUPPLY_CARD: {\n      const id = shortid.generate()\n\n      return {\n        [id]: {\n          _id: id,\n          type: 'Gem',\n          operation: 'ANY',\n        },\n        ...state,\n      }\n    }\n\n    case ActionTypes.DRAFT_ADD_BATTLE_REWARD_SUPPLY_CARD: {\n      const id = shortid.generate()\n\n      return {\n        [id]: {\n          _id: id,\n          configId: action.payload,\n          type: 'Gem',\n          operation: 'ANY',\n        },\n        ...state,\n      }\n    }\n\n    case ActionTypes.DRAFT_EDIT_REWARD_SUPPLY_CARD: {\n      const { _id } = action.payload\n\n      return {\n        ...state,\n        [_id]: action.payload,\n      }\n    }\n\n    case ActionTypes.DRAFT_DELETE_REWARD_SUPPLY_CARD: {\n      const { _id } = action.payload\n      const blueprints = Object.values(state)\n\n      const newBlueprints = blueprints.filter(\n        (blueprint: types.Blueprint) => blueprint._id !== _id\n      )\n\n      const newState = newBlueprints.reduce(\n        (blueprints: State, blueprint: types.Blueprint) => {\n          return {\n            ...blueprints,\n            [blueprint._id]: blueprint,\n          }\n        },\n        {}\n      )\n\n      return newState\n    }\n\n    case ActionTypes.CLEAR_DRAFT_REWARD_SUPPLY_CARD: {\n      return initialState\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport type DraftRewardSupplyCardStateSlice = {\n  DraftExpedition: {\n    SequenceConfig: {\n      DraftRewardSupplyCard: State\n    }\n  }\n}\n\nconst getDraftRewardSupplyCardState = (\n  state: DraftRewardSupplyCardStateSlice\n) => state.DraftExpedition.SequenceConfig.DraftRewardSupplyCard\n\nconst getDraftRewardSupplyCardIds = createSelector(\n  [getDraftRewardSupplyCardState],\n  (blueprints) => Object.keys(blueprints)\n)\n\nconst getDraftRewardSupplyCardArray = createSelector(\n  [getDraftRewardSupplyCardState],\n  (blueprints) => Object.values(blueprints)\n)\n\nexport const selectors = {\n  getDraftRewardSupplyCardState,\n  getDraftRewardSupplyCardIds,\n  getDraftRewardSupplyCardArray,\n}\n","import { LoopReducer } from 'redux-loop'\nimport { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\n\nimport * as types from 'types'\nimport shortid from 'shortid'\n\n///////////\n// STATE //\n///////////\n\nexport type State = types.BranchBase | types.NarrativeBranch\nexport const initialState: State = {\n  _id: '',\n  id: '',\n  type: 'narrative',\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  DRAFT_ADD_BRANCH = 'DraftExpedition/SequenceConfig/DraftBranch/DRAFT_ADD_BRANCH',\n  DRAFT_EDIT_BRANCH = 'DraftExpedition/SequenceConfig/DraftBranch/DRAFT_EDIT_BRANCH',\n  CLEAR_DRAFT_BRANCH = 'DraftExpedition/SequenceConfig/DraftBranch/CLEAR_DRAFT_BRANCH',\n  UPDATE_DRAFT_BRANCH = 'DraftExpedition/SequenceConfig/DraftBranch/UPDATE_DRAFT_BRANCH',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  draftAddBranch: () =>\n    createAction(ActionTypes.DRAFT_ADD_BRANCH),\n  draftEditBranch: (branch: types.BranchBase | types.Branch) =>\n    createAction(ActionTypes.DRAFT_EDIT_BRANCH, branch),\n  updateDraftBranch: (branch: types.BranchBase | types.Branch) =>\n    createAction(ActionTypes.UPDATE_DRAFT_BRANCH, branch),\n  clearDraftBranch: () =>\n    createAction(ActionTypes.CLEAR_DRAFT_BRANCH),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.DRAFT_ADD_BRANCH: {\n      return {\n        ...state,\n        _id: shortid.generate()\n      }\n    }\n\n    case ActionTypes.DRAFT_EDIT_BRANCH: {\n      return action.payload\n    }\n\n    case ActionTypes.UPDATE_DRAFT_BRANCH: {\n      return action.payload\n    }\n\n    case ActionTypes.CLEAR_DRAFT_BRANCH: {\n      return initialState\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport type DraftBranchStateSlice = {\n  DraftExpedition: {\n    SequenceConfig: {\n      DraftBranch: State\n    }\n  }\n}\n\nconst getDraftBranchState = (state: DraftBranchStateSlice) => state.DraftExpedition.SequenceConfig.DraftBranch\n\nexport const selectors = {\n  getDraftBranchState\n}","import { LoopReducer } from 'redux-loop'\nimport { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\n\n///////////\n// STATE //\n///////////\n\nexport type State = string | null\n\nexport const initialState: State = null\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  SET_FIRST_BRANCH_ID = 'DraftExpedition/SequenceConfig/FirstBranchId/SET_FIRST_BRANCH_ID',\n  CLEAR_FIRST_BRANCH_ID = 'DraftExpedition/SequenceConfig/FirstBranchId/CLEAR_FIRST_BRANCH_ID',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  setFirstBranchId: (branchId: string) =>\n    createAction(ActionTypes.SET_FIRST_BRANCH_ID, branchId),\n  clearFirstBranchId: () => createAction(ActionTypes.CLEAR_FIRST_BRANCH_ID),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.SET_FIRST_BRANCH_ID: {\n      return action.payload\n    }\n\n    case ActionTypes.CLEAR_FIRST_BRANCH_ID: {\n      return initialState\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport type FirstBranchIdStateSlice = {\n  DraftExpedition: {\n    SequenceConfig: {\n      FirstBranchId: State\n    }\n  }\n}\n\nconst getFirstBranchId = (state: FirstBranchIdStateSlice) =>\n  state.DraftExpedition.SequenceConfig.FirstBranchId\n\nexport const selectors = {\n  getFirstBranchId,\n}\n","import { createSelector } from 'reselect'\nimport { LoopReducer } from 'redux-loop'\nimport { createAction, ActionsUnion } from '@martin_hotell/rex-tils'\n\nimport * as types from 'types'\n\n///////////\n// STATE //\n///////////\n\nexport type State = types.Branches | {}\nexport const initialState: State = {}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport enum ActionTypes {\n  ADD_BRANCH = 'DraftExpedition/SequenceConfig/Branches/ADD_BRANCH',\n  UPDATE_BRANCH = 'DraftExpedition/SequenceConfig/Branches/UPDATE_BRANCH',\n}\n\nexport const actions = {\n  noOp: () => createAction('NOOP'),\n  addBranch: (\n    branch: types.NarrativeBranch | types.RewardBranch | types.BattleBranch\n  ) => createAction(ActionTypes.ADD_BRANCH, branch),\n  updateBranch: (\n    branch: types.NarrativeBranch | types.RewardBranch | types.BattleBranch\n  ) => createAction(ActionTypes.UPDATE_BRANCH, branch),\n}\n\nexport type Action = ActionsUnion<typeof actions>\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer: LoopReducer<State, Action> = (\n  state: State = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.ADD_BRANCH: {\n      const { _id, id, type } = action.payload\n\n      switch (type) {\n        case 'narrative': {\n          const { text, decisions } = action.payload as types.NarrativeBranch\n\n          return {\n            ...state,\n            [_id]: {\n              _id,\n              id: id ? id : _id,\n              type,\n              text: text ? text : '',\n              decisions: decisions ? [...decisions] : false,\n            },\n          }\n        }\n\n        case 'reward': {\n          const {\n            rewardType,\n            treasure,\n            mage,\n            supply,\n          } = action.payload as types.RewardBranch\n\n          return {\n            ...state,\n            [_id]: {\n              _id,\n              id: id ? id : _id,\n              type,\n              rewardType: rewardType ? rewardType : 'regular',\n              treasure: {\n                ids: treasure?.ids ?? [],\n                tier1: treasure?.tier1 ?? 0,\n                tier2: treasure?.tier2 ?? 0,\n                tier3: treasure?.tier3 ?? 0,\n              },\n              mage: {\n                ids: mage?.ids ?? [],\n                randomAmount: mage?.randomAmount ?? 0,\n              },\n              supply: {\n                ids: supply?.ids ? supply.ids : [],\n                blueprints: supply?.blueprints ?? [],\n                bigPocket: supply?.bigPocket,\n              },\n            },\n          }\n        }\n\n        case 'battle': {\n          const {\n            tier,\n            nemesisId,\n            newUBNCards,\n            treasure,\n            specialRules,\n            onLoss,\n            lossRewards,\n            winRewards,\n          } = action.payload as types.BattleBranch\n\n          return {\n            ...state,\n            [_id]: {\n              _id,\n              id: id ? id : _id,\n              tier,\n              type,\n              nemesisId: nemesisId ?? '',\n              newUBNCards,\n              treasure,\n              specialRules,\n              onLoss: onLoss && 'skip',\n              lossRewards: lossRewards,\n              winRewards: winRewards,\n            },\n          }\n        }\n\n        default: {\n          return {\n            ...state,\n            [_id]: {\n              _id,\n              id,\n              type,\n            },\n          }\n        }\n      }\n    }\n\n    case ActionTypes.UPDATE_BRANCH: {\n      const { _id } = action.payload\n\n      return {\n        ...state,\n        [_id]: action.payload,\n      }\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport type BranchesStateSlice = {\n  DraftExpedition: {\n    SequenceConfig: {\n      Branches: State\n    }\n  }\n}\n\nconst getBranchesState = (state: BranchesStateSlice) =>\n  state.DraftExpedition.SequenceConfig.Branches\n\nconst getBranchIds = createSelector([getBranchesState], (branches) =>\n  Object.keys(branches)\n)\n\nconst getBranches = createSelector([getBranchesState], (branches) =>\n  Object.values(branches)\n)\n\nexport const selectors = {\n  getBranchesState,\n  getBranchIds,\n  getBranches,\n}\n","import { combineReducers } from 'redux-loop'\n\nimport * as DraftRewardConfig from './DraftRewardConfig'\nimport * as DraftRewardSupplyCard from './DraftRewardSupplyCard'\nimport * as DraftBranch from './DraftBranch'\nimport * as FirstBranchId from './FirstBranchId'\nimport * as Branches from './Branches'\n\n///////////\n// STATE //\n///////////\n\nexport type State = {\n  DraftRewardConfig: DraftRewardConfig.State\n  DraftRewardSupplyCard: DraftRewardSupplyCard.State\n  DraftBranch: DraftBranch.State\n  FirstBranchId: FirstBranchId.State\n  Branches: Branches.State\n}\n\nexport const initialState = {\n  DraftRewardConfig: DraftRewardConfig.initialState,\n  DraftRewardSupplyCard: DraftRewardSupplyCard.initialState,\n  DraftBranch: DraftBranch.initialState,\n  FirstBranchId: FirstBranchId.initialState,\n  Branches: Branches.initialState,\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport const actions = {\n  DraftRewardConfig: DraftRewardConfig.actions,\n  DraftRewardSupplyCard: DraftRewardSupplyCard.actions,\n  DraftBranch: DraftBranch.actions,\n  FirstBranchId: FirstBranchId.actions,\n  Branches: Branches.actions,\n}\n\nexport type Action =\n  | DraftRewardConfig.Action\n  | DraftRewardSupplyCard.Action\n  | DraftBranch.Action\n  | FirstBranchId.Action\n  | Branches.Action\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer = combineReducers({\n  DraftRewardConfig: DraftRewardConfig.Reducer,\n  DraftRewardSupplyCard: DraftRewardSupplyCard.Reducer,\n  DraftBranch: DraftBranch.Reducer,\n  FirstBranchId: FirstBranchId.Reducer,\n  Branches: Branches.Reducer,\n})\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport const selectors = {\n  DraftRewardConfig: DraftRewardConfig.selectors,\n  DraftRewardSupplyCard: DraftRewardSupplyCard.selectors,\n  DraftBranch: DraftBranch.selectors,\n  FirstBranchId: FirstBranchId.selectors,\n  Branches: Branches.selectors,\n}\n","import { combineReducers } from 'redux-loop'\n\nimport * as Name from './Name'\nimport * as SeedConfig from './SeedConfig'\nimport * as BigPocketVariantConfig from './BigPocketVariantConfig'\nimport * as InitialBarracksConfig from './InitialBarracksConfig'\nimport * as InitialUBNCardsConfig from './InitialUBNCardsConfig'\nimport * as SettingsSnapshotConfig from './SettingsSnapshotConfig'\nimport * as SequenceConfig from './SequenceConfig'\n\n///////////\n// STATE //\n///////////\n\nexport type State = {\n  Name: Name.State\n  SeedConfig: SeedConfig.State\n  BigPocketVariantConfig: BigPocketVariantConfig.State\n  InitialBarracksConfig: InitialBarracksConfig.State\n  InitialUBNCardsConfig: InitialUBNCardsConfig.State\n  SettingsSnapshotConfig: SettingsSnapshotConfig.State\n  SequenceConfig: SequenceConfig.State\n}\n\nexport const initialState = {\n  Name: Name.initialState,\n  SeedConfig: SeedConfig.initialState,\n  BigPocketVariantConfig: BigPocketVariantConfig.initialState,\n  InitialBarracksConfig: InitialBarracksConfig.initialState,\n  InitialUBNCardsConfig: InitialUBNCardsConfig.initialState,\n  SettingsSnapshotConfig: SettingsSnapshotConfig.initialState,\n  SequenceConfig: SequenceConfig.initialState,\n}\n\n/////////////\n// ACTIONS //\n/////////////\n\nexport const actions = {\n  Name: Name.actions,\n  SeedConfig: SeedConfig.actions,\n  BigPocketVariantConfig: BigPocketVariantConfig.actions,\n  InitialBarracksConfig: InitialBarracksConfig.actions,\n  InitialUBNCardsConfig: InitialUBNCardsConfig.actions,\n  SettingsSnapshotConfig: SettingsSnapshotConfig.actions,\n  SequenceConfig: SequenceConfig.actions,\n}\n\nexport type Action =\n  | Name.Action\n  | SeedConfig.Action\n  | BigPocketVariantConfig.Action\n  | InitialBarracksConfig.Action\n  | InitialUBNCardsConfig.Action\n  | SettingsSnapshotConfig.Action\n  | SequenceConfig.Action\n\n/////////////\n// REDUCER //\n/////////////\n\nexport const Reducer = combineReducers({\n  Name: Name.Reducer,\n  SeedConfig: SeedConfig.Reducer,\n  BigPocketVariantConfig: BigPocketVariantConfig.Reducer,\n  InitialBarracksConfig: InitialBarracksConfig.Reducer,\n  InitialUBNCardsConfig: InitialUBNCardsConfig.Reducer,\n  SettingsSnapshotConfig: SettingsSnapshotConfig.Reducer,\n  SequenceConfig: SequenceConfig.Reducer,\n})\n\n///////////////\n// SELECTORS //\n///////////////\n\nexport const selectors = {\n  Name: Name.selectors,\n  SeedConfig: SeedConfig.selectors,\n  BigPocketVariantConfig: BigPocketVariantConfig.selectors,\n  InitialBarracksConfig: InitialBarracksConfig.selectors,\n  InitialUBNCardsConfig: InitialUBNCardsConfig.selectors,\n  SettingsSnapshotConfig: SettingsSnapshotConfig.selectors,\n  SequenceConfig: SequenceConfig.selectors,\n}\n","import { combineReducers, reduceReducers } from 'redux-loop'\n\nimport * as DraftExpedition from 'Redux/Store/DraftExpedition'\n\nexport type RootState = {\n  DraftExpedition: DraftExpedition.State\n}\n\nexport const initialState = {\n  DraftExpedition: DraftExpedition.initialState\n}\n\nexport const actions = {\n  DraftExpedition: DraftExpedition.actions,\n}\n\nexport type RootAction =\n  | DraftExpedition.Action\n\nexport const RootReducer = reduceReducers(\n  combineReducers<RootState>({\n    DraftExpedition: DraftExpedition.Reducer,\n  })\n)\n\nexport const selectors = {\n  DraftExpedition: DraftExpedition.selectors\n}\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createGlobalStyle } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle`\n  *,\n  ::after, \n  ::before {\n    box-sizing: border-box;\n  }\n\n  body {\n    font-family: 'Roboto', Arial, sans-serif;\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-font-smoothing: antialiased;\n    text-rendering: optimizeLegibility;\n    margin: 0;\n    padding: 0;\n  }\n`\nexport default GlobalStyle\n","const mainTheme = {\n  colors: {}\n}\n\nexport default mainTheme\n","\n\nimport styled from 'styled-components/macro'\n\nconst H1 = styled('h1')`\n  color: #2196f3;\n  margin-top: 0;\n`\n\nexport default H1\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  margin-bottom: 16px;\n`\n\nexport default Wrapper\n","import styled from 'styled-components/macro'\n\nconst Header = styled('h3')`\n  border-bottom: 1px solid #dadada;\n  margin: 0;\n`\n\nexport default Header\n","import styled from 'styled-components/macro'\n\nconst Button = styled('button')`\n  height: 32px;\n  padding: 0 8px;\n  cursor: pointer;\n  font-family: 'Roboto';\n`\n\nexport default Button\n","import styled from 'styled-components/macro'\n\nimport Button from 'components/atoms/Button'\n\nconst Summary = styled(Button)`\n  height: auto;\n  font-size: 1.5rem;\n  font-weight: 100;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0;\n  position: relative;\n  outline: 0;\n  border: none;\n  background: transparent;\n`\n\nexport default Summary\n","import styled from 'styled-components/macro'\n\nconst Content = styled('div')`\n  padding-top: 16px;\n`\n\nexport default Content\n","import styled from 'styled-components/macro'\n\nconst SummaryIcon = styled('span')`\n  position: absolute;\n  right: 8px;\n`\n\nexport default SummaryIcon\n","import React, { useState } from 'react'\n\nimport Wrapper from './__styled__/Wrapper'\nimport Header from './__styled__/Header'\nimport Summary from './__styled__/Summary'\nimport Content from './__styled__/Content'\nimport SummaryIcon from './__styled__/SummaryIcon'\n\ntype Props = {\n  id: string\n  title: string\n  open?: boolean\n  children: React.ReactNode\n}\n\nconst Accordion = ({\n  id,\n  title,\n  open,\n  children\n}: Props) => {\n  const [isOpen, setIsOpen] = useState<boolean>(open ? open : false)\n\n  const handleClick = () => {\n    setIsOpen(!isOpen)\n  }\n\n  return (\n    <Wrapper>\n      <Header>\n        <Summary\n          id={`${id}Summary`}\n          type=\"button\"\n          aria-expanded={isOpen ? 'true' : 'false'}\n          aria-controls={`${id}Content`}\n          onClick={handleClick}\n        >\n          {title}\n          <SummaryIcon className=\"material-icons\">\n            {isOpen ? 'expand_less' : 'expand_more'}\n          </SummaryIcon>\n        </Summary>\n      </Header>\n      <Content\n        id={`${id}Content`}\n        role=\"region\"\n        aria-labelledby={`${id}Summary`}\n        hidden={isOpen ? false : true}\n      >\n        { children }\n      </Content>\n    </Wrapper>\n  )\n}\n\nexport default React.memo(Accordion)\n","import styled from 'styled-components/macro'\n\nconst ScreenReaderOnlyText = styled('span')`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: 0;\n`\n\nexport default ScreenReaderOnlyText\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('fieldset')`\n  padding: 0;\n  border: none;\n`\n\nexport default Wrapper\n","import styled from 'styled-components/macro'\n\nconst Legend = styled('legend')`\n  padding: 0;\n`\n\nexport default Legend\n","import React from 'react'\n\nimport ScreenReaderOnlyText from 'components/atoms/ScreenReaderOnlyText'\nimport Wrapper from './__styled__/Wrapper'\nimport Legend from './__styled__/Legend'\n\ntype Props = {\n  legend: string\n  legendVisible?: boolean\n  children: React.ReactNode\n}\n\nconst Fieldset = ({\n  legend,\n  legendVisible,\n  children,\n}: Props) => {\n  return (\n    <Wrapper>\n      <Legend>\n        {\n          legendVisible \n            ? (legend) \n            : (<ScreenReaderOnlyText>{legend}</ScreenReaderOnlyText>)\n        }\n      </Legend>\n      {children}\n    </Wrapper>\n  )\n}\n\nexport default React.memo(Fieldset)\n","import styled from 'styled-components/macro'\n\nconst Label = styled('label')`\n  display: block;\n  font-family: 'Roboto';\n  font-size: 12px;\n  margin-bottom: 4px;\n`\n\nexport default Label\n","import styled from 'styled-components/macro'\n\nconst Input = styled('input')`\n  height: 32px;\n  width: 100%;\n  padding: 0 8px;\n  font-family: 'Roboto';\n  border: 1px solid #dadada;\n`\n\nexport default Input\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  margin-bottom: 16px;\n`\n\nexport default Wrapper\n","import React from 'react'\n\nimport ScreenReaderOnlyText from 'components/atoms/ScreenReaderOnlyText'\nimport Label from 'components/atoms/Label'\nimport Input from 'components/atoms/Input'\nimport Wrapper from './__styled__/Wrapper'\n\ntype Props = {\n  id: string\n  label: string\n  labelHidden?: boolean\n  name?: string\n  onChange: (event: any) => void\n  defaultValue?: any\n  required?: boolean\n}\n\nconst FormGroupInputText = ({\n  id,\n  label,\n  labelHidden,\n  name,\n  onChange,\n  defaultValue,\n  required,\n}: Props) => {\n  return (\n    <Wrapper>\n      <Label htmlFor={id}>\n        {labelHidden ? (\n          <ScreenReaderOnlyText>{label}</ScreenReaderOnlyText>\n        ) : (\n          label\n        )}\n      </Label>\n      <Input\n        id={id}\n        name={name ? name : id}\n        type=\"text\"\n        onChange={onChange}\n        defaultValue={defaultValue}\n        required={required}\n      />\n    </Wrapper>\n  )\n}\n\nexport default React.memo(FormGroupInputText)\n","import styled from 'styled-components/macro'\n\nimport Label from 'components/atoms/Label'\n\nconst Wrapper = styled('div')`\n  margin-bottom: 16px;\n\n  ${Label} {\n    font-size: 16px;\n    margin-bottom: 0;\n  }\n\n  input {\n    margin: 0 8px 0 0;\n  }\n`\n\nexport default Wrapper\n","import React from 'react'\n\nimport ScreenReaderOnlyText from 'components/atoms/ScreenReaderOnlyText'\nimport Label from 'components/atoms/Label'\nimport Wrapper from './__styled__/Wrapper'\n\ntype Props = {\n  id: string\n  label: string\n  labelHidden?: boolean\n  name?: string\n  onChange: (event: any) => void\n  defaultChecked: boolean\n}\n\nconst FormGroupCheckbox = ({\n  id,\n  label,\n  labelHidden,\n  name,\n  onChange,\n  defaultChecked,\n}: Props) => {\n  return (\n    <Wrapper>\n      <Label htmlFor={id}>\n        <input\n          id={id}\n          type=\"checkbox\"\n          name={name ? name : id}\n          onChange={onChange}\n          defaultChecked={defaultChecked}\n        />\n        {labelHidden ? (\n          <ScreenReaderOnlyText>{label}</ScreenReaderOnlyText>\n        ) : (\n          label\n        )}\n      </Label>\n    </Wrapper>\n  )\n}\n\nexport default React.memo(FormGroupCheckbox)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { RootState, selectors, actions } from 'Redux/Store'\n\nimport Accordion from 'components/organisms/Accordion'\nimport Fieldset from 'components/molecules/Fieldset'\nimport FormGroupInputText from 'components/molecules/FormGroupInputText'\nimport FormGroupCheckbox from 'components/molecules/FormGroupCheckbox'\n\nconst mapStateToProps = (state: RootState) => ({\n  expeditionName: selectors.DraftExpedition.Name.getExpeditionName(state),\n  seed: selectors.DraftExpedition.SeedConfig.getSeed(state),\n  bigPocketVariantConfig: selectors.DraftExpedition.BigPocketVariantConfig.getBigPocketVariantConfig(\n    state\n  ),\n})\n\nconst mapDispatchToProps = {\n  setExpeditionName: actions.DraftExpedition.Name.setExpeditionName,\n  setSeed: actions.DraftExpedition.SeedConfig.setSeed,\n  setBigPocketVariantConfig:\n    actions.DraftExpedition.BigPocketVariantConfig.setBigPocketVariantConfig,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps & {}\n\nconst BasicInformation = ({\n  expeditionName,\n  seed,\n  bigPocketVariantConfig,\n  setExpeditionName,\n  setSeed,\n  setBigPocketVariantConfig,\n}: Props) => {\n  const handleNameChange = (event: any) => {\n    setExpeditionName(event.target.value)\n  }\n\n  const handleBigPocketChange = (event: any) => {\n    setBigPocketVariantConfig(event.currentTarget.checked)\n  }\n\n  const handleSeedChange = (event: any) => {\n    setSeed(event.target.value)\n  }\n\n  return (\n    <Accordion id=\"basicInformation\" title=\"Basic Information\" open>\n      <Fieldset legend=\"Basic Information\">\n        <FormGroupInputText\n          id=\"expeditionName\"\n          label=\"Expedition Name\"\n          onChange={handleNameChange}\n          defaultValue={expeditionName}\n        />\n        <FormGroupCheckbox\n          id=\"bigPocketVariantConfig\"\n          label=\"Big Pocket Mode\"\n          onChange={handleBigPocketChange}\n          defaultChecked={bigPocketVariantConfig}\n        />\n        <FormGroupInputText\n          id=\"seed\"\n          label=\"Seed\"\n          onChange={handleSeedChange}\n          defaultValue={seed}\n        />\n      </Fieldset>\n    </Accordion>\n  )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BasicInformation)\n","import styled from 'styled-components'\n\nconst Wrapper = styled('div')`\n  height: 100%;\n  width: 100%;\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 10000;\n  padding: 24px;\n`\n\nexport default Wrapper\n","import styled from 'styled-components'\n\nconst Backdrop = styled('div')`\n  position: fixed;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  background: rgb(0, 0, 0, 0.3);\n`\n\nexport default Backdrop\n","import styled from 'styled-components'\n\nconst Content = styled('div')`\n  margin: auto;\n  height: 100%;\n  width: 100%;\n  background: #fff;\n  box-shadow: 0 0 10px 2px rgba(0, 0, 0, 0.2);\n  border-radius: 8px;\n  position: relative;\n`\n\nexport default Content\n","import styled from 'styled-components'\n\nconst Header = styled('div')`\n  margin: auto;\n  height: 64px;\n  width: 100%;\n  padding: 0 24px;\n  position: relative;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n`\n\nexport default Header\n","import styled from 'styled-components'\n\ntype Props = {\n  hasFooter?: boolean\n}\n\nconst Body = styled('div')<Props>`\n  height: ${props => props.hasFooter ? 'calc(100% - (64px * 2))' : 'calc(100% - 64px)'};\n`\n\nexport default Body\n","import styled from 'styled-components/macro'\n\nconst H2 = styled('h2')`\n  color: #2196f3;\n`\n\nexport default H2\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport H2 from 'components/atoms/H2'\n\ntype Props = {\n  themeColor: string\n}\n\n// NOTE: we need to take away additional props, so that they are not passed\n// to DOM elements by MUI Components (we really should get rid of MUI...)\nconst Title = styled(({ themeColor, ...rest }) => <H2 {...rest} />)<Props>`\n  color: ${props => props.themeColor};\n  margin: 0;\n`\n\nexport default Title\n","import styled from 'styled-components'\n\nconst CloseButton = styled('button')`\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 48px;\n  height: 48px;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  transition: color .2s ease;\n\n  &:hover {\n    color: #2196f3;\n  }\n`\n\nexport default CloseButton\n","import styled from 'styled-components'\n\nconst Footer = styled('div')`\n  margin: auto;\n  height: 64px;\n  width: 100%;\n  padding: 0 24px;\n  position: relative;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\n  margin-top: -1px;\n`\n\nexport default Footer\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport Wrapper from './Wrapper'\nimport Backdrop from './Backdrop'\nimport Content from './Content'\nimport Header from './Header'\nimport Body from './Body'\nimport Title from './Title'\nimport CloseButton from './CloseButton'\nimport Footer from './Footer'\n\ntype Props = {\n  titleLabel: string\n  titleColor?: string\n  children: React.ReactChild\n  closeModal: () => void\n  footer?: React.ReactNode\n}\n\nconst Modal = ({ titleColor, titleLabel, children, closeModal, footer }: Props) => {\n  const domEl = document.getElementById('modal-root')\n\n  if (!domEl) return null\n\n  return ReactDOM.createPortal(\n    <React.Fragment>\n      <Wrapper>\n        <Backdrop onClick={closeModal} />\n        <Content>\n          <Header>\n            <Title variant=\"h2\" themeColor={titleColor}>\n              {titleLabel}\n            </Title>\n            <CloseButton onClick={closeModal}>\n              <span className=\"material-icons\">close</span>\n            </CloseButton>\n          </Header>\n          <Body hasFooter={footer ? true : false}>{children}</Body>\n          {footer && (\n            <Footer>{footer}</Footer>\n          )}\n        </Content>\n      </Wrapper>\n    </React.Fragment>,\n    domEl\n  )\n}\n\nexport default React.memo(Modal)\n","import styled from 'styled-components/macro'\n\ntype Props = {\n  hasFooter?: boolean\n}\n\nconst ModalBodyWrapper = styled('div')<Props>`\n  margin: auto;\n  height: ${props => (props.hasFooter ? 'calc(100% - 64px)' : '100%')};\n  width: 100%;\n  padding: 24px;\n  position: relative;\n  overflow-y: auto;\n\n  > *:first-child {\n    margin-top: 0;\n  }\n`\n\nexport default ModalBodyWrapper\n","import styled from 'styled-components/macro'\n\nconst ModalFooterWrapper = styled('div')`\n  margin: auto;\n  height: 64px;\n  width: 100%;\n  padding: 0 24px;\n  position: relative;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\n  margin-top: -1px;\n\n  button {\n    width: 100%;\n  }\n\n  button + button {\n    margin-left: 16px;\n  }\n`\n\nexport default ModalFooterWrapper\n","import React, { useState } from 'react'\n\nimport Modal from 'components/organisms/Modal'\nimport Prompt from 'components/organisms/Prompt'\n\ntype ModalProps = {\n  titleColor?: string\n  titleLabel: string\n  children: React.ReactChild\n  closeCallback?: () => void\n  footer?: React.ReactNode\n}\n\nexport type RenderModalType = (props: ModalProps) => JSX.Element\n\n// Renders a modal to the modal root and handles the visibility state\n// of this modal.\n//\n// NOTE: Each modal you want to render should use a separate hook!!!\n// Otherwise your modals will share their visibility state which might lead\n// to overlapping and unclosable elements.\nexport const useModal = () => {\n  const [isVisible, setIsVisible] = useState(false)\n  const show = () => setIsVisible(true)\n  const hide = () => setIsVisible(false)\n  const RenderModal: RenderModalType = ({\n    titleColor,\n    titleLabel,\n    children,\n    closeCallback,\n    footer,\n  }) => {\n    const handleClose = () => {\n      hide()\n      if (closeCallback) {\n        closeCallback()\n      }\n    }\n\n    return (\n      <React.Fragment>\n        {isVisible && (\n          <Modal\n            titleColor={titleColor}\n            titleLabel={titleLabel}\n            closeModal={handleClose}\n            footer={footer}\n          >\n            {children}\n          </Modal>\n        )}\n      </React.Fragment>\n    )\n  }\n\n  return {\n    show,\n    hide,\n    RenderModal,\n  }\n}\n\ntype PromptProps = {\n  closeCallback?: () => void\n  children?: React.ReactChild\n  noHandler: () => void\n  titleColor: string\n  titleLabel: string\n  yesHandler: () => void\n}\n\nexport type RenderPromptType = (props: PromptProps) => JSX.Element\n\nexport const usePrompt = () => {\n  const { show, hide, RenderModal } = useModal()\n\n  const RenderPrompt: RenderPromptType = ({\n    children,\n    noHandler,\n    titleColor,\n    titleLabel,\n    yesHandler,\n  }) => (\n    <RenderModal\n      titleColor={titleColor}\n      titleLabel={titleLabel}\n      closeCallback={noHandler}\n    >\n      <Prompt yesHandler={yesHandler} noHandler={noHandler}>\n        {children}\n      </Prompt>\n    </RenderModal>\n  )\n\n  return {\n    show,\n    hide,\n    RenderPrompt,\n  }\n}\n","import React from 'react'\n\nimport ModalBodyWrapper from 'components/atoms/ModalBodyWrapper'\nimport ModalFooterWrapper from 'components/atoms/ModalFooterWrapper'\nimport Button from 'components/atoms/Button'\n\nconst Prompt = ({\n  yesHandler,\n  noHandler,\n  children,\n}: {\n  yesHandler: () => void\n  noHandler: () => void\n  children?: React.ReactChild\n}) => {\n  return (\n    <React.Fragment>\n      <ModalBodyWrapper hasFooter={true}>{children}</ModalBodyWrapper>\n      <ModalFooterWrapper>\n        <Button\n          onClick={noHandler}\n        >\n          No\n        </Button>\n        <Button\n          onClick={yesHandler}\n        >\n          Yes\n        </Button>\n      </ModalFooterWrapper>\n    </React.Fragment>\n  )\n}\n\nexport default React.memo(Prompt)\n","import styled from 'styled-components/macro'\nimport ReactSelect from 'react-select'\n\nconst Select = styled(ReactSelect)`\n\n`\n\nexport default Select\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  margin-bottom: 16px;\n`\n\nexport default Wrapper\n","import React from 'react'\n\nimport * as types from 'types'\n\nimport ScreenReaderOnlyText from 'components/atoms/ScreenReaderOnlyText'\nimport Label from 'components/atoms/Label'\nimport Select from 'components/atoms/Select'\nimport Wrapper from './__styled__/Wrapper'\n\ntype Props = {\n  id: string\n  options: types.SelectOptions\n  label: string\n  labelHidden?: boolean\n  name?: string\n  onChange: (event: any) => void\n  defaultValue?: any\n  required?: boolean\n  isMulti?: boolean\n}\n\nconst FormGroupInputText = ({\n  id,\n  options,\n  label,\n  labelHidden,\n  name,\n  onChange,\n  defaultValue,\n  required,\n  isMulti,\n}: Props) => {\n  return (\n    <Wrapper>\n      <Label htmlFor={id}>\n        {labelHidden ? (\n          <ScreenReaderOnlyText>{label}</ScreenReaderOnlyText>\n        ) : (\n          label\n        )}\n      </Label>\n      <Select\n        options={options}\n        classNamePrefix=\"ReactSelect\"\n        id={id}\n        name={name ? name : id}\n        onChange={onChange}\n        defaultValue={defaultValue}\n        required={required}\n        isMulti={isMulti}\n      />\n    </Wrapper>\n  )\n}\n\nexport default React.memo(FormGroupInputText)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport * as types from 'types'\n\nimport { actions } from 'Redux/Store'\nimport { initialState } from 'Redux/Store/DraftExpedition/SequenceConfig/DraftBranch'\n\nimport FormGroupInputText from 'components/molecules/FormGroupInputText'\nimport FormGroupSelect from 'components/molecules/FormGroupSelect'\n\nconst mapDispatchToProps = {\n  updateDraftBranch:\n    actions.DraftExpedition.SequenceConfig.DraftBranch.updateDraftBranch,\n}\n\ntype Props = typeof mapDispatchToProps & {\n  draftBranch: types.BranchBase\n}\n\nconst BaseBranch = ({ \n  draftBranch, \n  updateDraftBranch,\n}: Props) => {\n\n  const branchTypeOptions: types.BranchTypeOptions = [\n    { value: 'narrative', label: 'narrative' },\n    { value: 'battle', label: 'battle' },\n    { value: 'reward', label: 'reward' },\n  ]\n\n  const branchTypeDefaultValue = branchTypeOptions.find(\n    (option) => option.value === draftBranch.type\n  )\n\n  const handleBranchIdChange = (event: any) => {\n    updateDraftBranch({\n      ...draftBranch,\n      id: event.target.value,\n    })\n  }\n\n  const handleBranchTypeChange = (selectOption: types.BranchTypeOption) => {\n    const { _id, id } = draftBranch\n\n    updateDraftBranch({\n      ...initialState,\n      _id,\n      id,\n      type: selectOption.value,\n    })\n  }\n\n  return (\n    <>\n      <FormGroupInputText\n        id=\"branchId\"\n        label=\"Branch id\"\n        onChange={handleBranchIdChange}\n        defaultValue={draftBranch.id}\n        required={true}\n      />\n      <FormGroupSelect\n        options={branchTypeOptions}\n        id=\"branchType\"\n        label=\"Branch type\"\n        onChange={handleBranchTypeChange}\n        defaultValue={branchTypeDefaultValue}\n      />\n    </>\n  )\n}\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(React.memo(BaseBranch))\n","import styled from 'styled-components/macro'\n\nconst Textarea = styled('textarea')`\n  min-height: 64px;\n  width: 100%;\n  padding: 8px;\n  font-family: 'Roboto';\n  border: 1px solid #dadada;\n  resize: vertical;\n`\n\nexport default Textarea\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  margin-bottom: 16px;\n`\n\nexport default Wrapper\n","import React from 'react'\n\nimport ScreenReaderOnlyText from 'components/atoms/ScreenReaderOnlyText'\nimport Label from 'components/atoms/Label'\nimport Textarea from 'components/atoms/Textarea'\nimport Wrapper from './__styled__/Wrapper'\n\ntype Props = {\n  id: string\n  label: string\n  labelHidden?: boolean\n  name?: string\n  onChange: (event: any) => void\n  defaultValue: any\n  required?: boolean\n}\n\nconst FormGroupTextarea = ({\n  id,\n  label,\n  labelHidden,\n  name,\n  onChange,\n  defaultValue,\n  required\n}: Props) => {\n  \n  return (\n    <Wrapper>\n      <Label htmlFor={id}>\n        {\n          labelHidden ? (\n            <ScreenReaderOnlyText>{label}</ScreenReaderOnlyText>\n          ) : (\n            label\n          )\n        }\n      </Label>\n      <Textarea\n        id={id}\n        name={name ? name : id}\n        onChange={onChange}\n        defaultValue={defaultValue}\n        required={required}\n      />\n    </Wrapper>\n  )\n}\n\nexport default React.memo(FormGroupTextarea)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport shortid from 'shortid'\n\nimport * as types from 'types'\n\nimport { actions } from 'Redux/Store'\n\nimport FormGroupInputText from 'components/molecules/FormGroupInputText'\nimport FormGroupTextarea from 'components/molecules/FormGroupTextarea'\n\nconst mapDispatchToProps = {\n  updateDraftBranch:\n    actions.DraftExpedition.SequenceConfig.DraftBranch.updateDraftBranch,\n}\n\ntype Props = typeof mapDispatchToProps & {\n  draftBranch: types.NarrativeBranch\n}\n\nconst NarrativeBranch = ({ \n  draftBranch, \n  updateDraftBranch \n}: Props) => {\n  \n  const handleBranchTextChange = (event: any) => {\n    updateDraftBranch({\n      ...draftBranch,\n      text: event.target.value,\n    })\n  }\n\n  const handleBranchDecisionsChange = (event: any) => {\n    const decisions =\n      (event.target.value && event.target.value.split('; ')) ?? []\n    updateDraftBranch({\n      ...draftBranch,\n      decisions: decisions.map((decision: string) => {\n        return {\n          _id: shortid.generate(),\n          text: decision,\n        }\n      }),\n    })\n  }\n\n  return (\n    <>\n      <FormGroupTextarea\n        id=\"description\"\n        label=\"Text\"\n        onChange={handleBranchTextChange}\n        defaultValue={draftBranch.text}\n      />\n      <p>\n        Add multiple decisions by separating them with ';' followed by a SPACE\n      </p>\n      <FormGroupInputText\n        id=\"decisions\"\n        label=\"Decisions\"\n        onChange={handleBranchDecisionsChange}\n        defaultValue={\n          draftBranch.decisions\n            ? draftBranch.decisions.map((decision) => decision.text)\n            : ''\n        }\n      />\n    </>\n  )\n}\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(React.memo(NarrativeBranch))","import React from 'react'\n\nimport DATA from 'aer-data'\nimport * as aerTypes from 'aer-types'\n\nimport * as types from 'types'\n\nimport Accordion from 'components/organisms/Accordion'\nimport FormGroupSelect from 'components/molecules/FormGroupSelect'\nimport FormGroupInputText from 'components/molecules/FormGroupInputText'\n\ntype Props = {\n  draftBranch: types.RewardBranch\n  updateDraftBranch: (branch: types.Branch) => void\n}\n\nconst Treasures = ({ draftBranch, updateDraftBranch }: Props) => {\n  const dataTreasures: aerTypes.Treasure[] = Object.values(\n    DATA.normalizedData.ENG.treasures\n  )\n\n  const treasureOptions = dataTreasures.map((treasure: aerTypes.Treasure) => {\n    return {\n      value: treasure.id,\n      label: `${treasure.name} (Level: ${treasure.level})`,\n    }\n  })\n\n  const handleTreasureChange = (selectOptions: types.SelectOptions) => {\n    const selectedTreasureIds: string[] = selectOptions\n      ? selectOptions.map((option: types.SelectOption) => option.value)\n      : []\n\n    updateDraftBranch({\n      ...draftBranch,\n      treasure: {\n        ...draftBranch.treasure,\n        ids: [...selectedTreasureIds],\n      },\n    })\n  }\n\n  const handleTreasureAmountTier1Change = (event: React.ChangeEvent) => {\n    updateDraftBranch({\n      ...draftBranch,\n      treasure: {\n        ...draftBranch.treasure,\n        tier1: parseInt((event.target as HTMLInputElement).value),\n      },\n    })\n  }\n\n  const handleTreasureAmountTier2Change = (event: React.ChangeEvent) => {\n    updateDraftBranch({\n      ...draftBranch,\n      treasure: {\n        ...draftBranch.treasure,\n        tier2: parseInt((event.target as HTMLInputElement).value),\n      },\n    })\n  }\n\n  const handleTreasureAmountTier3Change = (event: React.ChangeEvent) => {\n    updateDraftBranch({\n      ...draftBranch,\n      treasure: {\n        ...draftBranch.treasure,\n        tier3: parseInt((event.target as HTMLInputElement).value),\n      },\n    })\n  }\n\n  return (\n    <Accordion id=\"treasures\" title=\"Treasures\" open>\n      <FormGroupSelect\n        options={treasureOptions}\n        id=\"selectTreasures\"\n        label=\"Select Treasures\"\n        onChange={handleTreasureChange}\n        isMulti\n      />\n      <h3>Random Treasures</h3>\n      <p>Enter the amount of random treasures per tier.</p>\n      <FormGroupInputText\n        id=\"treasuresTier1\"\n        label=\"Tier 1\"\n        onChange={handleTreasureAmountTier1Change}\n        defaultValue={0}\n      />\n      <FormGroupInputText\n        id=\"treasuresTier2\"\n        label=\"Tier 2\"\n        onChange={handleTreasureAmountTier2Change}\n        defaultValue={0}\n      />\n      <FormGroupInputText\n        id=\"treasuresTier3\"\n        label=\"Tier 3\"\n        onChange={handleTreasureAmountTier3Change}\n        defaultValue={0}\n      />\n    </Accordion>\n  )\n}\n\nexport default React.memo(Treasures)\n","import React from 'react'\n\nimport DATA from 'aer-data'\nimport * as aerTypes from 'aer-types'\n\nimport * as types from 'types'\n\nimport Accordion from 'components/organisms/Accordion'\nimport FormGroupSelect from 'components/molecules/FormGroupSelect'\nimport FormGroupInputText from 'components/molecules/FormGroupInputText'\n\ntype Props = {\n  draftBranch: types.RewardBranch\n  updateDraftBranch: (branch: types.Branch) => void\n}\n\nconst Mages = ({ draftBranch, updateDraftBranch }: Props) => {\n  const dataMages: aerTypes.Mage[] = Object.values(\n    DATA.normalizedData.ENG.mages\n  )\n\n  const mageOptions = dataMages.map((mage: aerTypes.Mage) => {\n    return {\n      value: mage.id,\n      label: mage.name,\n    }\n  })\n\n  const handleMageChange = (selectOptions: types.SelectOptions) => {\n    const selectedMageIds: string[] = selectOptions\n      ? selectOptions.map((option: types.SelectOption) => option.value)\n      : []\n\n    updateDraftBranch({\n      ...draftBranch,\n      mage: {\n        ...draftBranch.mage,\n        ids: [...selectedMageIds],\n      },\n    })\n  }\n\n  const handleMageRandomAmountChange = (event: React.ChangeEvent) => {\n    updateDraftBranch({\n      ...draftBranch,\n      mage: {\n        ...draftBranch.mage,\n        randomAmount: parseInt((event.target as HTMLInputElement).value),\n      },\n    })\n  }\n\n  return (\n    <Accordion id=\"mages\" title=\"Mages\" open>\n      <FormGroupSelect\n        options={mageOptions}\n        id=\"selectMages\"\n        label=\"Select Mages\"\n        onChange={handleMageChange}\n        isMulti\n      />\n      <h3>Random Mages</h3>\n      <p>Enter the amount of random mages.</p>\n      <FormGroupInputText\n        id=\"randomMagesAmount\"\n        label=\"Amount of random mages\"\n        onChange={handleMageRandomAmountChange}\n        defaultValue={0}\n      />\n    </Accordion>\n  )\n}\n\nexport default React.memo(Mages)\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  margin-bottom: 16px;\n`\n\nexport default Wrapper\n","import React from 'react'\n\nimport ScreenReaderOnlyText from 'components/atoms/ScreenReaderOnlyText'\nimport Label from 'components/atoms/Label'\nimport Input from 'components/atoms/Input'\nimport Wrapper from './__styled__/Wrapper'\n\ntype Props = {\n  id: string\n  label: string\n  labelHidden?: boolean\n  name?: string\n  onChange: (event: any) => void\n  defaultValue?: any\n  required?: boolean\n}\n\nconst FormGroupInputNumber = ({\n  id,\n  label,\n  labelHidden,\n  name,\n  onChange,\n  defaultValue,\n  required,\n}: Props) => {\n  return (\n    <Wrapper>\n      <Label htmlFor={id}>\n        {labelHidden ? (\n          <ScreenReaderOnlyText>{label}</ScreenReaderOnlyText>\n        ) : (\n          label\n        )}\n      </Label>\n      <Input\n        id={id}\n        name={name ? name : id}\n        type=\"number\"\n        onChange={onChange}\n        defaultValue={defaultValue}\n        required={required}\n      />\n    </Wrapper>\n  )\n}\n\nexport default React.memo(FormGroupInputNumber)\n","import React from 'react'\n\nimport * as types from 'types'\n\nimport FormGroupSelect from 'components/molecules/FormGroupSelect'\nimport FormGroupInputNumber from 'components/molecules/FormGroupInputNumber'\nimport Button from 'components/atoms/Button'\n\ntype Props = {\n  blueprint: types.Blueprint\n  handleChange: (blueprint: types.Blueprint) => void\n  handleDelete: (blueprint: types.Blueprint) => void\n}\n\nconst SupplyCardBlueprint = ({\n  blueprint,\n  handleChange,\n  handleDelete,\n}: Props) => {\n  const cardTypeOptions: types.CardTypeOptions = [\n    { value: 'Gem', label: 'Gem' },\n    { value: 'Relic', label: 'Relic' },\n    { value: 'Spell', label: 'Spell' },\n  ]\n\n  const cardTypeDefaultValue = cardTypeOptions.find(\n    (option) => option.value === blueprint.type\n  )\n\n  const cardOperationOptions: types.CardOperationOptions = [\n    { value: '<', label: '>' },\n    { value: '>', label: '<' },\n    { value: '=', label: '=' },\n    { value: '<=', label: '<=' },\n    { value: '>=', label: '>=' },\n    { value: 'ANY', label: 'ANY' },\n    { value: 'OR', label: 'OR' },\n  ]\n\n  const cardOperationDefaultValue = cardOperationOptions.find(\n    (option) => option.value === blueprint.operation\n  )\n\n  const cardCostsOptions: types.CardCostsOptions = [\n    { value: '0', label: 'Cost: 0' },\n    { value: '1', label: 'Cost: 1' },\n    { value: '2', label: 'Cost: 2' },\n    { value: '3', label: 'Cost: 3' },\n    { value: '4', label: 'Cost: 4' },\n    { value: '5', label: 'Cost: 5' },\n    { value: '6', label: 'Cost: 6' },\n    { value: '7', label: 'Cost: 7' },\n    { value: '8', label: 'Cost: 8' },\n    { value: '9', label: 'Cost: 9' },\n  ]\n\n  const handleCardTypeChange = (selectOption: types.CardTypeOption) => {\n    handleChange({\n      ...blueprint,\n      type: selectOption.value,\n    })\n  }\n\n  const handleCardOperationChange = (\n    selectOption: types.CardOperationOption\n  ) => {\n    handleChange({\n      ...blueprint,\n      operation: selectOption.value,\n    })\n  }\n\n  const handleCardThresholdChange = (event: React.ChangeEvent) => {\n    handleChange({\n      ...blueprint,\n      threshold: parseInt((event.target as HTMLInputElement).value),\n    })\n  }\n\n  const handleCardCostsChange = (selectOptions: types.CardCostsOptions) => {\n    const costValues: number[] = selectOptions.map(\n      (option: types.CardCostsOption) => parseInt(option.value)\n    )\n\n    handleChange({\n      ...blueprint,\n      values: [...costValues],\n    })\n  }\n\n  const handleDeleteBlueprint = () => {\n    handleDelete(blueprint)\n  }\n\n  return (\n    <div>\n      <FormGroupSelect\n        options={cardTypeOptions}\n        id={`selectCardType${blueprint._id}`}\n        label=\"Type\"\n        onChange={handleCardTypeChange}\n        defaultValue={cardTypeDefaultValue}\n      />\n      <FormGroupSelect\n        options={cardOperationOptions}\n        id={`selectCardOperation${blueprint._id}`}\n        label=\"Operation\"\n        onChange={handleCardOperationChange}\n        defaultValue={cardOperationDefaultValue}\n      />\n      {blueprint.operation !== 'OR' && blueprint.operation !== 'ANY' && (\n        <FormGroupInputNumber\n          id={`threshold${blueprint._id}`}\n          label=\"Threshold\"\n          onChange={handleCardThresholdChange}\n        />\n      )}\n      {blueprint.operation === 'OR' && (\n        <FormGroupSelect\n          options={cardCostsOptions}\n          id={`selectCosts${blueprint._id}`}\n          label=\"Card costs (values)\"\n          onChange={handleCardCostsChange}\n          isMulti\n        />\n      )}\n      <Button onClick={handleDeleteBlueprint}>Delete</Button>\n    </div>\n  )\n}\n\nexport default SupplyCardBlueprint\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport DATA from 'aer-data'\nimport * as aerTypes from 'aer-types'\n\nimport { RootState, selectors, actions } from 'Redux/Store'\n\nimport * as types from 'types'\n\nimport Accordion from 'components/organisms/Accordion'\nimport FormGroupSelect from 'components/molecules/FormGroupSelect'\nimport Button from 'components/atoms/Button'\nimport SupplyCardBlueprint from 'components/molecules/SupplyCardBlueprint'\nimport FormGroupCheckbox from 'components/molecules/FormGroupCheckbox'\n\nconst mapStateToProps = (state: RootState) => ({\n  blueprints: selectors.DraftExpedition.SequenceConfig.DraftRewardSupplyCard.getDraftRewardSupplyCardArray(\n    state\n  ),\n})\n\nconst mapDispatchToProps = {\n  addSupplyCard:\n    actions.DraftExpedition.SequenceConfig.DraftRewardSupplyCard\n      .draftAddRewardSupplyCard,\n  editSupplyCard:\n    actions.DraftExpedition.SequenceConfig.DraftRewardSupplyCard\n      .draftEditRewardSupplyCard,\n  deleteSupplyCard:\n    actions.DraftExpedition.SequenceConfig.DraftRewardSupplyCard\n      .draftDeleteRewardSupplyCard,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> &\n  typeof mapDispatchToProps & {\n    draftBranch: types.RewardBranch\n    updateDraftBranch: (branch: types.Branch) => void\n  }\n\nconst Supply = ({\n  draftBranch,\n  updateDraftBranch,\n  blueprints,\n  addSupplyCard,\n  editSupplyCard,\n  deleteSupplyCard,\n}: Props) => {\n  const dataSupply: aerTypes.ICard[] = Object.values(\n    DATA.normalizedData.ENG.cards\n  )\n\n  const supplyOptions = dataSupply.map((supply: aerTypes.ICard) => {\n    return {\n      value: supply.id,\n      label: `${supply.name} (${supply.type})`,\n    }\n  })\n\n  const handleSupplyChange = (selectOptions: types.SelectOptions) => {\n    const selectedSupplyIds: string[] = selectOptions\n      ? selectOptions.map((option: types.SelectOption) => option.value)\n      : []\n\n    updateDraftBranch({\n      ...draftBranch,\n      supply: {\n        ...draftBranch.supply,\n        ids: [...selectedSupplyIds],\n      },\n    })\n  }\n\n  const handleBigPocketChange = (event: React.ChangeEvent) => {\n    updateDraftBranch({\n      ...draftBranch,\n      supply: {\n        ...draftBranch.supply,\n        bigPocket: (event.currentTarget as HTMLInputElement).checked,\n      },\n    })\n  }\n\n  const handleAddSupplyCard = () => {\n    addSupplyCard()\n  }\n\n  const handleEditSupplyCard = (blueprint: types.Blueprint) => {\n    editSupplyCard(blueprint)\n  }\n\n  const handleDeleteSupplyCard = (blueprint: types.Blueprint) => {\n    deleteSupplyCard(blueprint)\n  }\n\n  const renderSupplyBlueprints = (blueprints: types.Blueprint[]) => {\n    return blueprints.map((blueprint: types.Blueprint) => {\n      return (\n        <SupplyCardBlueprint\n          key={blueprint._id}\n          blueprint={blueprint}\n          handleChange={handleEditSupplyCard}\n          handleDelete={handleDeleteSupplyCard}\n        />\n      )\n    })\n  }\n\n  return (\n    <Accordion id=\"supply\" title=\"Supply\" open>\n      <FormGroupCheckbox\n        id=\"rewardSupplyBigPocket\"\n        label=\"Big Pocket Mode\"\n        onChange={handleBigPocketChange}\n        defaultChecked={draftBranch?.supply?.bigPocket ?? false}\n      />\n      <FormGroupSelect\n        options={supplyOptions}\n        id=\"selectSupplyCards\"\n        label=\"Select Supply Cards\"\n        onChange={handleSupplyChange}\n        isMulti\n      />\n      <h3>Random supply cards</h3>\n      <Button onClick={handleAddSupplyCard}>Add random supply card</Button>\n      {blueprints ? (\n        renderSupplyBlueprints(blueprints)\n      ) : (\n        <p>No supply cards added</p>\n      )}\n    </Accordion>\n  )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(Supply))\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport * as types from 'types'\n\nimport { actions } from 'Redux/Store'\n\nimport Fieldset from 'components/molecules/Fieldset'\nimport Treasures from './Treasures'\nimport Mages from './Mages'\nimport Supply from './Supply'\n\nconst mapDispatchToProps = {\n  updateDraftBranch:\n    actions.DraftExpedition.SequenceConfig.DraftBranch.updateDraftBranch,\n}\n\ntype Props = typeof mapDispatchToProps & {\n  draftBranch: types.RewardBranch\n}\n\nconst RewardBranch = ({ \n  draftBranch,\n  updateDraftBranch \n}: Props) => {\n\n  const handleRewardTypeChange = (event: React.ChangeEvent) => {\n    updateDraftBranch({\n      ...draftBranch,\n      rewardType: (event.target as HTMLInputElement).value as types.RewardType,\n    })\n  }\n\n  return (\n    <>\n      <Fieldset legend=\"Reward type\" legendVisible>\n        <div className=\"radio-wrapper\">\n          <input\n            type=\"radio\"\n            name=\"rewardType\"\n            id=\"regular\"\n            defaultChecked\n            value=\"regular\"\n            onChange={handleRewardTypeChange}\n          />\n          <label htmlFor=\"regular\">regular</label>\n        </div>\n        <div className=\"radio-wrapper\">\n          <input\n            type=\"radio\"\n            name=\"rewardType\"\n            id=\"custom\"\n            value=\"custom\"\n            onChange={handleRewardTypeChange}\n          />\n          <label htmlFor=\"custom\">custom</label>\n        </div>\n      </Fieldset>\n      {draftBranch.rewardType === 'custom' && (\n        <>\n          <Treasures draftBranch={draftBranch} updateDraftBranch={updateDraftBranch} />\n          <Mages draftBranch={draftBranch} updateDraftBranch={updateDraftBranch} />\n          <Supply draftBranch={draftBranch} updateDraftBranch={updateDraftBranch} />\n        </>\n      )}\n    </>\n  )\n}\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(React.memo(RewardBranch))","import React from 'react'\n\nimport DATA from 'aer-data'\nimport * as aerTypes from 'aer-types'\n\nimport * as types from 'types'\n\nimport Accordion from 'components/organisms/Accordion'\nimport FormGroupSelect from 'components/molecules/FormGroupSelect'\nimport FormGroupInputText from 'components/molecules/FormGroupInputText'\n\ntype Props = {\n  config: types.BattleRewardConfig\n  updateDraftRewardConfig: (config: types.BattleRewardConfig) => void\n}\n\nconst Treasures = ({ config, updateDraftRewardConfig }: Props) => {\n  const dataTreasures: aerTypes.Treasure[] = Object.values(\n    DATA.normalizedData.ENG.treasures\n  )\n\n  const treasureOptions = dataTreasures.map((treasure: aerTypes.Treasure) => {\n    return {\n      value: treasure.id,\n      label: `${treasure.name} (Level: ${treasure.level})`,\n    }\n  })\n\n  const handleTreasureChange = (selectOptions: types.SelectOptions) => {\n    const selectedTreasureIds: string[] = selectOptions\n      ? selectOptions.map((option: types.SelectOption) => option.value)\n      : []\n\n    updateDraftRewardConfig({\n      ...config,\n      ...Object.assign({\n        treasure: {\n          ...config.treasure,\n          ids: [...selectedTreasureIds],\n        },\n      }),\n    })\n  }\n\n  const handleTreasureAmountTier1Change = (event: React.ChangeEvent) => {\n    updateDraftRewardConfig({\n      ...config,\n      ...Object.assign({\n        treasure: {\n          ...config.treasure,\n          tier1: parseInt((event.target as HTMLInputElement).value),\n        },\n      }),\n    })\n  }\n\n  const handleTreasureAmountTier2Change = (event: React.ChangeEvent) => {\n    updateDraftRewardConfig({\n      ...config,\n      ...Object.assign({\n        treasure: {\n          ...config.treasure,\n          tier2: parseInt((event.target as HTMLInputElement).value),\n        },\n      }),\n    })\n  }\n\n  const handleTreasureAmountTier3Change = (event: React.ChangeEvent) => {\n    updateDraftRewardConfig({\n      ...config,\n      ...Object.assign({\n        treasure: {\n          ...config.treasure,\n          tier3: parseInt((event.target as HTMLInputElement).value),\n        },\n      }),\n    })\n  }\n\n  return (\n    <Accordion id=\"treasures\" title=\"Treasures\" open>\n      <FormGroupSelect\n        options={treasureOptions}\n        id=\"selectTreasures\"\n        label=\"Select Treasures\"\n        onChange={handleTreasureChange}\n        isMulti\n      />\n      <h3>Random Treasures</h3>\n      <p>Enter the amount of random treasures per tier.</p>\n      <FormGroupInputText\n        id=\"treasuresTier1\"\n        label=\"Tier 1\"\n        onChange={handleTreasureAmountTier1Change}\n        defaultValue={0}\n      />\n      <FormGroupInputText\n        id=\"treasuresTier2\"\n        label=\"Tier 2\"\n        onChange={handleTreasureAmountTier2Change}\n        defaultValue={0}\n      />\n      <FormGroupInputText\n        id=\"treasuresTier3\"\n        label=\"Tier 3\"\n        onChange={handleTreasureAmountTier3Change}\n        defaultValue={0}\n      />\n    </Accordion>\n  )\n}\n\nexport default React.memo(Treasures)\n","import React from 'react'\n\nimport DATA from 'aer-data'\nimport * as aerTypes from 'aer-types'\n\nimport * as types from 'types'\n\nimport Accordion from 'components/organisms/Accordion'\nimport FormGroupSelect from 'components/molecules/FormGroupSelect'\nimport FormGroupInputText from 'components/molecules/FormGroupInputText'\n\ntype Props = {\n  config: types.BattleRewardConfig\n  updateDraftRewardConfig: (config: types.BattleRewardConfig) => void\n}\n\nconst Mages = ({ config, updateDraftRewardConfig }: Props) => {\n  const dataMages: aerTypes.Mage[] = Object.values(\n    DATA.normalizedData.ENG.mages\n  )\n\n  const mageOptions = dataMages.map((mage: aerTypes.Mage) => {\n    return {\n      value: mage.id,\n      label: mage.name,\n    }\n  })\n\n  const handleMageChange = (selectOptions: types.SelectOptions) => {\n    const selectedMageIds: string[] = selectOptions\n      ? selectOptions.map((option: types.SelectOption) => option.value)\n      : []\n\n    updateDraftRewardConfig({\n      ...config,\n      ...Object.assign({\n        mage: {\n          ...config.mage,\n          ids: [...selectedMageIds],\n        },\n      }),\n    })\n  }\n\n  const handleMageRandomAmountChange = (event: React.ChangeEvent) => {\n    updateDraftRewardConfig({\n      ...config,\n      ...Object.assign({\n        mage: {\n          ...config.mage,\n          randomAmount: parseInt((event.target as HTMLInputElement).value),\n        },\n      }),\n    })\n  }\n\n  return (\n    <Accordion id=\"mages\" title=\"Mages\" open>\n      <FormGroupSelect\n        options={mageOptions}\n        id=\"selectMages\"\n        label=\"Select Mages\"\n        onChange={handleMageChange}\n        isMulti\n      />\n      <h3>Random Mages</h3>\n      <p>Enter the amount of random mages.</p>\n      <FormGroupInputText\n        id=\"randomMagesAmount\"\n        label=\"Amount of random mages\"\n        onChange={handleMageRandomAmountChange}\n        defaultValue={0}\n      />\n    </Accordion>\n  )\n}\n\nexport default React.memo(Mages)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport DATA from 'aer-data'\nimport * as aerTypes from 'aer-types'\n\nimport { RootState, selectors, actions } from 'Redux/Store'\n\nimport * as types from 'types'\n\nimport Accordion from 'components/organisms/Accordion'\nimport FormGroupSelect from 'components/molecules/FormGroupSelect'\nimport Button from 'components/atoms/Button'\nimport SupplyCardBlueprint from 'components/molecules/SupplyCardBlueprint'\nimport FormGroupCheckbox from 'components/molecules/FormGroupCheckbox'\n\nconst mapStateToProps = (state: RootState) => ({\n  blueprints: selectors.DraftExpedition.SequenceConfig.DraftRewardSupplyCard.getDraftRewardSupplyCardArray(\n    state\n  ),\n})\n\nconst mapDispatchToProps = {\n  addSupplyCard:\n    actions.DraftExpedition.SequenceConfig.DraftRewardSupplyCard\n      .draftAddBattleRewardSupplyCard,\n  editSupplyCard:\n    actions.DraftExpedition.SequenceConfig.DraftRewardSupplyCard\n      .draftEditRewardSupplyCard,\n  deleteSupplyCard:\n    actions.DraftExpedition.SequenceConfig.DraftRewardSupplyCard\n      .draftDeleteRewardSupplyCard,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> &\n  typeof mapDispatchToProps & {\n    config: types.BattleRewardConfig\n    updateDraftRewardConfig: (config: types.BattleRewardConfig) => void\n  }\n\nconst Supply = ({\n  config,\n  updateDraftRewardConfig,\n  blueprints,\n  addSupplyCard,\n  editSupplyCard,\n  deleteSupplyCard,\n}: Props) => {\n  const dataSupply: aerTypes.ICard[] = Object.values(\n    DATA.normalizedData.ENG.cards\n  )\n\n  const supplyOptions = dataSupply.map((supply: aerTypes.ICard) => {\n    return {\n      value: supply.id,\n      label: `${supply.name} (${supply.type})`,\n    }\n  })\n\n  const handleSupplyChange = (selectOptions: types.SelectOptions) => {\n    const selectedSupplyIds: string[] = selectOptions\n      ? selectOptions.map((option: types.SelectOption) => option.value)\n      : []\n\n    updateDraftRewardConfig({\n      ...config,\n      ...Object.assign({\n        supply: {\n          ...config.supply,\n          ids: [...selectedSupplyIds],\n        },\n      }),\n    })\n  }\n\n  const handleBigPocketChange = (event: React.ChangeEvent) => {\n    updateDraftRewardConfig({\n      ...config,\n      ...Object.assign({\n        supply: {\n          ...config.supply,\n          bigPocket: (event.currentTarget as HTMLInputElement).checked,\n        },\n      }),\n    })\n  }\n\n  const handleAddSupplyCard = () => {\n    addSupplyCard(config._id)\n  }\n\n  const handleEditSupplyCard = (blueprint: types.Blueprint) => {\n    editSupplyCard(blueprint)\n  }\n\n  const handleDeleteSupplyCard = (blueprint: types.Blueprint) => {\n    deleteSupplyCard(blueprint)\n  }\n\n  const renderSupplyBlueprints = (\n    blueprints: types.Blueprint[],\n    configId: string\n  ) => {\n    return blueprints\n      .filter((blueprint: types.Blueprint) => blueprint.configId === configId)\n      .map((blueprint: types.Blueprint) => {\n        return (\n          <SupplyCardBlueprint\n            key={blueprint._id}\n            blueprint={blueprint}\n            handleChange={handleEditSupplyCard}\n            handleDelete={handleDeleteSupplyCard}\n          />\n        )\n      })\n  }\n\n  return (\n    <Accordion id=\"supply\" title=\"Supply\" open>\n      <FormGroupCheckbox\n        id=\"rewardSupplyBigPocket\"\n        label=\"Big Pocket Mode\"\n        onChange={handleBigPocketChange}\n        defaultChecked={config?.supply?.bigPocket ?? false}\n      />\n      <FormGroupSelect\n        options={supplyOptions}\n        id=\"selectSupplyCards\"\n        label=\"Select Supply Cards\"\n        onChange={handleSupplyChange}\n        isMulti\n      />\n      <h3>Random supply cards</h3>\n      <Button onClick={handleAddSupplyCard}>Add random supply card</Button>\n      {blueprints ? (\n        renderSupplyBlueprints(blueprints, config._id)\n      ) : (\n        <p>No supply cards added</p>\n      )}\n    </Accordion>\n  )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(Supply))\n","import React from 'react'\n\nimport * as types from 'types'\n\nimport Fieldset from 'components/molecules/Fieldset'\nimport Button from 'components/atoms/Button'\nimport Treasures from './Treasures'\nimport Mages from './Mages'\nimport Supply from './Supply'\n\ntype Props = {\n  config: types.BattleRewardConfig\n  handleChange: (config: types.BattleRewardConfig) => void\n  handleDelete: (config: types.BattleRewardConfig) => void\n}\n\nconst RewardConfig = ({ config, handleChange, handleDelete }: Props) => {\n  const handleDeleteRewardConfig = () => {\n    handleDelete(config)\n  }\n\n  const handleRewardTypeChange = (event: React.ChangeEvent) => {\n    const rewardType = (event.target as HTMLInputElement)\n      .value as types.RewardType\n\n    handleChange({\n      ...config,\n      rewardType: rewardType,\n      treasure: rewardType === 'custom' ? config.treasure : undefined,\n      mage: rewardType === 'custom' ? config.mage : undefined,\n      supply: rewardType === 'custom' ? config.supply : undefined,\n    })\n  }\n\n  return (\n    <>\n      <Fieldset legend=\"Reward type\" legendVisible>\n        <div className=\"radio-wrapper\">\n          <input\n            type=\"radio\"\n            name={`rewardType-${config._id}`}\n            id={`regular-${config._id}`}\n            defaultChecked\n            value=\"regular\"\n            onChange={handleRewardTypeChange}\n          />\n          <label htmlFor={`regular-${config._id}`}>regular</label>\n        </div>\n        <div className=\"radio-wrapper\">\n          <input\n            type=\"radio\"\n            name={`rewardType-${config._id}`}\n            id={`custom-${config._id}`}\n            value=\"custom\"\n            onChange={handleRewardTypeChange}\n          />\n          <label htmlFor={`custom-${config._id}`}>custom</label>\n        </div>\n      </Fieldset>\n      {config.rewardType === 'custom' && (\n        <>\n          <Treasures config={config} updateDraftRewardConfig={handleChange} />\n          <Mages config={config} updateDraftRewardConfig={handleChange} />\n          <Supply config={config} updateDraftRewardConfig={handleChange} />\n        </>\n      )}\n\n      <Button onClick={handleDeleteRewardConfig}>Delete Config</Button>\n    </>\n  )\n}\n\nexport default React.memo(RewardConfig)\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\n\nimport DATA from 'aer-data'\nimport * as aerTypes from 'aer-types'\n\nimport * as types from 'types'\n\nimport { RootState, selectors, actions } from 'Redux/Store'\nimport Fieldset from 'components/molecules/Fieldset'\nimport FormGroupTextarea from 'components/molecules/FormGroupTextarea'\nimport FormGroupSelect from 'components/molecules/FormGroupSelect'\nimport FormGroupCheckbox from 'components/molecules/FormGroupCheckbox'\nimport Button from 'components/atoms/Button'\nimport RewardConfig from './RewardConfig'\n\nconst mapStateToProps = (state: RootState) => ({\n  rewardConfigs: selectors.DraftExpedition.SequenceConfig.DraftRewardConfig.getDraftRewardConfigArray(\n    state\n  ),\n})\n\nconst mapDispatchToProps = {\n  addRewardConfig:\n    actions.DraftExpedition.SequenceConfig.DraftRewardConfig\n      .draftAddRewardConfig,\n  editRewardConfig:\n    actions.DraftExpedition.SequenceConfig.DraftRewardConfig\n      .draftEditRewardConfig,\n  deleteRewardConfig:\n    actions.DraftExpedition.SequenceConfig.DraftRewardConfig\n      .draftDeleteRewardConfig,\n  updateDraftBranch:\n    actions.DraftExpedition.SequenceConfig.DraftBranch.updateDraftBranch,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> &\n  typeof mapDispatchToProps & {\n    draftBranch: types.BattleBranch\n  }\n\ntype TreasureLevelOption = {\n  value: string\n  label: string\n}\n\ntype TreasureLevelOptions = TreasureLevelOption[]\n\nconst BattleBranch = ({\n  draftBranch,\n  rewardConfigs,\n  updateDraftBranch,\n  addRewardConfig,\n  editRewardConfig,\n  deleteRewardConfig,\n}: Props) => {\n  useEffect(() => {\n    updateDraftBranch({\n      ...draftBranch,\n      tier: 1,\n      newUBNCards: {\n        type: 'regular',\n      },\n      treasure: {\n        level: 1,\n        hasTreasure: false,\n      },\n    })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const dataNemeses: aerTypes.Nemesis[] = Object.values(\n    DATA.normalizedData.ENG.nemeses\n  )\n\n  const nemesisOptions = dataNemeses.map((nemesis: aerTypes.Nemesis) => {\n    return {\n      value: nemesis.id,\n      label: nemesis.name,\n    }\n  })\n\n  const dataUpgradedBasicNemesisCardsCards: aerTypes.UpgradedBasicNemesisCard[] = Object.values(\n    DATA.normalizedData.ENG.upgradedBasicNemesisCards\n  )\n\n  const upgradedBasicNemesisCardsOptions = dataUpgradedBasicNemesisCardsCards.map(\n    (upgradedBasicNemesisCard: aerTypes.UpgradedBasicNemesisCard) => {\n      return {\n        value: upgradedBasicNemesisCard.id,\n        label: upgradedBasicNemesisCard.name,\n      }\n    }\n  )\n\n  const treasureLevelOptions: TreasureLevelOptions = [\n    { value: '1', label: 'Level 1' },\n    { value: '2', label: 'Level 2' },\n    { value: '3', label: 'Level 3' },\n  ]\n\n  const treasureLevelDefaultValue =\n    treasureLevelOptions.find(\n      (option) => option.value === draftBranch?.treasure?.level.toString()\n    ) ?? treasureLevelOptions.find((option) => option.value === '1')\n\n  const winConfigs = rewardConfigs.filter(\n    (config: types.BattleRewardConfig) => config.type === 'win'\n  )\n\n  const lossConfigs = rewardConfigs.filter(\n    (config: types.BattleRewardConfig) => config.type === 'loss'\n  )\n\n  const handleBattleTierChange = (event: React.ChangeEvent) => {\n    updateDraftBranch({\n      ...draftBranch,\n      tier: parseInt(\n        (event.target as HTMLInputElement).value\n      ) as aerTypes.NemesisTier,\n    })\n  }\n\n  const handleNemesisIdChange = (selectOption: types.SelectOption) => {\n    updateDraftBranch({\n      ...draftBranch,\n      nemesisId: selectOption.value,\n    })\n  }\n\n  const handleOnLossChange = (event: React.ChangeEvent) => {\n    updateDraftBranch({\n      ...draftBranch,\n      onLoss: (event.currentTarget as HTMLInputElement).checked\n        ? 'skip'\n        : false,\n    })\n  }\n\n  const handleNewUBNCardsTypeChange = (event: React.ChangeEvent) => {\n    updateDraftBranch({\n      ...draftBranch,\n      newUBNCards: {\n        type: (event.target as HTMLInputElement)\n          .value as types.NewUBNCardsTypes,\n      },\n    })\n  }\n\n  const handleAddRandomChange = (event: React.ChangeEvent) => {\n    updateDraftBranch({\n      ...draftBranch,\n      newUBNCards: {\n        ...draftBranch.newUBNCards,\n        addRandom: (event.currentTarget as HTMLInputElement).checked,\n      } as types.NewUBNCardsRegularTyp,\n    })\n  }\n\n  const handleUBNCardIdChange = (selectOptions: types.SelectOptions) => {\n    const selectedUBNCardIds: string[] = selectOptions\n      ? selectOptions.map((option: types.SelectOption) => option.value)\n      : []\n\n    updateDraftBranch({\n      ...draftBranch,\n      newUBNCards: {\n        ...draftBranch.newUBNCards,\n        ids: [...selectedUBNCardIds],\n      } as types.NewUBNCardsCustomTyp,\n    })\n  }\n\n  const handleHasTreasureChange = (event: React.ChangeEvent) => {\n    updateDraftBranch({\n      ...draftBranch,\n      treasure: {\n        ...draftBranch.treasure,\n        hasTreasure: (event.currentTarget as HTMLInputElement).checked,\n        level: (event.currentTarget as HTMLInputElement).checked\n          ? draftBranch.treasure.level\n          : 1,\n      },\n    })\n  }\n\n  const handleTreasureLevelChange = (selectOption: TreasureLevelOption) => {\n    updateDraftBranch({\n      ...draftBranch,\n      treasure: {\n        ...draftBranch.treasure,\n        level: parseInt(selectOption.value) as aerTypes.TreasureLevel,\n      },\n    })\n  }\n\n  const handleSpecialRulesChange = (event: any) => {\n    updateDraftBranch({\n      ...draftBranch,\n      specialRules: event.target.value,\n    })\n  }\n\n  const handleAddRewardConfig = (type: types.BattleRewardConfigType) => {\n    addRewardConfig(type)\n  }\n\n  const handleEditRewardConfig = (config: types.BattleRewardConfig) => {\n    editRewardConfig(config)\n  }\n\n  const handleDeleteRewardConfig = (config: types.BattleRewardConfig) => {\n    deleteRewardConfig(config)\n  }\n\n  const renderRewardConfigs = (configs: types.BattleRewardConfig[]) => {\n    return configs.map((config: types.BattleRewardConfig) => {\n      return (\n        <RewardConfig\n          key={config._id}\n          config={config}\n          handleChange={handleEditRewardConfig}\n          handleDelete={handleDeleteRewardConfig}\n        />\n      )\n    })\n  }\n\n  return (\n    <>\n      <Fieldset legend=\"Battle Tier\" legendVisible>\n        <div className=\"radio-wrapper\">\n          <input\n            type=\"radio\"\n            name=\"battleTier\"\n            id=\"battleTier1\"\n            defaultChecked\n            value=\"1\"\n            onChange={handleBattleTierChange}\n          />\n          <label htmlFor=\"battleTier1\">1</label>\n        </div>\n        <div className=\"radio-wrapper\">\n          <input\n            type=\"radio\"\n            name=\"battleTier\"\n            id=\"battleTier2\"\n            value=\"2\"\n            onChange={handleBattleTierChange}\n          />\n          <label htmlFor=\"battleTier2\">2</label>\n        </div>\n        <div className=\"radio-wrapper\">\n          <input\n            type=\"radio\"\n            name=\"battleTier\"\n            id=\"battleTier3\"\n            value=\"3\"\n            onChange={handleBattleTierChange}\n          />\n          <label htmlFor=\"battleTier3\">3</label>\n        </div>\n        <div className=\"radio-wrapper\">\n          <input\n            type=\"radio\"\n            name=\"battleTier\"\n            id=\"battleTier4\"\n            value=\"4\"\n            onChange={handleBattleTierChange}\n          />\n          <label htmlFor=\"battleTier4\">4</label>\n        </div>\n      </Fieldset>\n      <FormGroupSelect\n        options={nemesisOptions}\n        id=\"selectNemesis\"\n        label=\"Select Nemesis\"\n        onChange={handleNemesisIdChange}\n      />\n      <FormGroupCheckbox\n        id=\"onLoss\"\n        label=\"Skip on loss\"\n        onChange={handleOnLossChange}\n        defaultChecked={draftBranch?.onLoss === 'skip' ?? false}\n      />\n      <FormGroupTextarea\n        id=\"specialRules\"\n        label=\"Special rules\"\n        onChange={handleSpecialRulesChange}\n        defaultValue={draftBranch.specialRules}\n      />\n      <h2>New UBN Cards</h2>\n      <Fieldset legend=\"New UBN Cards\" legendVisible>\n        <div className=\"radio-wrapper\">\n          <input\n            type=\"radio\"\n            name=\"newUBNCardsType\"\n            id=\"newUBNCardsRegular\"\n            defaultChecked\n            value=\"regular\"\n            onChange={handleNewUBNCardsTypeChange}\n          />\n          <label htmlFor=\"newUBNCardsRegular\">regular</label>\n        </div>\n        <div className=\"radio-wrapper\">\n          <input\n            type=\"radio\"\n            name=\"newUBNCardsType\"\n            id=\"newUBNCardsCustom\"\n            value=\"custom\"\n            onChange={handleNewUBNCardsTypeChange}\n          />\n          <label htmlFor=\"newUBNCardsCustom\">custom</label>\n        </div>\n      </Fieldset>\n      {draftBranch?.newUBNCards?.type === 'custom' ? (\n        <FormGroupSelect\n          options={upgradedBasicNemesisCardsOptions}\n          id=\"selectUpgradedBasicNemesisCards\"\n          label=\"Select Upgraded Basic Nemesis Cards\"\n          onChange={handleUBNCardIdChange}\n          isMulti\n        />\n      ) : (\n        <FormGroupCheckbox\n          id=\"addRandom\"\n          label=\"Add random\"\n          onChange={handleAddRandomChange}\n          defaultChecked={draftBranch.newUBNCards?.addRandom ?? true}\n        />\n      )}\n      <h2>Treasure</h2>\n      <FormGroupCheckbox\n        id=\"hasTreasure\"\n        label=\"Has treasure\"\n        onChange={handleHasTreasureChange}\n        defaultChecked={draftBranch?.treasure?.hasTreasure ?? false}\n      />\n\n      {draftBranch?.treasure?.hasTreasure && (\n        <FormGroupSelect\n          options={treasureLevelOptions}\n          id=\"selectTreasureLevel\"\n          label=\"TreasureLevel\"\n          onChange={handleTreasureLevelChange}\n          defaultValue={treasureLevelDefaultValue}\n        />\n      )}\n\n      <h2>Win rewards</h2>\n      {winConfigs.length !== 0 ? (\n        renderRewardConfigs(winConfigs)\n      ) : (\n        <Button onClick={() => handleAddRewardConfig('win')}>\n          Add reward config\n        </Button>\n      )}\n\n      <h2>Loss rewards</h2>\n      <Button onClick={() => handleAddRewardConfig('loss')}>\n        Add reward config\n      </Button>\n\n      {lossConfigs ? (\n        renderRewardConfigs(lossConfigs)\n      ) : (\n        <p>No loss configs added</p>\n      )}\n    </>\n  )\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(React.memo(BattleBranch))\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport * as types from 'types'\n\nimport { RootState, selectors } from 'Redux/Store'\n\nimport Fieldset from 'components/molecules/Fieldset'\nimport ModalBodyWrapper from 'components/atoms/ModalBodyWrapper'\nimport BaseBranch from './BaseBranch'\nimport NarrativeBranch from './NarrativeBranch'\nimport RewardBranch from './RewardBranch'\nimport BattleBranch from './BattleBranch'\n\nconst mapStateToProps = (state: RootState) => ({\n  draftBranch: selectors.DraftExpedition.SequenceConfig.DraftBranch.getDraftBranchState(\n    state\n  ),\n})\n\ntype Props = ReturnType<typeof mapStateToProps> & {}\n\nconst Body = ({ draftBranch }: Props) => {\n  const renderBranch = (branch: types.Branch) => {\n    switch (branch.type) {\n      case 'narrative': {\n        return (\n          <NarrativeBranch draftBranch={draftBranch as types.NarrativeBranch} />\n        )\n      }\n\n      case 'reward': {\n        return <RewardBranch draftBranch={draftBranch as types.RewardBranch} />\n      }\n\n      case 'battle': {\n        return <BattleBranch draftBranch={draftBranch as types.BattleBranch} />\n      }\n\n      default: {\n        return <></>\n      }\n    }\n  }\n\n  return (\n    <ModalBodyWrapper>\n      <Fieldset legend=\"Branches\">\n        <BaseBranch draftBranch={draftBranch as types.BranchBase} />\n\n        {renderBranch(draftBranch as types.Branch)}\n      </Fieldset>\n    </ModalBodyWrapper>\n  )\n}\n\nexport default connect(mapStateToProps)(React.memo(Body))\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { RootState, selectors, actions } from 'Redux/Store'\n\nimport * as types from 'types'\n\nimport Button from 'components/atoms/Button'\n\nconst mapStateToProps = (state: RootState) => ({\n  draftBranch: selectors.DraftExpedition.SequenceConfig.DraftBranch.getDraftBranchState(\n    state\n  ),\n  draftRewardConfigs: selectors.DraftExpedition.SequenceConfig.DraftRewardConfig.getDraftRewardConfigArray(\n    state\n  ),\n  draftRewardSupplyCards: selectors.DraftExpedition.SequenceConfig.DraftRewardSupplyCard.getDraftRewardSupplyCardArray(\n    state\n  ),\n})\n\nconst mapDispatchToProps = {\n  addBranch: actions.DraftExpedition.SequenceConfig.Branches.addBranch,\n  clearDraftBranch:\n    actions.DraftExpedition.SequenceConfig.DraftBranch.clearDraftBranch,\n  clearDraftRewardConfig:\n    actions.DraftExpedition.SequenceConfig.DraftRewardConfig\n      .clearDraftRewardConfig,\n  clearDraftRewardSupplyCards:\n    actions.DraftExpedition.SequenceConfig.DraftRewardSupplyCard\n      .clearDraftRewardSupplyCard,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> &\n  typeof mapDispatchToProps & {\n    modal: any\n  }\n\nconst Footer = ({\n  modal,\n  draftBranch,\n  draftRewardConfigs,\n  draftRewardSupplyCards,\n  addBranch,\n  clearDraftBranch,\n  clearDraftRewardConfig,\n  clearDraftRewardSupplyCards,\n}: Props) => {\n  const handleAddBranch = () => {\n    const winRewards = draftRewardConfigs.find(\n      (config: types.BattleRewardConfig) => config.type === 'win'\n    )\n\n    const lossRewards = draftRewardConfigs.filter(\n      (config: types.BattleRewardConfig) => config.type === 'loss'\n    )\n\n    const newBranch = {\n      ...draftBranch,\n      supply: {\n        ...(draftBranch as types.RewardBranch).supply,\n        blueprints: [\n          ...draftRewardSupplyCards.filter(\n            (card: types.Blueprint) => card.configId === undefined\n          ),\n        ],\n      },\n      winRewards: {\n        ...winRewards,\n        supply: {\n          ...winRewards?.supply,\n          blueprints: [\n            ...draftRewardSupplyCards.filter((card: types.Blueprint) => {\n              return card.configId === winRewards?._id\n            }),\n          ],\n        },\n      },\n      lossRewards: [\n        ...lossRewards.map((reward: types.BattleRewardConfig) => {\n          return {\n            ...reward,\n            supply: {\n              ...reward?.supply,\n              blueprints: [\n                ...draftRewardSupplyCards.filter((card: types.Blueprint) => {\n                  return card.configId === reward?._id\n                }),\n              ],\n            },\n          }\n        }),\n      ],\n    }\n\n    addBranch({\n      ...(newBranch as types.Branch),\n    })\n    clearDraftBranch()\n    clearDraftRewardConfig()\n    clearDraftRewardSupplyCards()\n    modal.hide()\n  }\n\n  const handleCancel = () => {\n    clearDraftBranch()\n    clearDraftRewardConfig()\n    clearDraftRewardSupplyCards()\n    modal.hide()\n  }\n\n  return (\n    <>\n      <Button onClick={handleCancel}>Cancel</Button>\n      <Button onClick={handleAddBranch}>Add branch</Button>\n    </>\n  )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(Footer))\n","import React from 'react'\n\nimport * as types from 'types'\n\nimport Body from './Body'\nimport Footer from './Footer'\n\ntype Props = {\n  modal: types.Modal\n}\n\nconst AddBranchModal = ({\n  modal,\n}: Props) => {\n\n  return (\n    <modal.RenderModal\n      titleLabel=\"Add branch\"\n      footer={<Footer modal={modal} />}>\n      <Body />\n    </modal.RenderModal>\n  )\n}\n\nexport default React.memo(AddBranchModal)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { RootState, selectors, actions } from 'Redux/Store'\n\nimport { useModal } from 'hooks/useModal'\n\nimport Accordion from 'components/organisms/Accordion'\nimport Button from 'components/atoms/Button'\nimport AddBranchModal from './AddBranchModal'\n\nconst mapStateToProps = (state: RootState) => ({\n  branches: selectors.DraftExpedition.SequenceConfig.Branches.getBranches(\n    state\n  ),\n})\n\nconst mapDispatchToProps = {\n  draftAddBranch:\n    actions.DraftExpedition.SequenceConfig.DraftBranch.draftAddBranch,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps & {}\n\nconst Branches = ({ branches, draftAddBranch }: Props) => {\n  const addBranchModal = useModal()\n\n  const handleAddBranch = () => {\n    addBranchModal.show()\n    draftAddBranch()\n  }\n\n  return (\n    <Accordion id=\"branches\" title=\"Branches\" open>\n      <Button\n        type=\"button\"\n        style={{ display: 'block' }}\n        onClick={handleAddBranch}\n      >\n        Add branch\n      </Button>\n      <AddBranchModal modal={addBranchModal} />\n    </Accordion>\n  )\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(React.memo(Branches))\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport * as types from 'types'\n\nimport { RootState, actions, selectors } from 'Redux/Store'\n\nimport Accordion from 'components/organisms/Accordion'\nimport FormGroupSelect from 'components/molecules/FormGroupSelect'\n\nconst mapStateToProps = (state: RootState) => ({\n  branches: selectors.DraftExpedition.SequenceConfig.Branches.getBranches(\n    state\n  ),\n  firstBranchId: selectors.DraftExpedition.SequenceConfig.FirstBranchId.getFirstBranchId(\n    state\n  ),\n})\n\nconst mapDispatchToProps = {\n  updateBranch: actions.DraftExpedition.SequenceConfig.Branches.updateBranch,\n  setFirstBranchId:\n    actions.DraftExpedition.SequenceConfig.FirstBranchId.setFirstBranchId,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps & {}\n\nconst ConnectBranches = ({\n  branches,\n  firstBranchId,\n  updateBranch,\n  setFirstBranchId,\n}: Props) => {\n  const availableBranchesOptions = branches.map((branch: types.Branch) => {\n    return {\n      value: branch.id,\n      label: `${branch.id} (${branch.type})`,\n    }\n  })\n\n  const handleFirstBranchIdChange = (selectOption: types.SelectOption) => {\n    setFirstBranchId(selectOption.value)\n  }\n\n  const handleNarrativNextBranchIdChange = (\n    selectOption: types.SelectOption & {\n      currentBranchId: string\n      decisionId: string\n    }\n  ) => {\n    const branchToUpdate = branches.find(\n      (branch) => branch.id === selectOption.currentBranchId\n    ) as types.NarrativeBranch\n\n    const newDecisions =\n      branchToUpdate?.decisions &&\n      branchToUpdate?.decisions.map((decision: types.Decision) => {\n        if (decision._id === selectOption.decisionId) {\n          return {\n            ...decision,\n            nextBranchId: selectOption.value,\n          }\n        } else {\n          return decision\n        }\n      })\n\n    updateBranch({\n      ...branchToUpdate,\n      decisions: newDecisions,\n      nextBranchId:\n        newDecisions &&\n        newDecisions.map((decision: types.Decision) => decision.nextBranchId),\n    } as types.NarrativeBranch)\n  }\n\n  const handleNextBranchIdChange = (\n    selectOption: types.SelectOption & { currentBranchId: string }\n  ) => {\n    const branchToUpdate = branches.find(\n      (branch) => branch.id === selectOption.currentBranchId\n    )\n\n    updateBranch({\n      ...branchToUpdate,\n      nextBranchId: selectOption.value,\n    } as types.BattleBranch | types.RewardBranch)\n  }\n\n  return (\n    <Accordion id=\"connectBranches\" title=\"Connect Branches\" open>\n      {branches.length > 0 ? (\n        <>\n          <p>\n            Choose the branch which should be the entry point of the expedition.\n          </p>\n          <FormGroupSelect\n            options={availableBranchesOptions}\n            id=\"firstBranchId\"\n            label=\"First branch id\"\n            onChange={handleFirstBranchIdChange}\n          />\n          <ul>\n            {branches.map((branch: types.Branch) => {\n              const availableOptions = branches\n                .filter(\n                  (availableBranch: types.Branch) =>\n                    availableBranch.id !== branch.id &&\n                    availableBranch.id !== firstBranchId\n                )\n                .map((availableBranch: types.Branch) => {\n                  return {\n                    value: availableBranch.id,\n                    label: `${availableBranch.id} (${availableBranch.type})`,\n                    currentBranchId: branch.id,\n                  }\n                })\n\n              switch (branch.type) {\n                case 'narrative': {\n                  const narrativeBranch = branch as types.NarrativeBranch\n\n                  return (\n                    <li key={branch.id}>\n                      <p>Id: {branch.id}</p>\n                      <p>Type: {branch.type}</p>\n                      {narrativeBranch.decisions ? (\n                        <>\n                          <p>Decisions:</p>\n                          <ul>\n                            {narrativeBranch.decisions.map(\n                              (decision: types.Decision) => {\n                                const decisionOptions = availableOptions.map(\n                                  (availableOption: types.SelectOption) => {\n                                    return {\n                                      ...availableOption,\n                                      decisionId: decision._id,\n                                    }\n                                  }\n                                )\n\n                                return (\n                                  <li key={decision._id}>\n                                    {decision.text}\n                                    <FormGroupSelect\n                                      options={decisionOptions}\n                                      id={`nextBranchId-${branch._id}-${decision._id}`}\n                                      label=\"Next branch id\"\n                                      onChange={\n                                        handleNarrativNextBranchIdChange\n                                      }\n                                    />\n                                  </li>\n                                )\n                              }\n                            )}\n                          </ul>\n                        </>\n                      ) : (\n                        <p>No Desicions</p>\n                      )}\n                    </li>\n                  )\n                }\n\n                default: {\n                  return (\n                    <li key={branch.id}>\n                      <p>Id: {branch.id}</p>\n                      <p>Type: {branch.type}</p>\n                      <FormGroupSelect\n                        options={availableOptions}\n                        id={`nextBranchId-${branch._id}`}\n                        label=\"Next branch id\"\n                        onChange={handleNextBranchIdChange}\n                      />\n                    </li>\n                  )\n                }\n              }\n            })}\n          </ul>\n        </>\n      ) : (\n        <p>No branches added</p>\n      )}\n    </Accordion>\n  )\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(React.memo(ConnectBranches))\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport DATA from 'aer-data'\nimport * as aerTypes from 'aer-types'\n\nimport * as types from 'types'\n\nimport { RootState, actions, selectors } from 'Redux/Store'\n\nimport Accordion from 'components/organisms/Accordion'\nimport FormGroupSelect from 'components/molecules/FormGroupSelect'\n\nconst mapStateToProps = (state: RootState) => ({\n  barrackMages: selectors.DraftExpedition.InitialBarracksConfig.getBarrackMages(\n    state\n  ),\n  barrackSupplyCards: selectors.DraftExpedition.InitialBarracksConfig.getBarrackSupplyCards(\n    state\n  ),\n  barrackTreasures: selectors.DraftExpedition.InitialBarracksConfig.getBarrackTreasures(\n    state\n  ),\n})\n\nconst mapDispatchToProps = {\n  setBarrackMages: actions.DraftExpedition.InitialBarracksConfig.setMages,\n  setBarrackSupplyCards:\n    actions.DraftExpedition.InitialBarracksConfig.setSupplyCards,\n  setBarrackTreasures:\n    actions.DraftExpedition.InitialBarracksConfig.setTreasures,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps & {}\n\nconst InitialBarracks = ({\n  barrackMages,\n  barrackSupplyCards,\n  barrackTreasures,\n  setBarrackMages,\n  setBarrackSupplyCards,\n  setBarrackTreasures,\n}: Props) => {\n  const dataMages: aerTypes.Mage[] = Object.values(\n    DATA.normalizedData.ENG.mages\n  )\n\n  const mageOptions = dataMages.map((mage: aerTypes.Mage) => {\n    return {\n      value: mage.id,\n      label: mage.name,\n    }\n  })\n\n  const magesDefaultValue = mageOptions.filter(\n    (option) => barrackMages.indexOf(option.value) !== -1\n  )\n\n  const handleMageChange = (selectOptions: types.SelectOptions) => {\n    const selectedMageIds: string[] = selectOptions\n      ? selectOptions.map((option: types.SelectOption) => option.value)\n      : []\n\n    setBarrackMages(selectedMageIds)\n  }\n\n  const dataSupply: aerTypes.ICard[] = Object.values(\n    DATA.normalizedData.ENG.cards\n  )\n\n  const supplyOptions = dataSupply.map((supply: aerTypes.ICard) => {\n    return {\n      value: supply.id,\n      label: `${supply.name} (${supply.type})`,\n    }\n  })\n\n  const supplyCardsDefaultValue = supplyOptions.filter(\n    (option) => barrackSupplyCards.indexOf(option.value) !== -1\n  )\n\n  const handleSupplyChange = (selectOptions: types.SelectOptions) => {\n    const selectedSupplyIds: string[] = selectOptions\n      ? selectOptions.map((option: types.SelectOption) => option.value)\n      : []\n\n    setBarrackSupplyCards(selectedSupplyIds)\n  }\n\n  const dataTreasures: aerTypes.Treasure[] = Object.values(\n    DATA.normalizedData.ENG.treasures\n  )\n\n  const treasureOptions = dataTreasures.map((treasure: aerTypes.Treasure) => {\n    return {\n      value: treasure.id,\n      label: `${treasure.name} (Level: ${treasure.level})`,\n    }\n  })\n\n  const treasuresDefaultValue = treasureOptions.filter(\n    (option) => barrackTreasures.indexOf(option.value) !== -1\n  )\n\n  const handleTreasureChange = (selectOptions: types.SelectOptions) => {\n    const selectedTreasureIds: string[] = selectOptions\n      ? selectOptions.map((option: types.SelectOption) => option.value)\n      : []\n\n    setBarrackTreasures(selectedTreasureIds)\n  }\n\n  return (\n    <Accordion id=\"initialBarracks\" title=\"Initial Barracks\" open>\n      <FormGroupSelect\n        options={mageOptions}\n        id=\"selectBarrackMages\"\n        label=\"Select mages\"\n        onChange={handleMageChange}\n        defaultValue={magesDefaultValue}\n        isMulti\n      />\n      <FormGroupSelect\n        options={supplyOptions}\n        id=\"selectBarrackSupplyCards\"\n        label=\"Select supply cards\"\n        onChange={handleSupplyChange}\n        defaultValue={supplyCardsDefaultValue}\n        isMulti\n      />\n      <FormGroupSelect\n        options={treasureOptions}\n        id=\"selectBarrackTreasures\"\n        label=\"Select treasures\"\n        onChange={handleTreasureChange}\n        defaultValue={treasuresDefaultValue}\n        isMulti\n      />\n    </Accordion>\n  )\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(React.memo(InitialBarracks))\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport DATA from 'aer-data'\nimport * as aerTypes from 'aer-types'\n\nimport * as types from 'types'\n\nimport { RootState, actions, selectors } from 'Redux/Store'\n\nimport Accordion from 'components/organisms/Accordion'\nimport FormGroupSelect from 'components/molecules/FormGroupSelect'\n\nconst mapStateToProps = (state: RootState) => ({\n  upgradedBasicNemesisCards: selectors.DraftExpedition.InitialUBNCardsConfig.getInitialUBNCardsConfig(\n    state\n  ),\n})\n\nconst mapDispatchToProps = {\n  setUBNCards: actions.DraftExpedition.InitialUBNCardsConfig.setUBNCards,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps & {}\n\nconst initialUBNCards = ({ upgradedBasicNemesisCards, setUBNCards }: Props) => {\n  const dataUBNCards: aerTypes.UpgradedBasicNemesisCard[] = Object.values(\n    DATA.normalizedData.ENG.upgradedBasicNemesisCards\n  )\n\n  const upgradedBasicNemesisCardsOptions = dataUBNCards.map(\n    (upgradedBasicNemesisCard: aerTypes.UpgradedBasicNemesisCard) => {\n      return {\n        value: upgradedBasicNemesisCard.id,\n        label: `${upgradedBasicNemesisCard.name} (${upgradedBasicNemesisCard.type})`,\n      }\n    }\n  )\n\n  const upgradedBasicNemesisCardsDefaultValue = upgradedBasicNemesisCardsOptions.filter(\n    (option) => upgradedBasicNemesisCards.indexOf(option.value) !== -1\n  )\n\n  const handleUBNCardsChange = (selectOptions: types.SelectOptions) => {\n    const selectedUBNCardsIds: string[] = selectOptions\n      ? selectOptions.map((option: types.SelectOption) => option.value)\n      : []\n\n    setUBNCards(selectedUBNCardsIds)\n  }\n\n  return (\n    <Accordion\n      id=\"initialUBNCards\"\n      title=\"Initial Upgraded Basic Nemesis Cards\"\n      open\n    >\n      <FormGroupSelect\n        options={upgradedBasicNemesisCardsOptions}\n        id=\"selectUBNCards\"\n        label=\"Select upgraded basic nemesis cards\"\n        onChange={handleUBNCardsChange}\n        defaultValue={upgradedBasicNemesisCardsDefaultValue}\n        isMulti\n      />\n    </Accordion>\n  )\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(React.memo(initialUBNCards))\n","import React from 'react'\n\nimport * as aerTypes from 'aer-types'\nimport * as types from 'types'\n\nimport FormGroupSelect from 'components/molecules/FormGroupSelect'\nimport FormGroupInputNumber from 'components/molecules/FormGroupInputNumber'\nimport Button from 'components/atoms/Button'\n\ntype Props = {\n  tile: aerTypes.MarketTile\n  handleChange: (tile: aerTypes.MarketTile) => void\n  handleDelete: (tile: aerTypes.MarketTile) => void\n}\n\nconst SupplyTile = ({ tile, handleChange, handleDelete }: Props) => {\n  const cardTypeOptions: types.CardTypeOptions = [\n    { value: 'Gem', label: 'Gem' },\n    { value: 'Relic', label: 'Relic' },\n    { value: 'Spell', label: 'Spell' },\n  ]\n\n  const cardTypeDefaultValue = cardTypeOptions.find(\n    (option) => option.value === tile.type\n  )\n\n  const cardOperationOptions: types.CardOperationOptions = [\n    { value: '<', label: '>' },\n    { value: '>', label: '<' },\n    { value: '=', label: '=' },\n    { value: '<=', label: '<=' },\n    { value: '>=', label: '>=' },\n    { value: 'ANY', label: 'ANY' },\n    { value: 'OR', label: 'OR' },\n  ]\n\n  const cardOperationDefaultValue = cardOperationOptions.find(\n    (option) => option.value === tile.operation\n  )\n\n  const cardCostsOptions: types.CardCostsOptions = [\n    { value: '0', label: 'Cost: 0' },\n    { value: '1', label: 'Cost: 1' },\n    { value: '2', label: 'Cost: 2' },\n    { value: '3', label: 'Cost: 3' },\n    { value: '4', label: 'Cost: 4' },\n    { value: '5', label: 'Cost: 5' },\n    { value: '6', label: 'Cost: 6' },\n    { value: '7', label: 'Cost: 7' },\n    { value: '8', label: 'Cost: 8' },\n    { value: '9', label: 'Cost: 9' },\n  ]\n\n  const handleCardTypeChange = (selectOption: types.CardTypeOption) => {\n    handleChange({\n      ...tile,\n      type: selectOption.value,\n    })\n  }\n\n  const handleCardOperationChange = (\n    selectOption: types.CardOperationOption\n  ) => {\n    handleChange({\n      ...tile,\n      operation: selectOption.value,\n    })\n  }\n\n  const handleCardThresholdChange = (event: React.ChangeEvent) => {\n    handleChange({\n      ...tile,\n      threshold: parseInt((event.target as HTMLInputElement).value),\n    })\n  }\n\n  const handleCardCostsChange = (selectOptions: types.CardCostsOptions) => {\n    const costValues: number[] = selectOptions.map(\n      (option: types.CardCostsOption) => parseInt(option.value)\n    )\n\n    handleChange({\n      ...tile,\n      values: [...costValues],\n    })\n  }\n\n  const handleDeleteTile = () => {\n    handleDelete(tile)\n  }\n\n  return (\n    <div>\n      <FormGroupSelect\n        options={cardTypeOptions}\n        id={`selectCardType${tile.id}`}\n        label=\"Type\"\n        onChange={handleCardTypeChange}\n        defaultValue={cardTypeDefaultValue}\n      />\n      <FormGroupSelect\n        options={cardOperationOptions}\n        id={`selectCardOperation${tile.id}`}\n        label=\"Operation\"\n        onChange={handleCardOperationChange}\n        defaultValue={cardOperationDefaultValue}\n      />\n      {tile.operation !== 'OR' && tile.operation !== 'ANY' && (\n        <FormGroupInputNumber\n          id={`threshold${tile.id}`}\n          label=\"Threshold\"\n          onChange={handleCardThresholdChange}\n        />\n      )}\n      {tile.operation === 'OR' && (\n        <FormGroupSelect\n          options={cardCostsOptions}\n          id={`selectCosts${tile.id}`}\n          label=\"Card costs (values)\"\n          onChange={handleCardCostsChange}\n          isMulti\n        />\n      )}\n      <Button type=\"button\" onClick={handleDeleteTile}>\n        Delete\n      </Button>\n    </div>\n  )\n}\n\nexport default SupplyTile\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport shortid from 'shortid'\n\nimport DATA from 'aer-data'\nimport * as aerTypes from 'aer-types'\n\nimport * as types from 'types'\n\nimport { RootState, actions, selectors } from 'Redux/Store'\nimport { initialState } from 'Redux/Store/DraftExpedition/SettingsSnapshotConfig'\n\nimport Accordion from 'components/organisms/Accordion'\nimport FormGroupSelect from 'components/molecules/FormGroupSelect'\nimport FormGroupInputText from 'components/molecules/FormGroupInputText'\nimport SupplyTile from 'components/molecules/SupplyTile'\nimport Button from 'components/atoms/Button'\nimport Fieldset from 'components/molecules/Fieldset'\n\nconst mapStateToProps = (state: RootState) => ({\n  supplySetupType: selectors.DraftExpedition.SettingsSnapshotConfig.getSupplySetupType(\n    state\n  ),\n  supplySetupId: selectors.DraftExpedition.SettingsSnapshotConfig.getSupplySetupId(\n    state\n  ),\n  supplySetupName: selectors.DraftExpedition.SettingsSnapshotConfig.getSupplySetupName(\n    state\n  ),\n  tiles: selectors.DraftExpedition.SettingsSnapshotConfig.getSupplyTilesArray(\n    state\n  ),\n  availableMages: selectors.DraftExpedition.SettingsSnapshotConfig.getAvailableMages(\n    state\n  ),\n  availableSupplyCards: selectors.DraftExpedition.SettingsSnapshotConfig.getAvailableSupplyCards(\n    state\n  ),\n  availableTreasures: selectors.DraftExpedition.SettingsSnapshotConfig.getAvailableTreasures(\n    state\n  ),\n  availableNemeses: selectors.DraftExpedition.SettingsSnapshotConfig.getAvailableNemeses(\n    state\n  ),\n  availableUBNCards: selectors.DraftExpedition.SettingsSnapshotConfig.getAvailableUBNCards(\n    state\n  ),\n})\n\nconst mapDispatchToProps = {\n  setSupplySetup: actions.DraftExpedition.SettingsSnapshotConfig.setSupplySetup,\n  setSupplySetupId:\n    actions.DraftExpedition.SettingsSnapshotConfig.setSupplySetupId,\n  setSupplySetupName:\n    actions.DraftExpedition.SettingsSnapshotConfig.setSupplySetupName,\n  addSupplyTile: actions.DraftExpedition.SettingsSnapshotConfig.addSupplyTile,\n  updateSupplyTile:\n    actions.DraftExpedition.SettingsSnapshotConfig.updateSupplyTile,\n  deleteSupplyTile:\n    actions.DraftExpedition.SettingsSnapshotConfig.deleteSupplyTile,\n  setAvailableMages:\n    actions.DraftExpedition.SettingsSnapshotConfig.setAvailableMages,\n  setAvailableSupplyCards:\n    actions.DraftExpedition.SettingsSnapshotConfig.setAvailableSupplyCards,\n  setAvailableTreasures:\n    actions.DraftExpedition.SettingsSnapshotConfig.setAvailableTreasures,\n  setAvailableNemeses:\n    actions.DraftExpedition.SettingsSnapshotConfig.setAvailableNemeses,\n  setAvailableUBNCards:\n    actions.DraftExpedition.SettingsSnapshotConfig.setAvailableUBNCards,\n}\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps & {}\n\nconst SettingsSnapshot = ({\n  supplySetupType,\n  supplySetupId,\n  supplySetupName,\n  tiles,\n  availableMages,\n  availableSupplyCards,\n  availableTreasures,\n  availableNemeses,\n  availableUBNCards,\n  setSupplySetup,\n  setSupplySetupId,\n  setSupplySetupName,\n  addSupplyTile,\n  updateSupplyTile,\n  deleteSupplyTile,\n  setAvailableMages,\n  setAvailableSupplyCards,\n  setAvailableTreasures,\n  setAvailableNemeses,\n  setAvailableUBNCards,\n}: Props) => {\n  const handleSupplySetupTypeChange = (event: React.ChangeEvent) => {\n    const type = (event.target as HTMLInputElement)\n      .value as types.SupplySetupType\n\n    type === 'custom'\n      ? setSupplySetup({\n          id: '',\n          name: '',\n          type: 'custom',\n          active: true,\n          tiles: {},\n        })\n      : setSupplySetup(initialState.supplySetup)\n  }\n\n  const dataMarketSetups: aerTypes.IMarketSetup[] = Object.values(\n    DATA.marketsetups.setups\n  )\n\n  const marketSetupsOptions = dataMarketSetups.map(\n    (marketSetup: aerTypes.IMarketSetup) => {\n      return {\n        value: marketSetup.id,\n        label: marketSetup.name,\n      }\n    }\n  )\n\n  const marketSetupsDefaultValue = marketSetupsOptions.filter((option) => {\n    const setup = DATA.marketsetups.setups[option.value]\n\n    return setup.id === supplySetupId\n  })\n\n  const handleMarketSetupChange = (selectOption: types.SelectOption) => {\n    const setup = DATA.marketsetups.setups[selectOption.value]\n\n    setSupplySetup({\n      id: setup?.id ?? '',\n      name: setup?.name ?? '',\n      type: setup?.type ?? 'official',\n      active: setup?.active ?? true,\n      tiles:\n        setup?.tiles.reduce((tiles: types.Tiles, tile: aerTypes.Slot) => {\n          const tileId = tile.id ?? shortid.generate()\n\n          const newTile = {\n            id: tileId,\n            type: tile.type as types.SupplyCardType,\n            operation: tile.operation,\n          }\n\n          tile.threshold &&\n            Object.assign(newTile, {\n              threshold: tile.threshold,\n            })\n\n          tile.values &&\n            Object.assign(newTile, {\n              values: tile.values,\n            })\n\n          return {\n            ...tiles,\n            [tileId]: newTile,\n          }\n        }, {}) ?? {},\n    })\n  }\n\n  const handleSupplySetupIdChange = (event: any) => {\n    setSupplySetupId(event.target.value)\n  }\n\n  const handleSupplySetupNameChange = (event: any) => {\n    setSupplySetupName(event.target.value)\n  }\n\n  const handleAddSupplyCard = () => {\n    addSupplyTile()\n  }\n\n  const handleUpdateSupplyCard = (tile: aerTypes.MarketTile) => {\n    updateSupplyTile(tile)\n  }\n\n  const handleDeleteSupplyCard = (tile: aerTypes.MarketTile) => {\n    deleteSupplyTile(tile.id)\n  }\n\n  const renderSupplyTiles = (tiles: aerTypes.MarketTile[]) => {\n    return tiles.map((tile: aerTypes.MarketTile) => {\n      return (\n        <SupplyTile\n          key={tile.id}\n          tile={tile}\n          handleChange={handleUpdateSupplyCard}\n          handleDelete={handleDeleteSupplyCard}\n        />\n      )\n    })\n  }\n\n  const dataMages: aerTypes.Mage[] = Object.values(\n    DATA.normalizedData.ENG.mages\n  )\n\n  const mageOptions = dataMages.map((mage: aerTypes.Mage) => {\n    return {\n      value: mage.id,\n      label: mage.name,\n    }\n  })\n\n  const magesDefaultValue = mageOptions.filter(\n    (option) => availableMages.indexOf(option.value) !== -1\n  )\n\n  const handleMageChange = (selectOptions: types.SelectOptions) => {\n    const selectedMageIds: string[] = selectOptions\n      ? selectOptions.map((option: types.SelectOption) => option.value)\n      : []\n\n    setAvailableMages(selectedMageIds)\n  }\n\n  const dataSupply: aerTypes.ICard[] = Object.values(\n    DATA.normalizedData.ENG.cards\n  )\n\n  const supplyGemOptions = dataSupply\n    .filter((supply: aerTypes.ICard) => supply.type === 'Gem')\n    .map((supply: aerTypes.ICard) => {\n      return {\n        value: supply.id,\n        label: `${supply.name} (${supply.cost})`,\n      }\n    })\n\n  const supplyRelicOptions = dataSupply\n    .filter((supply: aerTypes.ICard) => supply.type === 'Relic')\n    .map((supply: aerTypes.ICard) => {\n      return {\n        value: supply.id,\n        label: `${supply.name} (${supply.cost})`,\n      }\n    })\n\n  const supplySpellOptions = dataSupply\n    .filter((supply: aerTypes.ICard) => supply.type === 'Spell')\n    .map((supply: aerTypes.ICard) => {\n      return {\n        value: supply.id,\n        label: `${supply.name} (${supply.cost})`,\n      }\n    })\n\n  const supplyGemsDefaultValue = supplyGemOptions.filter(\n    (option) => availableSupplyCards.indexOf(option.value) !== -1\n  )\n\n  const supplyRelicsDefaultValue = supplyRelicOptions.filter(\n    (option) => availableSupplyCards.indexOf(option.value) !== -1\n  )\n\n  const supplySpellsDefaultValue = supplySpellOptions.filter(\n    (option) => availableSupplyCards.indexOf(option.value) !== -1\n  )\n\n  const handleSupplyGemChange = (selectOptions: types.SelectOptions) => {\n    const selectedGemIds: string[] = selectOptions\n      ? selectOptions.map((option: types.SelectOption) => option.value)\n      : []\n\n    const allButGemSupplyCards = dataSupply\n      .filter((supplyCard: aerTypes.ICard) => supplyCard.type !== 'Gem')\n      .filter(\n        (supplyCard: aerTypes.ICard) =>\n          availableSupplyCards.indexOf(supplyCard.id) !== -1\n      )\n      .map((supplyCard: aerTypes.ICard) => supplyCard.id)\n\n    setAvailableSupplyCards([...allButGemSupplyCards, ...selectedGemIds])\n  }\n\n  const handleSupplyRelicChange = (selectOptions: types.SelectOptions) => {\n    const selectedRelicIds: string[] = selectOptions\n      ? selectOptions.map((option: types.SelectOption) => option.value)\n      : []\n\n    const allButRelicSupplyCards = dataSupply\n      .filter((supplyCard: aerTypes.ICard) => supplyCard.type !== 'Relic')\n      .filter(\n        (supplyCard: aerTypes.ICard) =>\n          availableSupplyCards.indexOf(supplyCard.id) !== -1\n      )\n      .map((supplyCard: aerTypes.ICard) => supplyCard.id)\n\n    setAvailableSupplyCards([...allButRelicSupplyCards, ...selectedRelicIds])\n  }\n\n  const handleSupplySpellChange = (selectOptions: types.SelectOptions) => {\n    const selectedSpellIds: string[] = selectOptions\n      ? selectOptions.map((option: types.SelectOption) => option.value)\n      : []\n\n    const allButSpellSupplyCards = dataSupply\n      .filter((supplyCard: aerTypes.ICard) => supplyCard.type !== 'Spell')\n      .filter(\n        (supplyCard: aerTypes.ICard) =>\n          availableSupplyCards.indexOf(supplyCard.id) !== -1\n      )\n      .map((supplyCard: aerTypes.ICard) => supplyCard.id)\n\n    setAvailableSupplyCards([...allButSpellSupplyCards, ...selectedSpellIds])\n  }\n\n  const dataTreasures: aerTypes.Treasure[] = Object.values(\n    DATA.normalizedData.ENG.treasures\n  )\n\n  const treasureLevel1Options = dataTreasures\n    .filter((treasure: aerTypes.Treasure) => treasure.level === 1)\n    .map((treasure: aerTypes.Treasure) => {\n      return {\n        value: treasure.id,\n        label: treasure.subtype\n          ? `${treasure.name} (${treasure.subtype})`\n          : treasure.name,\n      }\n    })\n\n  const treasureLevel2Options = dataTreasures\n    .filter((treasure: aerTypes.Treasure) => treasure.level === 2)\n    .map((treasure: aerTypes.Treasure) => {\n      return {\n        value: treasure.id,\n        label: treasure.subtype\n          ? `${treasure.name} (${treasure.subtype})`\n          : treasure.name,\n      }\n    })\n\n  const treasureLevel3Options = dataTreasures\n    .filter((treasure: aerTypes.Treasure) => treasure.level === 3)\n    .map((treasure: aerTypes.Treasure) => {\n      return {\n        value: treasure.id,\n        label: treasure.subtype\n          ? `${treasure.name} (${treasure.subtype})`\n          : treasure.name,\n      }\n    })\n\n  const treasuresLevel1DefaultValue = treasureLevel1Options.filter(\n    (option) => availableTreasures.indexOf(option.value) !== -1\n  )\n\n  const treasuresLevel2DefaultValue = treasureLevel2Options.filter(\n    (option) => availableTreasures.indexOf(option.value) !== -1\n  )\n\n  const treasuresLevel3DefaultValue = treasureLevel3Options.filter(\n    (option) => availableTreasures.indexOf(option.value) !== -1\n  )\n\n  const handleTreasureLevel1Change = (selectOptions: types.SelectOptions) => {\n    const selectedTreasureLevel1Ids: string[] = selectOptions\n      ? selectOptions.map((option: types.SelectOption) => option.value)\n      : []\n\n    const allButLevel1Treasures = dataTreasures\n      .filter((treasure: aerTypes.Treasure) => treasure.level !== 1)\n      .filter(\n        (treasure: aerTypes.Treasure) =>\n          availableTreasures.indexOf(treasure.id) !== -1\n      )\n      .map((treasure: aerTypes.Treasure) => treasure.id)\n\n    setAvailableTreasures([\n      ...allButLevel1Treasures,\n      ...selectedTreasureLevel1Ids,\n    ])\n  }\n\n  const handleTreasureLevel2Change = (selectOptions: types.SelectOptions) => {\n    const selectedTreasureLevel2Ids: string[] = selectOptions\n      ? selectOptions.map((option: types.SelectOption) => option.value)\n      : []\n\n    const allButLevel2Treasures = dataTreasures\n      .filter((treasure: aerTypes.Treasure) => treasure.level !== 2)\n      .filter(\n        (treasure: aerTypes.Treasure) =>\n          availableTreasures.indexOf(treasure.id) !== -1\n      )\n      .map((treasure: aerTypes.Treasure) => treasure.id)\n\n    setAvailableTreasures([\n      ...allButLevel2Treasures,\n      ...selectedTreasureLevel2Ids,\n    ])\n  }\n\n  const handleTreasureLevel3Change = (selectOptions: types.SelectOptions) => {\n    const selectedTreasureLevel3Ids: string[] = selectOptions\n      ? selectOptions.map((option: types.SelectOption) => option.value)\n      : []\n\n    const allButLevel3Treasures = dataTreasures\n      .filter((treasure: aerTypes.Treasure) => treasure.level !== 3)\n      .filter(\n        (treasure: aerTypes.Treasure) =>\n          availableTreasures.indexOf(treasure.id) !== -1\n      )\n      .map((treasure: aerTypes.Treasure) => treasure.id)\n\n    setAvailableTreasures([\n      ...allButLevel3Treasures,\n      ...selectedTreasureLevel3Ids,\n    ])\n  }\n\n  const dataNemeses: aerTypes.Nemesis[] = Object.values(\n    DATA.normalizedData.ENG.nemeses\n  )\n\n  const nemesesOptions = dataNemeses.map((nemesis: aerTypes.Nemesis) => {\n    return {\n      value: nemesis.id,\n      label: nemesis.name,\n    }\n  })\n\n  const nemesesDefaultValue = nemesesOptions.filter(\n    (option) => availableNemeses.indexOf(option.value) !== -1\n  )\n\n  const handleNemesesChange = (selectOptions: types.SelectOptions) => {\n    const selectedNemesisIds: string[] = selectOptions\n      ? selectOptions.map((option: types.SelectOption) => option.value)\n      : []\n\n    setAvailableNemeses(selectedNemesisIds)\n  }\n\n  const dataUBNCards: aerTypes.UpgradedBasicNemesisCard[] = Object.values(\n    DATA.normalizedData.ENG.upgradedBasicNemesisCards\n  )\n\n  const upgradedBasicNemesisCardsOptions = dataUBNCards.map(\n    (upgradedBasicNemesisCard: aerTypes.UpgradedBasicNemesisCard) => {\n      return {\n        value: upgradedBasicNemesisCard.id,\n        label: `${upgradedBasicNemesisCard.name} (${upgradedBasicNemesisCard.type})`,\n      }\n    }\n  )\n\n  const upgradedBasicNemesisCardsDefaultValue = upgradedBasicNemesisCardsOptions.filter(\n    (option) => availableUBNCards.indexOf(option.value) !== -1\n  )\n\n  const handleUBNCardsChange = (selectOptions: types.SelectOptions) => {\n    const selectedUBNCardsIds: string[] = selectOptions\n      ? selectOptions.map((option: types.SelectOption) => option.value)\n      : []\n\n    setAvailableUBNCards(selectedUBNCardsIds)\n  }\n\n  return (\n    <Accordion id=\"settingsSnapshot\" title=\"Settings Snapshot\" open>\n      <h3>Supply Setup</h3>\n      <Fieldset legend=\"Supply setup type\" legendVisible>\n        <div className=\"radio-wrapper\">\n          <input\n            type=\"radio\"\n            name=\"supplySetupType\"\n            id=\"official\"\n            defaultChecked\n            value=\"official\"\n            onChange={handleSupplySetupTypeChange}\n          />\n          <label htmlFor=\"official\">predefined</label>\n        </div>\n        <div className=\"radio-wrapper\">\n          <input\n            type=\"radio\"\n            name=\"supplySetupType\"\n            id=\"custom\"\n            value=\"custom\"\n            onChange={handleSupplySetupTypeChange}\n          />\n          <label htmlFor=\"custom\">custom</label>\n        </div>\n      </Fieldset>\n      {supplySetupType === 'custom' && supplySetupId !== 'market1Inc' ? (\n        <>\n          <p>Add your custom supply setup for the expedition.</p>\n          <FormGroupInputText\n            id=\"settingsSupplySetupId\"\n            label=\"Id\"\n            onChange={handleSupplySetupIdChange}\n            defaultValue={supplySetupId}\n          />\n          <FormGroupInputText\n            id=\"settingsSupplySetupName\"\n            label=\"Name\"\n            onChange={handleSupplySetupNameChange}\n            defaultValue={supplySetupName}\n          />\n          <Button type=\"button\" onClick={handleAddSupplyCard}>\n            Add supply tile\n          </Button>\n          {tiles.length ? (\n            renderSupplyTiles(tiles)\n          ) : (\n            <p>No supply cards added</p>\n          )}\n        </>\n      ) : (\n        <>\n          <FormGroupSelect\n            options={marketSetupsOptions}\n            id=\"selectMarketSetup\"\n            label=\"Select market setup\"\n            onChange={handleMarketSetupChange}\n            defaultValue={marketSetupsDefaultValue}\n          />\n        </>\n      )}\n      <h3>Mages ({availableMages.length})</h3>\n      <FormGroupSelect\n        options={mageOptions}\n        id=\"selectAvailableMages\"\n        label=\"Select available mages\"\n        onChange={handleMageChange}\n        defaultValue={magesDefaultValue}\n        isMulti\n      />\n      <h3>Supply Cards ({availableSupplyCards.length})</h3>\n      <FormGroupSelect\n        options={supplyGemOptions}\n        id=\"selectAvailableGems\"\n        label=\"Select available gems\"\n        onChange={handleSupplyGemChange}\n        defaultValue={supplyGemsDefaultValue}\n        isMulti\n      />\n      <FormGroupSelect\n        options={supplyRelicOptions}\n        id=\"selectAvailableRelics\"\n        label=\"Select available relics\"\n        onChange={handleSupplyRelicChange}\n        defaultValue={supplyRelicsDefaultValue}\n        isMulti\n      />\n      <FormGroupSelect\n        options={supplySpellOptions}\n        id=\"selectAvailableSpells\"\n        label=\"Select available spells\"\n        onChange={handleSupplySpellChange}\n        defaultValue={supplySpellsDefaultValue}\n        isMulti\n      />\n      <h3>Treasures ({availableTreasures.length})</h3>\n      <FormGroupSelect\n        options={treasureLevel1Options}\n        id=\"selectAvailableTreasuresLevel1\"\n        label=\"Select available level 1 treasures\"\n        onChange={handleTreasureLevel1Change}\n        defaultValue={treasuresLevel1DefaultValue}\n        isMulti\n      />\n      <FormGroupSelect\n        options={treasureLevel2Options}\n        id=\"selectAvailableTreasuresLevel2\"\n        label=\"Select available level 2 treasures\"\n        onChange={handleTreasureLevel2Change}\n        defaultValue={treasuresLevel2DefaultValue}\n        isMulti\n      />\n      <FormGroupSelect\n        options={treasureLevel3Options}\n        id=\"selectAvailableTreasuresLevel3\"\n        label=\"Select available level 3 treasures\"\n        onChange={handleTreasureLevel3Change}\n        defaultValue={treasuresLevel3DefaultValue}\n        isMulti\n      />\n      <h3>Nemeses ({availableNemeses.length})</h3>\n      <FormGroupSelect\n        options={nemesesOptions}\n        id=\"selectAvailableNemeses\"\n        label=\"Select available nemeses\"\n        onChange={handleNemesesChange}\n        defaultValue={nemesesDefaultValue}\n        isMulti\n      />\n      <h3>Upgraded Basic Nemesis Cards ({availableUBNCards.length})</h3>\n      <FormGroupSelect\n        options={upgradedBasicNemesisCardsOptions}\n        id=\"selectUBNCards\"\n        label=\"Select upgraded basic nemesis cards\"\n        onChange={handleUBNCardsChange}\n        defaultValue={upgradedBasicNemesisCardsDefaultValue}\n        isMulti\n      />\n    </Accordion>\n  )\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(React.memo(SettingsSnapshot))\n","const copyToClipboard = (json: string) => {\n  window.navigator.clipboard.writeText(json)\n}\n\nexport default copyToClipboard\n","import { saveAs } from 'file-saver'\n\nconst saveToFile = (json: string, name: string) => {\n  const blob = new Blob([json], { type: 'text/json;charset=utf-8' })\n\n  return saveAs(blob, `${name}.json`)\n}\n\nexport default saveToFile\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  width: 50%;\n  padding: 0 0 0 32px;\n\n  @media all and (max-width: 920px) {\n    width: 100%;\n    padding: 32px 0 0 0;\n  }\n`\n\nexport default Wrapper\n","import styled from 'styled-components/macro'\n\nconst Pre = styled('pre')`\n  padding: 24px;\n  border: 1px solid #dadada;\n  background: #fafafa;\n`\n\nexport default Pre\n\n\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport * as aerTypes from 'aer-types'\nimport * as types from 'types'\n\nimport { RootState, selectors } from 'Redux/Store'\n\nimport { saveToFile, copyToClipboard } from 'helpers'\n\nimport Button from 'components/atoms/Button'\nimport Wrapper from './__styled__/Wrapper'\nimport Pre from './__styled__/Pre'\n\nconst mapStateToProps = (state: RootState) => ({\n  name: selectors.DraftExpedition.Name.getExpeditionName(state),\n  seed: selectors.DraftExpedition.SeedConfig.getSeed(state),\n  bigPocketVariantConfig: selectors.DraftExpedition.BigPocketVariantConfig.getBigPocketVariantConfig(\n    state\n  ),\n  branches: selectors.DraftExpedition.SequenceConfig.Branches.getBranches(\n    state\n  ),\n  firstBranchId: selectors.DraftExpedition.SequenceConfig.FirstBranchId.getFirstBranchId(\n    state\n  ),\n  initialBarracks: selectors.DraftExpedition.InitialBarracksConfig.getInitialBarracksConfig(\n    state\n  ),\n  initialUBNCards: selectors.DraftExpedition.InitialUBNCardsConfig.getInitialUBNCardsConfig(\n    state\n  ),\n  settingsSnapshot: selectors.DraftExpedition.SettingsSnapshotConfig.getSettingsSnapshotConfig(\n    state\n  ),\n})\n\ntype Props = ReturnType<typeof mapStateToProps> & {\n  fileName?: string\n}\n\nconst Preview = ({\n  fileName = 'expedition',\n  name,\n  seed,\n  bigPocketVariantConfig,\n  firstBranchId,\n  branches,\n  initialBarracks,\n  initialUBNCards,\n  settingsSnapshot,\n}: Props) => {\n  const dataBranches = branches.reduce((branches, branch: types.Branch) => {\n    switch (branch.type) {\n      case 'narrative': {\n        const narrativeBranch = branch as types.NarrativeBranch\n\n        const newBranch = {\n          type: branch.type,\n          config: {\n            text: narrativeBranch.text,\n            decisions: narrativeBranch.decisions\n              ? narrativeBranch.decisions.map((decision) => decision.text)\n              : false,\n          },\n        }\n\n        if (narrativeBranch.nextBranchId) {\n          Object.assign(newBranch, {\n            nextBranchId: narrativeBranch.nextBranchId,\n          })\n        }\n\n        return {\n          ...branches,\n          [branch.id]: newBranch,\n        }\n      }\n\n      case 'reward': {\n        const rewardBranch = branch as types.RewardBranch\n\n        const newBranch = {\n          type: branch.type,\n          config: {\n            type: rewardBranch.rewardType,\n          },\n        }\n\n        const randomTreasuresTier1 =\n          rewardBranch.treasure.tier1 !== 0\n            ? Array(rewardBranch.treasure.tier1).fill({\n                random: true,\n                level: 1,\n              })\n            : []\n\n        const randomTreasuresTier2 =\n          rewardBranch.treasure.tier2 !== 0\n            ? Array(rewardBranch.treasure.tier2).fill({\n                random: true,\n                level: 2,\n              })\n            : []\n\n        const randomTreasuresTier3 =\n          rewardBranch.treasure.tier3 !== 0\n            ? Array(rewardBranch.treasure.tier3).fill({\n                random: true,\n                level: 3,\n              })\n            : []\n\n        if (\n          rewardBranch.treasure.ids.length > 0 ||\n          randomTreasuresTier1.length > 0 ||\n          randomTreasuresTier2.length > 0 ||\n          randomTreasuresTier3.length > 0\n        ) {\n          Object.assign(newBranch.config, {\n            treasure: {\n              ids: [\n                ...rewardBranch.treasure.ids,\n                ...randomTreasuresTier1,\n                ...randomTreasuresTier2,\n                ...randomTreasuresTier3,\n              ],\n            },\n          })\n        }\n\n        const randomMageAmount =\n          rewardBranch.mage.randomAmount !== 0\n            ? Array(rewardBranch.mage.randomAmount).fill({\n                random: true,\n              })\n            : []\n\n        if (rewardBranch.mage.ids.length > 0 || randomMageAmount.length > 0) {\n          Object.assign(newBranch.config, {\n            mage: {\n              ids: [...rewardBranch.mage.ids, ...randomMageAmount],\n            },\n          })\n        }\n\n        if (\n          rewardBranch.supply.ids.length > 0 ||\n          rewardBranch.supply.blueprints.length > 0\n        ) {\n          const blueprints = rewardBranch.supply.blueprints.map(\n            (blueprint: types.Blueprint) => {\n              return {\n                type: blueprint.type,\n                operation: blueprint.operation,\n                threshold: blueprint.threshold,\n                values: blueprint.values,\n              }\n            }\n          )\n\n          Object.assign(newBranch.config, {\n            supply: {\n              ids: [...rewardBranch.supply.ids, ...blueprints],\n              bigPocket: rewardBranch.supply.bigPocket,\n            },\n          })\n        }\n\n        if (rewardBranch.nextBranchId) {\n          Object.assign(newBranch, {\n            nextBranchId: rewardBranch.nextBranchId,\n          })\n        }\n\n        return {\n          ...branches,\n          [branch.id]: newBranch,\n        }\n      }\n\n      case 'battle': {\n        const battleBranch = branch as types.BattleBranch\n\n        const newBranch = {\n          type: branch.type,\n          config: {\n            tier: battleBranch.tier,\n            newUBNCards: battleBranch.newUBNCards,\n            treasure: {\n              level: battleBranch.treasure.level,\n              hasTreasure: battleBranch.treasure.hasTreasure,\n            },\n          },\n        }\n\n        battleBranch.newUBNCards.type === 'regular' &&\n          Object.assign(newBranch.config.newUBNCards, {\n            addRandom: battleBranch.newUBNCards?.addRandom ?? true,\n          })\n\n        battleBranch.nemesisId &&\n          Object.assign(newBranch.config, {\n            nemesisId: battleBranch.nemesisId,\n          })\n\n        battleBranch.specialRules &&\n          Object.assign(newBranch.config, {\n            specialRules: battleBranch.specialRules,\n          })\n\n        battleBranch.onLoss &&\n          Object.assign(newBranch.config, {\n            onLoss: battleBranch.onLoss,\n          })\n\n        if (battleBranch?.winRewards?.hasOwnProperty('rewardType')) {\n          const winRewardTreasure = {}\n          const winRewardMage = {}\n          const winRewardSupply = {}\n\n          const winRewardTreasureIds =\n            battleBranch.winRewards?.treasure?.ids ?? []\n\n          const winRewardRandomTreasuresTier1 =\n            battleBranch.winRewards?.treasure?.tier1 &&\n            battleBranch.winRewards?.treasure?.tier1 !== 0\n              ? Array(battleBranch.winRewards.treasure.tier1).fill({\n                  random: true,\n                  level: 1,\n                })\n              : []\n\n          const winRewardRandomTreasuresTier2 =\n            battleBranch.winRewards?.treasure?.tier2 &&\n            battleBranch.winRewards?.treasure?.tier2 !== 0\n              ? Array(battleBranch.winRewards.treasure.tier2).fill({\n                  random: true,\n                  level: 2,\n                })\n              : []\n\n          const winRewardRandomTreasuresTier3 =\n            battleBranch.winRewards?.treasure?.tier3 &&\n            battleBranch.winRewards?.treasure?.tier3 !== 0\n              ? Array(battleBranch.winRewards.treasure.tier3).fill({\n                  random: true,\n                  level: 3,\n                })\n              : []\n\n          if (\n            winRewardTreasureIds.length > 0 ||\n            winRewardRandomTreasuresTier1.length > 0 ||\n            winRewardRandomTreasuresTier2.length > 0 ||\n            winRewardRandomTreasuresTier3.length > 0\n          ) {\n            Object.assign(winRewardTreasure, {\n              ids: [\n                ...winRewardTreasureIds,\n                ...winRewardRandomTreasuresTier1,\n                ...winRewardRandomTreasuresTier2,\n                ...winRewardRandomTreasuresTier3,\n              ],\n            })\n          }\n\n          const winRewardMageIds = battleBranch.winRewards?.mage?.ids ?? []\n\n          const winRewardRandomMageAmount =\n            battleBranch.winRewards?.mage?.randomAmount &&\n            battleBranch.winRewards?.mage?.randomAmount !== 0\n              ? Array(battleBranch.winRewards.mage.randomAmount).fill({\n                  random: true,\n                })\n              : []\n\n          if (\n            winRewardMageIds.length > 0 ||\n            winRewardRandomMageAmount.length > 0\n          ) {\n            Object.assign(winRewardMage, {\n              ids: [...winRewardMageIds, ...winRewardRandomMageAmount],\n            })\n          }\n\n          const winRewardSupplyIds = battleBranch.winRewards?.supply?.ids ?? []\n          const winRewardSupplyBlueprints =\n            battleBranch.winRewards?.supply?.blueprints ?? []\n          const winRewardSupplyBigPocket =\n            battleBranch.winRewards?.supply?.bigPocket ?? false\n\n          if (\n            winRewardSupplyIds.length > 0 ||\n            winRewardSupplyBlueprints.length > 0\n          ) {\n            const blueprints = winRewardSupplyBlueprints.map(\n              (blueprint: types.Blueprint) => {\n                return {\n                  type: blueprint.type,\n                  operation: blueprint.operation,\n                  threshold: blueprint.threshold,\n                  values: blueprint.values,\n                }\n              }\n            )\n\n            Object.assign(winRewardSupply, {\n              ids: [...winRewardSupplyIds, ...blueprints],\n              bigPocket: winRewardSupplyBigPocket,\n            })\n          }\n\n          Object.assign(newBranch.config, {\n            winRewards:\n              Object.keys(battleBranch.winRewards).length > 0\n                ? {\n                    type: battleBranch.winRewards.rewardType,\n                    treasure:\n                      Object.keys(winRewardTreasure).length > 0\n                        ? winRewardTreasure\n                        : undefined,\n                    mage:\n                      Object.keys(winRewardMage).length > 0\n                        ? winRewardMage\n                        : undefined,\n                    supply:\n                      Object.keys(winRewardSupply).length > 0\n                        ? winRewardSupply\n                        : undefined,\n                  }\n                : undefined,\n          })\n        }\n\n        battleBranch.lossRewards &&\n          Object.assign(newBranch.config, {\n            lossRewards:\n              battleBranch.lossRewards.length > 0\n                ? battleBranch.lossRewards.map(\n                    (lossReward: types.RewardConfig) => {\n                      const lossRewardTreasure = {}\n                      const lossRewardMage = {}\n                      const lossRewardSupply = {}\n\n                      const lossRewardTreasureIds =\n                        lossReward?.treasure?.ids ?? []\n\n                      const lossRewardRandomTreasuresTier1 =\n                        lossReward?.treasure?.tier1 &&\n                        lossReward?.treasure?.tier1 !== 0\n                          ? Array(lossReward.treasure.tier1).fill({\n                              random: true,\n                              level: 1,\n                            })\n                          : []\n\n                      const lossRewardRandomTreasuresTier2 =\n                        lossReward?.treasure?.tier2 &&\n                        lossReward?.treasure?.tier2 !== 0\n                          ? Array(lossReward.treasure.tier2).fill({\n                              random: true,\n                              level: 2,\n                            })\n                          : []\n\n                      const lossRewardRandomTreasuresTier3 =\n                        lossReward?.treasure?.tier3 &&\n                        lossReward?.treasure?.tier3 !== 0\n                          ? Array(lossReward.treasure.tier3).fill({\n                              random: true,\n                              level: 3,\n                            })\n                          : []\n\n                      if (\n                        lossRewardTreasureIds.length > 0 ||\n                        lossRewardRandomTreasuresTier1.length > 0 ||\n                        lossRewardRandomTreasuresTier2.length > 0 ||\n                        lossRewardRandomTreasuresTier3.length > 0\n                      ) {\n                        Object.assign(lossRewardTreasure, {\n                          ids: [\n                            ...lossRewardTreasureIds,\n                            ...lossRewardRandomTreasuresTier1,\n                            ...lossRewardRandomTreasuresTier2,\n                            ...lossRewardRandomTreasuresTier3,\n                          ],\n                        })\n                      }\n\n                      const lossRewardMageIds = lossReward?.mage?.ids ?? []\n\n                      const lossRewardRandomMageAmount =\n                        lossReward?.mage?.randomAmount &&\n                        lossReward?.mage?.randomAmount !== 0\n                          ? Array(lossReward.mage.randomAmount).fill({\n                              random: true,\n                            })\n                          : []\n\n                      if (\n                        lossRewardMageIds.length > 0 ||\n                        lossRewardRandomMageAmount.length > 0\n                      ) {\n                        Object.assign(lossRewardMage, {\n                          ids: [\n                            ...lossRewardMageIds,\n                            ...lossRewardRandomMageAmount,\n                          ],\n                        })\n                      }\n\n                      const lossRewardSupplyIds = lossReward?.supply?.ids ?? []\n                      const lossRewardSupplyBlueprints =\n                        lossReward?.supply?.blueprints ?? []\n                      const lossRewardSupplyBigPocket =\n                        lossReward?.supply?.bigPocket ?? false\n\n                      if (\n                        lossRewardSupplyIds.length > 0 ||\n                        lossRewardSupplyBlueprints.length > 0\n                      ) {\n                        const blueprints = lossRewardSupplyBlueprints.map(\n                          (blueprint: types.Blueprint) => {\n                            return {\n                              type: blueprint.type,\n                              operation: blueprint.operation,\n                              threshold: blueprint.threshold,\n                              values: blueprint.values,\n                            }\n                          }\n                        )\n\n                        Object.assign(lossRewardSupply, {\n                          ids: [...lossRewardSupplyIds, ...blueprints],\n                          bigPocket: lossRewardSupplyBigPocket,\n                        })\n                      }\n\n                      return {\n                        type: lossReward.rewardType,\n                        treasure:\n                          Object.keys(lossRewardTreasure).length > 0\n                            ? lossRewardTreasure\n                            : undefined,\n                        mage:\n                          Object.keys(lossRewardMage).length > 0\n                            ? lossRewardMage\n                            : undefined,\n                        supply:\n                          Object.keys(lossRewardSupply).length > 0\n                            ? lossRewardSupply\n                            : undefined,\n                      }\n                    }\n                  )\n                : undefined,\n          })\n\n        if (battleBranch.nextBranchId) {\n          Object.assign(newBranch, {\n            nextBranchId: battleBranch.nextBranchId,\n          })\n        }\n\n        return {\n          ...branches,\n          [branch.id]: newBranch,\n        }\n      }\n\n      default: {\n        return {\n          ...branches,\n          [branch.id]: {\n            type: branch.type,\n          },\n        }\n      }\n    }\n  }, {})\n\n  const dataSupplyTiles = Object.values(settingsSnapshot.supplySetup.tiles).map(\n    (tile: aerTypes.MarketTile) => {\n      const newTile = {\n        type: tile.type,\n        operation: tile.operation,\n      }\n\n      tile.threshold &&\n        Object.assign(newTile, {\n          threshold: tile.threshold,\n        })\n\n      tile.values &&\n        Object.assign(newTile, {\n          values: tile.values,\n        })\n\n      return newTile\n    }\n  )\n\n  const data = {\n    name: name,\n    bigPocketVariantConfig: bigPocketVariantConfig,\n    sequenceConfig: {\n      firstBranchId: firstBranchId ? firstBranchId : '',\n      branches: dataBranches,\n    },\n    settingsSnapshotConfig: {\n      ...settingsSnapshot,\n      supplySetup: {\n        ...settingsSnapshot.supplySetup,\n        tiles: dataSupplyTiles,\n      },\n    },\n  }\n\n  seed !== '' &&\n    Object.assign(data, {\n      seedConfig: seed,\n    })\n\n  firstBranchId &&\n    Object.assign(data.sequenceConfig, {\n      firstBranchId: firstBranchId,\n    })\n\n  if (\n    initialBarracks.mageIds.length ||\n    initialBarracks.supplyIds.length ||\n    initialBarracks.treasureIds.length\n  ) {\n    Object.assign(data, {\n      initialBarracksConfig: {\n        mageIds: initialBarracks.mageIds,\n        supplyIds: initialBarracks.supplyIds,\n        treasureIds: initialBarracks.treasureIds,\n      },\n    })\n  }\n\n  initialUBNCards.length &&\n    Object.assign(data, {\n      initialUBNCardsConfig: initialUBNCards,\n    })\n\n  const handleCopyToClipboard = () => {\n    copyToClipboard(JSON.stringify(data, null, '  '))\n  }\n\n  const handleSave = () => {\n    saveToFile(JSON.stringify(data, null, '  '), fileName)\n  }\n\n  return (\n    <Wrapper>\n      <Button type=\"button\" onClick={handleCopyToClipboard}>\n        Copy to clipboard\n      </Button>\n      <Button type=\"button\" onClick={handleSave}>\n        Save to file\n      </Button>\n\n      <Pre>{JSON.stringify(data, null, '  ')}</Pre>\n\n      <Button type=\"button\" onClick={handleCopyToClipboard}>\n        Copy to clipboard\n      </Button>\n      <Button type=\"button\" onClick={handleSave}>\n        Save to file\n      </Button>\n    </Wrapper>\n  )\n}\n\nexport default connect(mapStateToProps)(React.memo(Preview))\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  display: flex;\n\n  @media all and (max-width: 920px) {\n    flex-direction: column;\n  }\n`\n\nexport default Wrapper\n","import styled from 'styled-components/macro'\n\nconst Form = styled('form')`\n  width: 50%;\n\n  @media all and (max-width: 920px) {\n    width: 100%;\n  }\n`\n\nexport default Form\n","import React from 'react'\n\nimport BasicInformation from 'components/templates/BasicInformation'\nimport Branches from 'components/templates/Branches'\nimport ConnectBranches from 'components/templates/ConnectBranches'\nimport InitialBarracks from 'components/templates/InitialBarracks'\nimport InitialUBNCards from 'components/templates/initialUBNCards'\nimport SettingsSnapshot from 'components/templates/SettingsSnapshot'\nimport Preview from 'components/molecules/Preview'\n\nimport Wrapper from './__styled__/Wrapper'\nimport Form from './__styled__/Form'\n\nconst Configurator = () => {\n  return (\n    <Wrapper>\n      <Form>\n        <BasicInformation />\n        <Branches />\n        <ConnectBranches />\n        <InitialBarracks />\n        <InitialUBNCards />\n        <SettingsSnapshot />\n      </Form>\n\n      <Preview />\n    </Wrapper>\n  )\n}\n\nexport default React.memo(Configurator)\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  padding: 32px;\n`\n\nexport default Wrapper\n","import React from 'react'\n\nimport H1 from 'components/atoms/H1'\nimport Configurator from 'components/molecules/Configurator'\nimport Wrapper from './__styled__/Wrapper'\n\nconst MainApp = () => {\n  return (\n    <Wrapper>\n      <H1>AER: Custom Expedition Editor</H1>\n      <Configurator />\n      <div id=\"modal-root\" />\n    </Wrapper>\n  )\n}\n\nexport default MainApp\n","import React from 'react'\n\nimport { ThemeProvider } from 'styled-components/macro'\n\nimport GlobalStyle from 'GlobalStyle'\nimport mainTheme from 'themes/main'\n\nimport MainApp from './MainApp'\n\nconst App = () => (\n  <ThemeProvider theme={mainTheme}>\n    <GlobalStyle />\n    <MainApp />\n  </ThemeProvider>\n)\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport configureStore from './Redux/configureStore'\nimport { initialState } from './Redux/Store'\n\nimport * as serviceWorker from './serviceWorker'\n\nimport App from './components/App'\n\nconst store = configureStore(initialState)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport { install, StoreCreator } from 'redux-loop'\n\nimport { RootReducer, RootState } from './Store'\n\nconst configureStore = (initialState: RootState) => {\n  // Add middleware to this array if necessary\n  const middleWares: any[] = []\n\n  const enhancers = [applyMiddleware(...middleWares), install<RootState>()]\n\n  const composeEnhancers =\n    process.env.NODE_ENV !== 'production' &&\n    typeof window === 'object' &&\n    // @ts-ignore\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      // @ts-ignore\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      : compose\n\n  const enhancedCreateStore = createStore as StoreCreator\n  const store = enhancedCreateStore(\n    RootReducer,\n    initialState,\n    composeEnhancers(...enhancers)\n  )\n\n  return store\n}\n\nexport { configureStore as default }\n"],"sourceRoot":""}