{"version":3,"sources":["Redux/Store/index.ts","serviceWorker.ts","themes/main/index.ts","helpers/copyToClipboard.ts","helpers/saveToFile.ts","components/molecules/Preview/__styled__/Wrapper.tsx","components/molecules/Preview/index.tsx","components/atoms/Label.tsx","components/atoms/Button.tsx","components/molecules/Configurator/__styled__/Wrapper.tsx","components/molecules/Configurator/__styled__/Form.tsx","components/molecules/Configurator/index.tsx","components/App/MainApp.tsx","components/App/index.tsx","index.tsx","Redux/configureStore.ts"],"names":["RootReducer","reduceReducers","combineReducers","Boolean","window","location","hostname","match","mainTheme","colors","copyToClipboard","json","navigator","clipboard","writeText","saveToFile","name","blob","Blob","type","saveAs","Wrapper","styled","React","memo","fileName","data","JSON","stringify","onClick","Label","Button","Form","initialState","bigPocketVariantConfig","Configurator","useForm","handleSubmit","register","errors","useState","formState","setFormState","onSubmit","htmlFor","id","ref","required","onChange","event","target","value","defaultValue","message","currentTarget","checked","defaultChecked","MainApp","App","theme","store","enhancers","applyMiddleware","install","composeEnhancers","compose","enhancedCreateStore","createStore","configureStore","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.53554776.chunk.js","sourcesContent":["import { combineReducers, reduceReducers } from 'redux-loop'\n\nexport type RootState = {\n\n}\n\nexport const initialState = {}\n\nexport const actions = {\n\n}\n\nexport const RootReducer = reduceReducers(\n  combineReducers<RootState>({\n    \n  })\n)\n\nexport const selectors = {\n\n}\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const mainTheme = {\n  colors: {}\n}\n\nexport default mainTheme\n","const copyToClipboard = (json: string) => {\n  window.navigator.clipboard.writeText(json)\n}\n\nexport default copyToClipboard\n","import { saveAs } from 'file-saver'\n\nconst saveToFile = (json: string, name: string) => {\n  const blob = new Blob([json], { type: 'text/json;charset=utf-8' })\n\n  return saveAs(blob, `${name}.json`)\n}\n\nexport default saveToFile\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  width: 50%;\n  padding: 0 24px;\n`\n\nexport default Wrapper\n","import React from 'react'\n\nimport { saveToFile, copyToClipboard } from 'helpers'\n\nimport Wrapper from './__styled__/Wrapper'\n\ntype Props = {\n  fileName?: string,\n  data: any\n}\n\nconst Preview = ({\n  fileName = 'expedition',\n  data\n}: Props) => {\n\n  const handleCopyToClipboard = () => {\n    copyToClipboard(JSON.stringify(data, null, '  '))\n  }\n\n  const handleSave = () => {\n    saveToFile(JSON.stringify(data, null, '  '), fileName)\n  }\n\n  return (\n    <Wrapper>\n      <code>\n        <pre>\n          {JSON.stringify(data, null, '  ')}\n        </pre>\n      </code>\n\n      <button type=\"button\" onClick={handleCopyToClipboard}>Copy to clipboard</button>\n      <button type=\"button\" onClick={handleSave}>Save to file</button>\n    </Wrapper>\n  )\n}\n\nexport default React.memo(Preview)\n","import styled from 'styled-components/macro'\n\nconst Label = styled('label')`\n  display: block;\n`\n\nexport default Label\n","import styled from 'styled-components/macro'\n\nconst Button = styled('button')`\n  margin: 24px 0;\n`\n\nexport default Button\n","import styled from 'styled-components/macro'\n\nconst Wrapper = styled('div')`\n  display: flex;\n`\n\nexport default Wrapper\n","import styled from 'styled-components/macro'\n\nconst Form = styled('form')`\n  width: 50%;\n`\n\nexport default Form\n","import React, { useState } from 'react'\nimport { useForm } from 'react-hook-form'\n\nimport Preview from 'components/molecules/Preview'\nimport Label from 'components/atoms/Label'\nimport Button from 'components/atoms/Button'\n\nimport Wrapper from './__styled__/Wrapper'\nimport Form from './__styled__/Form'\n\ntype FormData = {\n  name: string,\n  bigPocketVariantConfig: boolean\n}\n\nconst initialState: FormData = {\n  name: '',\n  bigPocketVariantConfig: false\n}\n\nconst Configurator = () => {\n  const { handleSubmit, register, errors } = useForm<FormData>()\n  const [ formState, setFormState ] = useState<FormData>(initialState)\n\n  const onSubmit = ({ name, bigPocketVariantConfig }: FormData) => {\n    const data = {\n      name: name,\n      bigPocketVariantConfig: bigPocketVariantConfig\n    }\n\n    setFormState(data)\n  }\n\n  const handleInputChange = (event: any) => {\n    setFormState({\n      ...formState,\n      name: event.target.value\n    })\n  }\n\n  const handleCheckboxChange = (event: any) => {\n    setFormState({\n      ...formState,\n      bigPocketVariantConfig: event.currentTarget.checked\n    })\n  }\n\n  return (\n    <Wrapper>\n      <Form onSubmit={handleSubmit(onSubmit)}>\n        <fieldset>\n          <legend>Basic Information</legend>\n          <Label htmlFor=\"name\">Expedition Name</Label>\n          <input\n            id=\"name\"\n            name=\"name\"\n            ref={register({\n              required: 'Required'\n            })}\n            onChange={handleInputChange}\n            defaultValue={formState.name}\n          />\n          {errors.name && errors.name.message}\n  \n          <Label htmlFor=\"bigPocketVariantConfig\">\n            <input\n              id=\"bigPocketVariantConfig\"\n              type=\"checkbox\"\n              name=\"bigPocketVariantConfig\"\n              ref={register}\n              onChange={handleCheckboxChange}\n              defaultChecked={formState.bigPocketVariantConfig}\n            />\n            Big Pocket Mode\n          </Label>\n          \n          {errors.bigPocketVariantConfig && errors.bigPocketVariantConfig.message}\n        </fieldset>\n        \n\n        <Button type=\"submit\">Submit</Button>\n      </Form>\n      <Preview data={formState} />\n    </Wrapper>\n  )\n}\n\nexport default Configurator\n","import React from 'react'\n\nimport Configurator from '../molecules/Configurator'\n\nconst MainApp = () => {\n  return (\n    <>\n      <h1>AER: Custom Expedition Editor</h1>\n      <Configurator />\n    </>\n  )\n}\n\nexport default MainApp\n","import React from 'react'\n\nimport { ThemeProvider } from 'styled-components/macro'\n\nimport mainTheme from 'themes/main'\n\nimport MainApp from './MainApp'\n\nconst App = () => (\n  <ThemeProvider theme={mainTheme}>\n    <MainApp />\n  </ThemeProvider>\n)\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport configureStore from './Redux/configureStore'\nimport { initialState } from './Redux/Store'\n\nimport * as serviceWorker from './serviceWorker'\n\nimport App from './components/App'\n\nconst store = configureStore(initialState)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport { install, StoreCreator } from 'redux-loop'\n\nimport { RootReducer, RootState } from './Store'\n\nconst configureStore = (initialState: RootState) => {\n  // Add middleware to this array if necessary\n  const middleWares: any[] = []\n\n  const enhancers = [applyMiddleware(...middleWares), install<RootState>()]\n\n  const composeEnhancers =\n    process.env.NODE_ENV !== 'production' &&\n    typeof window === 'object' &&\n    // @ts-ignore\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      // @ts-ignore\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      : compose\n\n  const enhancedCreateStore = createStore as StoreCreator\n  const store = enhancedCreateStore(\n    RootReducer,\n    initialState,\n    composeEnhancers(...enhancers)\n  )\n\n  return store\n}\n\nexport { configureStore as default }\n"],"sourceRoot":""}